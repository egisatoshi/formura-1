dimension :: 1
axes :: x

double :: π = 3.141592653589793
double :: dens0 = 1.0
double :: dp_ddens = 5/3
double :: dp_ds = 9/7
double :: dt = 0.01
double :: dx = 0.1, dy = 0.1, dz = 0.1


ddx = fun(a) (a[i-2] + 8*a[i+1] - 8*a[i-1] - a[i+2])/(12*dx)
ddy = fun(a) 0
ddz = fun(a) 0

∂ = (ddx,ddy,ddz)

Σ = fun (e) e(0)+e(1)+e(2)


begin function init() returns (dens, vx, vy, vz, Bx, By, Bz ,s)
      double [] :: dens = 0, vx = 0, vy = 0, vz = 0, Bx = 0, By = 0, Bz = 0,s = 0
end function

vec = fun (e) (e 0, e 1, e 2)


begin function apply_av(u) returns (u_next)
  um[i] = u[i-1]
  up[i] = u[i+1]
  delta_u[i] = (up-um)/2 <% 2*(up-u) <% 2*(u-um)
  u_l[i+1/2] = u[i] + 0.5 * delta_u[i]
  u_r[i-1/2] = u[i] - 0.5 * delta_u[i]

  uu_num[i+1/2] = u_r[i+1/2]-u_l[i+1/2]
  uu_den[i+1/2] = u[i+1]-u[i]

  Phi = if uu_num * uu_den <= 0 then 0 else (0 >? 1 + 2 *(uu_num / uu_den - 1))

  f = -0.5*Phi*uu_num

  u_next[i] = u[i] + f[i-1/2] - f[i+1/2]
end function


begin function ddt_sys(dens, v, B, s) returns (ddt_dens, ddt_v, ddt_B, ddt_s)
  ddt_dens = - Σ fun(i) ∂ i (dens0 * v i)

   ddt_v = vec fun(i)  -(Σ fun(j) v j * ∂ i (v i))  \
         - ∂ i (dp_ddens * dens + dp_ds * s + 1/(8*π) * Σ fun(j) B j * B j)/dens0 \
         + 1/(4*π) * (Σ fun(j) ∂ j (B j * B i)  )/dens0

  ddt_B = vec fun(i) Σ fun(j) ∂ j (v i * B j - v j * B i)

  ddt_s = Σ fun(j) v j * ∂ j s
end function

begin function step(dens, vx, vy, vz, Bx,By,Bz, s) returns (dens_next, vx_next, vy_next, vz_next, Bx_next, By_next, Bz_next, s_next)

      v = (vx, vy, vz)
      B = (Bx, By, Bz)

      sys_0 = (dens, v, B, s)

      manifest :: sys_q4 = sys_0 + dt/4 * ddt_sys(sys_0)

      manifest :: sys_q3 = sys_0 + dt/3 * ddt_sys(sys_q4)

      manifest :: sys_q2 = sys_0 + dt/2 * ddt_sys(sys_q3)

      manifest :: sys_next = sys_0 + dt * ddt_sys(sys_q2)

      sys_av = apply_av(sys_next)

      (dens_next, v_next, B_next, s_next) = sys_av
      (vx_next, vy_next, vz_next) = v_next
      (Bx_next, By_next, Bz_next) = B_next
end function
