## AST
Program {_programSpecialDeclarations = [DimensionDeclaration 1,AxesDeclaration ["x"]], _programBinding = BindingF [SubstF (IdentF "NX") (ImmF (300 % 1)),TypeDeclF  double (IdentF "gamma"),SubstF (IdentF "gamma") (ImmF (7 % 5)),TypeDeclF  double (IdentF "dx"),SubstF (IdentF "dx") (ImmF (1 % 1)),TypeDeclF  double (IdentF "dt"),SubstF (IdentF "dt") (ImmF (3 % 10)),TypeDeclF  double (IdentF "D"),SubstF (IdentF "D") (ImmF (1 % 5)),SubstF (IdentF "d") (LambdaF (IdentF "q") (BinopF "-" (GridF (NPlusK "i" (0 % 1)) (IdentF "q")) (GridF (NPlusK "i" ((-1) % 1)) (IdentF "q")))),SubstF (IdentF "d'") (LambdaF (IdentF "q") (BinopF "-" (GridF (NPlusK "i" (1 % 1)) (IdentF "q")) (GridF (NPlusK "i" (0 % 1)) (IdentF "q")))),SubstF (IdentF "viscosity") (LambdaF (IdentF "q") (UniopF "-" (BinopF "*" (BinopF "*" (IdentF "D") (IdentF "dx")) (BinopF "+" (BinopF "-" (GridF (NPlusK "i" (1 % 1)) (IdentF "q")) (BinopF "*" (ImmF (2 % 1)) (GridF (NPlusK "i" (0 % 1)) (IdentF "q")))) (GridF (NPlusK "i" ((-1) % 1)) (IdentF "q")))))),SubstF (IdentF "flux") (LambdaF (IdentF "r", IdentF "m", IdentF "e") (LetF (BindingF [SubstF (IdentF "rf") (IdentF "m"),SubstF (IdentF "mf") (BinopF "+" (BinopF "*" (BinopF "-" (IdentF "gamma") (ImmF (1 % 1))) (IdentF "e")) (BinopF "/" (BinopF "*" (BinopF "-" (ImmF (3 % 1)) (IdentF "gamma")) (BinopF "**" (IdentF "m") (ImmF (2 % 1)))) (BinopF "*" (ImmF (2 % 1)) (IdentF "r")))),SubstF (IdentF "ef") (BinopF "-" (BinopF "/" (BinopF "*" (BinopF "*" (IdentF "gamma") (IdentF "e")) (IdentF "m")) (IdentF "r")) (BinopF "/" (BinopF "*" (BinopF "-" (IdentF "gamma") (ImmF (1 % 1))) (BinopF "**" (IdentF "m") (ImmF (3 % 1)))) (BinopF "*" (ImmF (2 % 1)) (BinopF "**" (IdentF "r") (ImmF (2 % 1))))))]) (IdentF "rf", IdentF "mf", IdentF "ef"))),SubstF (IdentF "first_step") (LambdaF (IdentF "Q") (LetF (BindingF [SubstF (IdentF "E") (ApplyF (IdentF "flux") (IdentF "Q")),SubstF (IdentF "r'", IdentF "m'", IdentF "e'") (BinopF "-" (IdentF "Q") (BinopF "*" (BinopF "/" (IdentF "dt") (IdentF "dx")) (BinopF "+" (ApplyF (IdentF "d'") (IdentF "E")) (ApplyF (IdentF "viscosity") (IdentF "Q")))))]) (IdentF "r'", IdentF "m'", IdentF "e'"))),SubstF (IdentF "second_step") (LambdaF (IdentF "Q", IdentF "Q'") (LetF (BindingF [SubstF (IdentF "E'") (ApplyF (IdentF "flux") (IdentF "Q'")),SubstF (IdentF "r''", IdentF "m''", IdentF "e''") (BinopF "-" (BinopF "/" (BinopF "+" (IdentF "Q") (IdentF "Q'")) (ImmF (2 % 1))) (BinopF "*" (BinopF "/" (BinopF "/" (IdentF "dt") (IdentF "dx")) (ImmF (2 % 1))) (BinopF "+" (ApplyF (IdentF "d") (IdentF "E'")) (ApplyF (IdentF "viscosity") (IdentF "Q'")))))]) (IdentF "r''", IdentF "m''", IdentF "e''"))),SubstF (IdentF "init") (LambdaF () (LetF (BindingF [TypeDeclF  double() (IdentF "r"),TypeDeclF  double() (IdentF "m"),TypeDeclF  double() (IdentF "e"),SubstF (IdentF "r") (ImmF (0 % 1)),SubstF (IdentF "m") (ImmF (0 % 1)),SubstF (IdentF "e") (ImmF (0 % 1))]) (IdentF "r", IdentF "m", IdentF "e"))),SubstF (IdentF "step") (LambdaF (IdentF "r", IdentF "m", IdentF "e") (LetF (BindingF [SubstF (IdentF "Q") (IdentF "r", IdentF "m", IdentF "e"),SubstF (IdentF "Q_half") (ApplyF (IdentF "first_step") (IdentF "Q")),SubstF (IdentF "r_next", IdentF "m_next", IdentF "e_next") (ApplyF (IdentF "second_step") (IdentF "Q", IdentF "Q_half"))]) (IdentF "r_next", IdentF "m_next", IdentF "e_next")))], _programNumericalConfig = NumericalConfig {_ncIntraNodeShape = (300), _ncMPIGridShape = (1), _ncTemporalBlockingInterval = 2, _ncMonitorInterval = 4, _ncInitialWalls = fromList [("x",[150])], _ncWallInverted = Nothing, _ncOptionStrings = []}}

## Desugared AST
Program {_programSpecialDeclarations = [DimensionDeclaration 1,AxesDeclaration ["x"]], _programBinding = BindingF [SubstF (IdentF "NX") (ImmF (300 % 1)),TypeDeclF  double (IdentF "gamma"),SubstF (IdentF "gamma") (ImmF (7 % 5)),TypeDeclF  double (IdentF "dx"),SubstF (IdentF "dx") (ImmF (1 % 1)),TypeDeclF  double (IdentF "dt"),SubstF (IdentF "dt") (ImmF (3 % 10)),TypeDeclF  double (IdentF "D"),SubstF (IdentF "D") (ImmF (1 % 5)),SubstF (IdentF "d") (LambdaF (IdentF "q") (BinopF "-" (GridF (NPlusK "i" (0 % 1)) (IdentF "q")) (GridF (NPlusK "i" ((-1) % 1)) (IdentF "q")))),SubstF (IdentF "d'") (LambdaF (IdentF "q") (BinopF "-" (GridF (NPlusK "i" (1 % 1)) (IdentF "q")) (GridF (NPlusK "i" (0 % 1)) (IdentF "q")))),SubstF (IdentF "viscosity") (LambdaF (IdentF "q") (UniopF "-" (BinopF "*" (BinopF "*" (IdentF "D") (IdentF "dx")) (BinopF "+" (BinopF "-" (GridF (NPlusK "i" (1 % 1)) (IdentF "q")) (BinopF "*" (ImmF (2 % 1)) (GridF (NPlusK "i" (0 % 1)) (IdentF "q")))) (GridF (NPlusK "i" ((-1) % 1)) (IdentF "q")))))),SubstF (IdentF "flux") (LambdaF (IdentF "r", IdentF "m", IdentF "e") (LetF (BindingF [SubstF (IdentF "rf") (IdentF "m"),SubstF (IdentF "mf") (BinopF "+" (BinopF "*" (BinopF "-" (IdentF "gamma") (ImmF (1 % 1))) (IdentF "e")) (BinopF "/" (BinopF "*" (BinopF "-" (ImmF (3 % 1)) (IdentF "gamma")) (BinopF "**" (IdentF "m") (ImmF (2 % 1)))) (BinopF "*" (ImmF (2 % 1)) (IdentF "r")))),SubstF (IdentF "ef") (BinopF "-" (BinopF "/" (BinopF "*" (BinopF "*" (IdentF "gamma") (IdentF "e")) (IdentF "m")) (IdentF "r")) (BinopF "/" (BinopF "*" (BinopF "-" (IdentF "gamma") (ImmF (1 % 1))) (BinopF "**" (IdentF "m") (ImmF (3 % 1)))) (BinopF "*" (ImmF (2 % 1)) (BinopF "**" (IdentF "r") (ImmF (2 % 1))))))]) (IdentF "rf", IdentF "mf", IdentF "ef"))),SubstF (IdentF "first_step") (LambdaF (IdentF "Q") (LetF (BindingF [SubstF (IdentF "E") (ApplyF (IdentF "flux") (IdentF "Q")),SubstF (IdentF "r'", IdentF "m'", IdentF "e'") (BinopF "-" (IdentF "Q") (BinopF "*" (BinopF "/" (IdentF "dt") (IdentF "dx")) (BinopF "+" (ApplyF (IdentF "d'") (IdentF "E")) (ApplyF (IdentF "viscosity") (IdentF "Q")))))]) (IdentF "r'", IdentF "m'", IdentF "e'"))),SubstF (IdentF "second_step") (LambdaF (IdentF "Q", IdentF "Q'") (LetF (BindingF [SubstF (IdentF "E'") (ApplyF (IdentF "flux") (IdentF "Q'")),SubstF (IdentF "r''", IdentF "m''", IdentF "e''") (BinopF "-" (BinopF "/" (BinopF "+" (IdentF "Q") (IdentF "Q'")) (ImmF (2 % 1))) (BinopF "*" (BinopF "/" (BinopF "/" (IdentF "dt") (IdentF "dx")) (ImmF (2 % 1))) (BinopF "+" (ApplyF (IdentF "d") (IdentF "E'")) (ApplyF (IdentF "viscosity") (IdentF "Q'")))))]) (IdentF "r''", IdentF "m''", IdentF "e''"))),SubstF (IdentF "init") (LambdaF () (LetF (BindingF [TypeDeclF  double(0 % 1) (IdentF "r"),TypeDeclF  double(0 % 1) (IdentF "m"),TypeDeclF  double(0 % 1) (IdentF "e"),SubstF (IdentF "r") (ImmF (0 % 1)),SubstF (IdentF "m") (ImmF (0 % 1)),SubstF (IdentF "e") (ImmF (0 % 1))]) (IdentF "r", IdentF "m", IdentF "e"))),SubstF (IdentF "step") (LambdaF (IdentF "r", IdentF "m", IdentF "e") (LetF (BindingF [SubstF (IdentF "Q") (IdentF "r", IdentF "m", IdentF "e"),SubstF (IdentF "Q_half") (ApplyF (IdentF "first_step") (IdentF "Q")),SubstF (IdentF "r_next", IdentF "m_next", IdentF "e_next") (ApplyF (IdentF "second_step") (IdentF "Q", IdentF "Q_half"))]) (IdentF "r_next", IdentF "m_next", IdentF "e_next")))], _programNumericalConfig = NumericalConfig {_ncIntraNodeShape = (300), _ncMPIGridShape = (1), _ncTemporalBlockingInterval = 2, _ncMonitorInterval = 4, _ncInitialWalls = fromList [("x",[150])], _ncWallInverted = Nothing, _ncOptionStrings = []}}

## Debug print: global environment of the simulation
GlobalEnvironment {_dimension = 1, _axesNames = ("x"), _envNumericalConfig = NumericalConfig {_ncIntraNodeShape = (300), _ncMPIGridShape = (1), _ncTemporalBlockingInterval = 2, _ncMonitorInterval = 4, _ncInitialWalls = fromList [("x",[150])], _ncWallInverted = Nothing, _ncOptionStrings = []}}

## Debug print: simulation state
fromList [("e",double(0 % 1)),("m",double(0 % 1)),("r",double(0 % 1))]

## Debug print: init graph
  NX       (0,ImmF (300 % 1) :: Rational)
  gamma    (1,ImmF (7 % 5) :: Rational)
  dx       (2,ImmF (1 % 1) :: Rational)
  dt       (3,ImmF (3 % 10) :: Rational)
  D        (4,ImmF (1 % 5) :: Rational)
  r        (5,ImmF (0 % 1) :: Rational)
  m        (6,ImmF (0 % 1) :: Rational)
  e        (7,ImmF (0 % 1) :: Rational)
M r_next   (8,StoreF "r" 5 :: void)
M m_next   (9,StoreF "m" 6 :: void)
M e_next   (10,StoreF "e" 7 :: void)

## Debug print: step graph
  NX       (0,ImmF (300 % 1) :: Rational)
  gamma    (1,ImmF (7 % 5) :: Rational)
  dx       (2,ImmF (1 % 1) :: Rational)
  dt       (3,ImmF (3 % 10) :: Rational)
  D        (4,ImmF (1 % 5) :: Rational)
  Q        (5,LoadF "r" :: double(0 % 1))
  Q        (6,LoadF "m" :: double(0 % 1))
  Q        (7,LoadF "e" :: double(0 % 1))
           (8,ImmF (1 % 1) :: Rational)
           (9,BinopF "-" 1 8 :: Rational)
           (10,BinopF "*" 9 7 :: double(0 % 1))
           (11,ImmF (3 % 1) :: Rational)
           (12,BinopF "-" 11 1 :: Rational)
           (13,ImmF (2 % 1) :: Rational)
           (14,BinopF "**" 6 13 :: double(0 % 1))
           (15,BinopF "*" 12 14 :: double(0 % 1))
           (16,ImmF (2 % 1) :: Rational)
           (17,BinopF "*" 16 5 :: double(0 % 1))
           (18,BinopF "/" 15 17 :: double(0 % 1))
  mf       (19,BinopF "+" 10 18 :: double(0 % 1))
           (20,BinopF "*" 1 7 :: double(0 % 1))
           (21,BinopF "*" 20 6 :: double(0 % 1))
           (22,BinopF "/" 21 5 :: double(0 % 1))
           (23,ImmF (1 % 1) :: Rational)
           (24,BinopF "-" 1 23 :: Rational)
           (25,ImmF (3 % 1) :: Rational)
           (26,BinopF "**" 6 25 :: double(0 % 1))
           (27,BinopF "*" 24 26 :: double(0 % 1))
           (28,ImmF (2 % 1) :: Rational)
           (29,ImmF (2 % 1) :: Rational)
           (30,BinopF "**" 5 29 :: double(0 % 1))
           (31,BinopF "*" 28 30 :: double(0 % 1))
           (32,BinopF "/" 27 31 :: double(0 % 1))
  ef       (33,BinopF "-" 22 32 :: double(0 % 1))
           (34,BinopF "/" 3 2 :: Rational)
           (35,ShiftF (1) 6 :: double(0 % 1))
           (36,ShiftF (1) 19 :: double(0 % 1))
           (37,ShiftF (1) 33 :: double(0 % 1))
           (38,BinopF "-" 35 6 :: double(0 % 1))
           (39,BinopF "-" 36 19 :: double(0 % 1))
           (40,BinopF "-" 37 33 :: double(0 % 1))
           (41,BinopF "*" 4 2 :: Rational)
           (42,ShiftF (1) 5 :: double(0 % 1))
           (43,ShiftF (1) 6 :: double(0 % 1))
           (44,ShiftF (1) 7 :: double(0 % 1))
           (45,ImmF (2 % 1) :: Rational)
           (46,BinopF "*" 45 5 :: double(0 % 1))
           (47,BinopF "*" 45 6 :: double(0 % 1))
           (48,BinopF "*" 45 7 :: double(0 % 1))
           (49,BinopF "-" 42 46 :: double(0 % 1))
           (50,BinopF "-" 43 47 :: double(0 % 1))
           (51,BinopF "-" 44 48 :: double(0 % 1))
           (52,ShiftF (-1) 5 :: double(0 % 1))
           (53,ShiftF (-1) 6 :: double(0 % 1))
           (54,ShiftF (-1) 7 :: double(0 % 1))
           (55,BinopF "+" 49 52 :: double(0 % 1))
           (56,BinopF "+" 50 53 :: double(0 % 1))
           (57,BinopF "+" 51 54 :: double(0 % 1))
           (58,BinopF "*" 41 55 :: double(0 % 1))
           (59,BinopF "*" 41 56 :: double(0 % 1))
           (60,BinopF "*" 41 57 :: double(0 % 1))
           (61,UniopF "-" 58 :: double(0 % 1))
           (62,UniopF "-" 59 :: double(0 % 1))
           (63,UniopF "-" 60 :: double(0 % 1))
           (64,BinopF "+" 38 61 :: double(0 % 1))
           (65,BinopF "+" 39 62 :: double(0 % 1))
           (66,BinopF "+" 40 63 :: double(0 % 1))
           (67,BinopF "*" 34 64 :: double(0 % 1))
           (68,BinopF "*" 34 65 :: double(0 % 1))
           (69,BinopF "*" 34 66 :: double(0 % 1))
  r'       (70,BinopF "-" 5 67 :: double(0 % 1))
  m'       (71,BinopF "-" 6 68 :: double(0 % 1))
  e'       (72,BinopF "-" 7 69 :: double(0 % 1))
           (73,ImmF (1 % 1) :: Rational)
           (74,BinopF "-" 1 73 :: Rational)
           (75,BinopF "*" 74 72 :: double(0 % 1))
           (76,ImmF (3 % 1) :: Rational)
           (77,BinopF "-" 76 1 :: Rational)
           (78,ImmF (2 % 1) :: Rational)
           (79,BinopF "**" 71 78 :: double(0 % 1))
           (80,BinopF "*" 77 79 :: double(0 % 1))
           (81,ImmF (2 % 1) :: Rational)
           (82,BinopF "*" 81 70 :: double(0 % 1))
           (83,BinopF "/" 80 82 :: double(0 % 1))
  mf       (84,BinopF "+" 75 83 :: double(0 % 1))
           (85,BinopF "*" 1 72 :: double(0 % 1))
           (86,BinopF "*" 85 71 :: double(0 % 1))
           (87,BinopF "/" 86 70 :: double(0 % 1))
           (88,ImmF (1 % 1) :: Rational)
           (89,BinopF "-" 1 88 :: Rational)
           (90,ImmF (3 % 1) :: Rational)
           (91,BinopF "**" 71 90 :: double(0 % 1))
           (92,BinopF "*" 89 91 :: double(0 % 1))
           (93,ImmF (2 % 1) :: Rational)
           (94,ImmF (2 % 1) :: Rational)
           (95,BinopF "**" 70 94 :: double(0 % 1))
           (96,BinopF "*" 93 95 :: double(0 % 1))
           (97,BinopF "/" 92 96 :: double(0 % 1))
  ef       (98,BinopF "-" 87 97 :: double(0 % 1))
           (99,BinopF "+" 5 70 :: double(0 % 1))
           (100,BinopF "+" 6 71 :: double(0 % 1))
           (101,BinopF "+" 7 72 :: double(0 % 1))
           (102,ImmF (2 % 1) :: Rational)
           (103,BinopF "/" 99 102 :: double(0 % 1))
           (104,BinopF "/" 100 102 :: double(0 % 1))
           (105,BinopF "/" 101 102 :: double(0 % 1))
           (106,BinopF "/" 3 2 :: Rational)
           (107,ImmF (2 % 1) :: Rational)
           (108,BinopF "/" 106 107 :: Rational)
           (109,ShiftF (-1) 71 :: double(0 % 1))
           (110,ShiftF (-1) 84 :: double(0 % 1))
           (111,ShiftF (-1) 98 :: double(0 % 1))
           (112,BinopF "-" 71 109 :: double(0 % 1))
           (113,BinopF "-" 84 110 :: double(0 % 1))
           (114,BinopF "-" 98 111 :: double(0 % 1))
           (115,BinopF "*" 4 2 :: Rational)
           (116,ShiftF (1) 70 :: double(0 % 1))
           (117,ShiftF (1) 71 :: double(0 % 1))
           (118,ShiftF (1) 72 :: double(0 % 1))
           (119,ImmF (2 % 1) :: Rational)
           (120,BinopF "*" 119 70 :: double(0 % 1))
           (121,BinopF "*" 119 71 :: double(0 % 1))
           (122,BinopF "*" 119 72 :: double(0 % 1))
           (123,BinopF "-" 116 120 :: double(0 % 1))
           (124,BinopF "-" 117 121 :: double(0 % 1))
           (125,BinopF "-" 118 122 :: double(0 % 1))
           (126,ShiftF (-1) 70 :: double(0 % 1))
           (127,ShiftF (-1) 71 :: double(0 % 1))
           (128,ShiftF (-1) 72 :: double(0 % 1))
           (129,BinopF "+" 123 126 :: double(0 % 1))
           (130,BinopF "+" 124 127 :: double(0 % 1))
           (131,BinopF "+" 125 128 :: double(0 % 1))
           (132,BinopF "*" 115 129 :: double(0 % 1))
           (133,BinopF "*" 115 130 :: double(0 % 1))
           (134,BinopF "*" 115 131 :: double(0 % 1))
           (135,UniopF "-" 132 :: double(0 % 1))
           (136,UniopF "-" 133 :: double(0 % 1))
           (137,UniopF "-" 134 :: double(0 % 1))
           (138,BinopF "+" 112 135 :: double(0 % 1))
           (139,BinopF "+" 113 136 :: double(0 % 1))
           (140,BinopF "+" 114 137 :: double(0 % 1))
           (141,BinopF "*" 108 138 :: double(0 % 1))
           (142,BinopF "*" 108 139 :: double(0 % 1))
           (143,BinopF "*" 108 140 :: double(0 % 1))
  r''      (144,BinopF "-" 103 141 :: double(0 % 1))
  m''      (145,BinopF "-" 104 142 :: double(0 % 1))
  e''      (146,BinopF "-" 105 143 :: double(0 % 1))
M r_next   (147,StoreF "r" 144 :: void)
M m_next   (148,StoreF "m" 145 :: void)
M e_next   (149,StoreF "e" 146 :: void)

manifest node ID: [8,9,10]
manifest node ID: [147,148,149]
## Debug print: manifested init graph
r_next   (8,fromList [(0,ImmF (0 % 1) :: Rational),(1,StoreF "r" 0 :: void)] :: void)
m_next   (9,fromList [(0,ImmF (0 % 1) :: Rational),(1,StoreF "m" 0 :: void)] :: void)
e_next   (10,fromList [(0,ImmF (0 % 1) :: Rational),(1,StoreF "e" 0 :: void)] :: void)

## Debug print: manifested step graph
r_next   (147,fromList [(0,LoadCursorStaticF (0) "r" :: double),(1,ImmF (3 % 10) :: Rational),(2,ImmF (1 % 1) :: Rational),(3,BinopF "/" 1 2 :: Rational),(4,LoadCursorStaticF (1) "m" :: double),(5,LoadCursorStaticF (0) "m" :: double),(6,BinopF "-" 4 5 :: double),(7,ImmF (1 % 5) :: Rational),(8,BinopF "*" 7 2 :: Rational),(9,LoadCursorStaticF (1) "r" :: double),(10,ImmF (2 % 1) :: Rational),(11,BinopF "*" 10 0 :: double),(12,BinopF "-" 9 11 :: double),(13,LoadCursorStaticF (-1) "r" :: double),(14,BinopF "+" 12 13 :: double),(15,BinopF "*" 8 14 :: double),(16,UniopF "-" 15 :: double),(17,BinopF "+" 6 16 :: double),(18,BinopF "*" 3 17 :: double),(19,BinopF "-" 0 18 :: double),(20,BinopF "+" 0 19 :: double),(21,ImmF (2 % 1) :: Rational),(22,BinopF "/" 20 21 :: double),(23,BinopF "/" 1 2 :: Rational),(24,ImmF (2 % 1) :: Rational),(25,BinopF "/" 23 24 :: Rational),(26,ImmF (7 % 5) :: Rational),(27,ImmF (1 % 1) :: Rational),(28,BinopF "-" 26 27 :: Rational),(29,LoadCursorStaticF (1) "e" :: double),(30,BinopF "*" 28 29 :: double),(31,ImmF (3 % 1) :: Rational),(32,BinopF "-" 31 26 :: Rational),(33,ImmF (2 % 1) :: Rational),(34,BinopF "**" 4 33 :: double),(35,BinopF "*" 32 34 :: double),(36,ImmF (2 % 1) :: Rational),(37,BinopF "*" 36 9 :: double),(38,BinopF "/" 35 37 :: double),(39,BinopF "+" 30 38 :: double),(40,ImmF (7 % 5) :: Rational),(41,ImmF (1 % 1) :: Rational),(42,BinopF "-" 40 41 :: Rational),(43,LoadCursorStaticF (0) "e" :: double),(44,BinopF "*" 42 43 :: double),(45,ImmF (3 % 1) :: Rational),(46,BinopF "-" 45 40 :: Rational),(47,ImmF (2 % 1) :: Rational),(48,BinopF "**" 5 47 :: double),(49,BinopF "*" 46 48 :: double),(50,ImmF (2 % 1) :: Rational),(51,BinopF "*" 50 0 :: double),(52,BinopF "/" 49 51 :: double),(53,BinopF "+" 44 52 :: double),(54,BinopF "-" 39 53 :: double),(55,BinopF "*" 10 5 :: double),(56,BinopF "-" 4 55 :: double),(57,LoadCursorStaticF (-1) "m" :: double),(58,BinopF "+" 56 57 :: double),(59,BinopF "*" 8 58 :: double),(60,UniopF "-" 59 :: double),(61,BinopF "+" 54 60 :: double),(62,BinopF "*" 3 61 :: double),(63,BinopF "-" 5 62 :: double),(64,ImmF (3 % 10) :: Rational),(65,ImmF (1 % 1) :: Rational),(66,BinopF "/" 64 65 :: Rational),(67,ImmF (7 % 5) :: Rational),(68,ImmF (1 % 1) :: Rational),(69,BinopF "-" 67 68 :: Rational),(70,LoadCursorStaticF (-1) "e" :: double),(71,BinopF "*" 69 70 :: double),(72,ImmF (3 % 1) :: Rational),(73,BinopF "-" 72 67 :: Rational),(74,ImmF (2 % 1) :: Rational),(75,BinopF "**" 57 74 :: double),(76,BinopF "*" 73 75 :: double),(77,ImmF (2 % 1) :: Rational),(78,BinopF "*" 77 13 :: double),(79,BinopF "/" 76 78 :: double),(80,BinopF "+" 71 79 :: double),(81,BinopF "-" 53 80 :: double),(82,ImmF (1 % 5) :: Rational),(83,BinopF "*" 82 65 :: Rational),(84,ImmF (2 % 1) :: Rational),(85,BinopF "*" 84 57 :: double),(86,BinopF "-" 5 85 :: double),(87,LoadCursorStaticF (-2) "m" :: double),(88,BinopF "+" 86 87 :: double),(89,BinopF "*" 83 88 :: double),(90,UniopF "-" 89 :: double),(91,BinopF "+" 81 90 :: double),(92,BinopF "*" 66 91 :: double),(93,BinopF "-" 57 92 :: double),(94,BinopF "-" 63 93 :: double),(95,BinopF "*" 7 2 :: Rational),(96,ImmF (3 % 10) :: Rational),(97,ImmF (1 % 1) :: Rational),(98,BinopF "/" 96 97 :: Rational),(99,LoadCursorStaticF (2) "m" :: double),(100,BinopF "-" 99 4 :: double),(101,ImmF (1 % 5) :: Rational),(102,BinopF "*" 101 97 :: Rational),(103,LoadCursorStaticF (2) "r" :: double),(104,ImmF (2 % 1) :: Rational),(105,BinopF "*" 104 9 :: double),(106,BinopF "-" 103 105 :: double),(107,BinopF "+" 106 0 :: double),(108,BinopF "*" 102 107 :: double),(109,UniopF "-" 108 :: double),(110,BinopF "+" 100 109 :: double),(111,BinopF "*" 98 110 :: double),(112,BinopF "-" 9 111 :: double),(113,ImmF (2 % 1) :: Rational),(114,BinopF "*" 113 19 :: double),(115,BinopF "-" 112 114 :: double),(116,BinopF "-" 5 57 :: double),(117,BinopF "*" 84 13 :: double),(118,BinopF "-" 0 117 :: double),(119,LoadCursorStaticF (-2) "r" :: double),(120,BinopF "+" 118 119 :: double),(121,BinopF "*" 83 120 :: double),(122,UniopF "-" 121 :: double),(123,BinopF "+" 116 122 :: double),(124,BinopF "*" 66 123 :: double),(125,BinopF "-" 13 124 :: double),(126,BinopF "+" 115 125 :: double),(127,BinopF "*" 95 126 :: double),(128,UniopF "-" 127 :: double),(129,BinopF "+" 94 128 :: double),(130,BinopF "*" 25 129 :: double),(131,BinopF "-" 22 130 :: double),(132,StoreF "r" 131 :: void)] :: void)
m_next   (148,fromList [(0,LoadCursorStaticF (0) "m" :: double),(1,ImmF (3 % 10) :: Rational),(2,ImmF (1 % 1) :: Rational),(3,BinopF "/" 1 2 :: Rational),(4,ImmF (7 % 5) :: Rational),(5,ImmF (1 % 1) :: Rational),(6,BinopF "-" 4 5 :: Rational),(7,LoadCursorStaticF (1) "e" :: double),(8,BinopF "*" 6 7 :: double),(9,ImmF (3 % 1) :: Rational),(10,BinopF "-" 9 4 :: Rational),(11,LoadCursorStaticF (1) "m" :: double),(12,ImmF (2 % 1) :: Rational),(13,BinopF "**" 11 12 :: double),(14,BinopF "*" 10 13 :: double),(15,ImmF (2 % 1) :: Rational),(16,LoadCursorStaticF (1) "r" :: double),(17,BinopF "*" 15 16 :: double),(18,BinopF "/" 14 17 :: double),(19,BinopF "+" 8 18 :: double),(20,ImmF (7 % 5) :: Rational),(21,ImmF (1 % 1) :: Rational),(22,BinopF "-" 20 21 :: Rational),(23,LoadCursorStaticF (0) "e" :: double),(24,BinopF "*" 22 23 :: double),(25,ImmF (3 % 1) :: Rational),(26,BinopF "-" 25 20 :: Rational),(27,ImmF (2 % 1) :: Rational),(28,BinopF "**" 0 27 :: double),(29,BinopF "*" 26 28 :: double),(30,ImmF (2 % 1) :: Rational),(31,LoadCursorStaticF (0) "r" :: double),(32,BinopF "*" 30 31 :: double),(33,BinopF "/" 29 32 :: double),(34,BinopF "+" 24 33 :: double),(35,BinopF "-" 19 34 :: double),(36,ImmF (1 % 5) :: Rational),(37,BinopF "*" 36 2 :: Rational),(38,ImmF (2 % 1) :: Rational),(39,BinopF "*" 38 0 :: double),(40,BinopF "-" 11 39 :: double),(41,LoadCursorStaticF (-1) "m" :: double),(42,BinopF "+" 40 41 :: double),(43,BinopF "*" 37 42 :: double),(44,UniopF "-" 43 :: double),(45,BinopF "+" 35 44 :: double),(46,BinopF "*" 3 45 :: double),(47,BinopF "-" 0 46 :: double),(48,BinopF "+" 0 47 :: double),(49,ImmF (2 % 1) :: Rational),(50,BinopF "/" 48 49 :: double),(51,BinopF "/" 1 2 :: Rational),(52,ImmF (2 % 1) :: Rational),(53,BinopF "/" 51 52 :: Rational),(54,ImmF (1 % 1) :: Rational),(55,BinopF "-" 20 54 :: Rational),(56,BinopF "*" 4 7 :: double),(57,BinopF "*" 56 11 :: double),(58,BinopF "/" 57 16 :: double),(59,ImmF (1 % 1) :: Rational),(60,BinopF "-" 4 59 :: Rational),(61,ImmF (3 % 1) :: Rational),(62,BinopF "**" 11 61 :: double),(63,BinopF "*" 60 62 :: double),(64,ImmF (2 % 1) :: Rational),(65,ImmF (2 % 1) :: Rational),(66,BinopF "**" 16 65 :: double),(67,BinopF "*" 64 66 :: double),(68,BinopF "/" 63 67 :: double),(69,BinopF "-" 58 68 :: double),(70,BinopF "*" 20 23 :: double),(71,BinopF "*" 70 0 :: double),(72,BinopF "/" 71 31 :: double),(73,ImmF (1 % 1) :: Rational),(74,BinopF "-" 20 73 :: Rational),(75,ImmF (3 % 1) :: Rational),(76,BinopF "**" 0 75 :: double),(77,BinopF "*" 74 76 :: double),(78,ImmF (2 % 1) :: Rational),(79,ImmF (2 % 1) :: Rational),(80,BinopF "**" 31 79 :: double),(81,BinopF "*" 78 80 :: double),(82,BinopF "/" 77 81 :: double),(83,BinopF "-" 72 82 :: double),(84,BinopF "-" 69 83 :: double),(85,BinopF "*" 38 23 :: double),(86,BinopF "-" 7 85 :: double),(87,LoadCursorStaticF (-1) "e" :: double),(88,BinopF "+" 86 87 :: double),(89,BinopF "*" 37 88 :: double),(90,UniopF "-" 89 :: double),(91,BinopF "+" 84 90 :: double),(92,BinopF "*" 3 91 :: double),(93,BinopF "-" 23 92 :: double),(94,BinopF "*" 55 93 :: double),(95,ImmF (3 % 1) :: Rational),(96,BinopF "-" 95 20 :: Rational),(97,ImmF (2 % 1) :: Rational),(98,BinopF "**" 47 97 :: double),(99,BinopF "*" 96 98 :: double),(100,ImmF (2 % 1) :: Rational),(101,BinopF "-" 11 0 :: double),(102,BinopF "*" 38 31 :: double),(103,BinopF "-" 16 102 :: double),(104,LoadCursorStaticF (-1) "r" :: double),(105,BinopF "+" 103 104 :: double),(106,BinopF "*" 37 105 :: double),(107,UniopF "-" 106 :: double),(108,BinopF "+" 101 107 :: double),(109,BinopF "*" 3 108 :: double),(110,BinopF "-" 31 109 :: double),(111,BinopF "*" 100 110 :: double),(112,BinopF "/" 99 111 :: double),(113,BinopF "+" 94 112 :: double),(114,ImmF (7 % 5) :: Rational),(115,ImmF (1 % 1) :: Rational),(116,BinopF "-" 114 115 :: Rational),(117,ImmF (3 % 10) :: Rational),(118,ImmF (1 % 1) :: Rational),(119,BinopF "/" 117 118 :: Rational),(120,BinopF "*" 114 87 :: double),(121,BinopF "*" 120 41 :: double),(122,BinopF "/" 121 104 :: double),(123,ImmF (1 % 1) :: Rational),(124,BinopF "-" 114 123 :: Rational),(125,ImmF (3 % 1) :: Rational),(126,BinopF "**" 41 125 :: double),(127,BinopF "*" 124 126 :: double),(128,ImmF (2 % 1) :: Rational),(129,ImmF (2 % 1) :: Rational),(130,BinopF "**" 104 129 :: double),(131,BinopF "*" 128 130 :: double),(132,BinopF "/" 127 131 :: double),(133,BinopF "-" 122 132 :: double),(134,BinopF "-" 83 133 :: double),(135,ImmF (1 % 5) :: Rational),(136,BinopF "*" 135 118 :: Rational),(137,ImmF (2 % 1) :: Rational),(138,BinopF "*" 137 87 :: double),(139,BinopF "-" 23 138 :: double),(140,LoadCursorStaticF (-2) "e" :: double),(141,BinopF "+" 139 140 :: double),(142,BinopF "*" 136 141 :: double),(143,UniopF "-" 142 :: double),(144,BinopF "+" 134 143 :: double),(145,BinopF "*" 119 144 :: double),(146,BinopF "-" 87 145 :: double),(147,BinopF "*" 116 146 :: double),(148,ImmF (3 % 1) :: Rational),(149,BinopF "-" 148 114 :: Rational),(150,ImmF (1 % 1) :: Rational),(151,BinopF "-" 114 150 :: Rational),(152,BinopF "*" 151 87 :: double),(153,ImmF (3 % 1) :: Rational),(154,BinopF "-" 153 114 :: Rational),(155,ImmF (2 % 1) :: Rational),(156,BinopF "**" 41 155 :: double),(157,BinopF "*" 154 156 :: double),(158,ImmF (2 % 1) :: Rational),(159,BinopF "*" 158 104 :: double),(160,BinopF "/" 157 159 :: double),(161,BinopF "+" 152 160 :: double),(162,BinopF "-" 34 161 :: double),(163,BinopF "*" 137 41 :: double),(164,BinopF "-" 0 163 :: double),(165,LoadCursorStaticF (-2) "m" :: double),(166,BinopF "+" 164 165 :: double),(167,BinopF "*" 136 166 :: double),(168,UniopF "-" 167 :: double),(169,BinopF "+" 162 168 :: double),(170,BinopF "*" 119 169 :: double),(171,BinopF "-" 41 170 :: double),(172,ImmF (2 % 1) :: Rational),(173,BinopF "**" 171 172 :: double),(174,BinopF "*" 149 173 :: double),(175,ImmF (2 % 1) :: Rational),(176,BinopF "-" 0 41 :: double),(177,BinopF "*" 137 104 :: double),(178,BinopF "-" 31 177 :: double),(179,LoadCursorStaticF (-2) "r" :: double),(180,BinopF "+" 178 179 :: double),(181,BinopF "*" 136 180 :: double),(182,UniopF "-" 181 :: double),(183,BinopF "+" 176 182 :: double),(184,BinopF "*" 119 183 :: double),(185,BinopF "-" 104 184 :: double),(186,BinopF "*" 175 185 :: double),(187,BinopF "/" 174 186 :: double),(188,BinopF "+" 147 187 :: double),(189,BinopF "-" 113 188 :: double),(190,BinopF "*" 36 2 :: Rational),(191,ImmF (3 % 10) :: Rational),(192,ImmF (1 % 1) :: Rational),(193,BinopF "/" 191 192 :: Rational),(194,ImmF (7 % 5) :: Rational),(195,ImmF (1 % 1) :: Rational),(196,BinopF "-" 194 195 :: Rational),(197,LoadCursorStaticF (2) "e" :: double),(198,BinopF "*" 196 197 :: double),(199,ImmF (3 % 1) :: Rational),(200,BinopF "-" 199 194 :: Rational),(201,LoadCursorStaticF (2) "m" :: double),(202,ImmF (2 % 1) :: Rational),(203,BinopF "**" 201 202 :: double),(204,BinopF "*" 200 203 :: double),(205,ImmF (2 % 1) :: Rational),(206,LoadCursorStaticF (2) "r" :: double),(207,BinopF "*" 205 206 :: double),(208,BinopF "/" 204 207 :: double),(209,BinopF "+" 198 208 :: double),(210,BinopF "-" 209 19 :: double),(211,ImmF (1 % 5) :: Rational),(212,BinopF "*" 211 192 :: Rational),(213,ImmF (2 % 1) :: Rational),(214,BinopF "*" 213 11 :: double),(215,BinopF "-" 201 214 :: double),(216,BinopF "+" 215 0 :: double),(217,BinopF "*" 212 216 :: double),(218,UniopF "-" 217 :: double),(219,BinopF "+" 210 218 :: double),(220,BinopF "*" 193 219 :: double),(221,BinopF "-" 11 220 :: double),(222,ImmF (2 % 1) :: Rational),(223,BinopF "*" 222 47 :: double),(224,BinopF "-" 221 223 :: double),(225,BinopF "+" 224 171 :: double),(226,BinopF "*" 190 225 :: double),(227,UniopF "-" 226 :: double),(228,BinopF "+" 189 227 :: double),(229,BinopF "*" 53 228 :: double),(230,BinopF "-" 50 229 :: double),(231,StoreF "m" 230 :: void)] :: void)
e_next   (149,fromList [(0,LoadCursorStaticF (0) "e" :: double),(1,ImmF (3 % 10) :: Rational),(2,ImmF (1 % 1) :: Rational),(3,BinopF "/" 1 2 :: Rational),(4,ImmF (7 % 5) :: Rational),(5,LoadCursorStaticF (1) "e" :: double),(6,BinopF "*" 4 5 :: double),(7,LoadCursorStaticF (1) "m" :: double),(8,BinopF "*" 6 7 :: double),(9,LoadCursorStaticF (1) "r" :: double),(10,BinopF "/" 8 9 :: double),(11,ImmF (1 % 1) :: Rational),(12,BinopF "-" 4 11 :: Rational),(13,ImmF (3 % 1) :: Rational),(14,BinopF "**" 7 13 :: double),(15,BinopF "*" 12 14 :: double),(16,ImmF (2 % 1) :: Rational),(17,ImmF (2 % 1) :: Rational),(18,BinopF "**" 9 17 :: double),(19,BinopF "*" 16 18 :: double),(20,BinopF "/" 15 19 :: double),(21,BinopF "-" 10 20 :: double),(22,ImmF (7 % 5) :: Rational),(23,BinopF "*" 22 0 :: double),(24,LoadCursorStaticF (0) "m" :: double),(25,BinopF "*" 23 24 :: double),(26,LoadCursorStaticF (0) "r" :: double),(27,BinopF "/" 25 26 :: double),(28,ImmF (1 % 1) :: Rational),(29,BinopF "-" 22 28 :: Rational),(30,ImmF (3 % 1) :: Rational),(31,BinopF "**" 24 30 :: double),(32,BinopF "*" 29 31 :: double),(33,ImmF (2 % 1) :: Rational),(34,ImmF (2 % 1) :: Rational),(35,BinopF "**" 26 34 :: double),(36,BinopF "*" 33 35 :: double),(37,BinopF "/" 32 36 :: double),(38,BinopF "-" 27 37 :: double),(39,BinopF "-" 21 38 :: double),(40,ImmF (1 % 5) :: Rational),(41,BinopF "*" 40 2 :: Rational),(42,ImmF (2 % 1) :: Rational),(43,BinopF "*" 42 0 :: double),(44,BinopF "-" 5 43 :: double),(45,LoadCursorStaticF (-1) "e" :: double),(46,BinopF "+" 44 45 :: double),(47,BinopF "*" 41 46 :: double),(48,UniopF "-" 47 :: double),(49,BinopF "+" 39 48 :: double),(50,BinopF "*" 3 49 :: double),(51,BinopF "-" 0 50 :: double),(52,BinopF "+" 0 51 :: double),(53,ImmF (2 % 1) :: Rational),(54,BinopF "/" 52 53 :: double),(55,BinopF "/" 1 2 :: Rational),(56,ImmF (2 % 1) :: Rational),(57,BinopF "/" 55 56 :: Rational),(58,BinopF "*" 22 51 :: double),(59,ImmF (1 % 1) :: Rational),(60,BinopF "-" 4 59 :: Rational),(61,BinopF "*" 60 5 :: double),(62,ImmF (3 % 1) :: Rational),(63,BinopF "-" 62 4 :: Rational),(64,ImmF (2 % 1) :: Rational),(65,BinopF "**" 7 64 :: double),(66,BinopF "*" 63 65 :: double),(67,ImmF (2 % 1) :: Rational),(68,BinopF "*" 67 9 :: double),(69,BinopF "/" 66 68 :: double),(70,BinopF "+" 61 69 :: double),(71,ImmF (1 % 1) :: Rational),(72,BinopF "-" 22 71 :: Rational),(73,BinopF "*" 72 0 :: double),(74,ImmF (3 % 1) :: Rational),(75,BinopF "-" 74 22 :: Rational),(76,ImmF (2 % 1) :: Rational),(77,BinopF "**" 24 76 :: double),(78,BinopF "*" 75 77 :: double),(79,ImmF (2 % 1) :: Rational),(80,BinopF "*" 79 26 :: double),(81,BinopF "/" 78 80 :: double),(82,BinopF "+" 73 81 :: double),(83,BinopF "-" 70 82 :: double),(84,BinopF "*" 42 24 :: double),(85,BinopF "-" 7 84 :: double),(86,LoadCursorStaticF (-1) "m" :: double),(87,BinopF "+" 85 86 :: double),(88,BinopF "*" 41 87 :: double),(89,UniopF "-" 88 :: double),(90,BinopF "+" 83 89 :: double),(91,BinopF "*" 3 90 :: double),(92,BinopF "-" 24 91 :: double),(93,BinopF "*" 58 92 :: double),(94,BinopF "-" 7 24 :: double),(95,BinopF "*" 42 26 :: double),(96,BinopF "-" 9 95 :: double),(97,LoadCursorStaticF (-1) "r" :: double),(98,BinopF "+" 96 97 :: double),(99,BinopF "*" 41 98 :: double),(100,UniopF "-" 99 :: double),(101,BinopF "+" 94 100 :: double),(102,BinopF "*" 3 101 :: double),(103,BinopF "-" 26 102 :: double),(104,BinopF "/" 93 103 :: double),(105,ImmF (1 % 1) :: Rational),(106,BinopF "-" 22 105 :: Rational),(107,ImmF (3 % 1) :: Rational),(108,BinopF "**" 92 107 :: double),(109,BinopF "*" 106 108 :: double),(110,ImmF (2 % 1) :: Rational),(111,ImmF (2 % 1) :: Rational),(112,BinopF "**" 103 111 :: double),(113,BinopF "*" 110 112 :: double),(114,BinopF "/" 109 113 :: double),(115,BinopF "-" 104 114 :: double),(116,ImmF (7 % 5) :: Rational),(117,ImmF (3 % 10) :: Rational),(118,ImmF (1 % 1) :: Rational),(119,BinopF "/" 117 118 :: Rational),(120,BinopF "*" 116 45 :: double),(121,BinopF "*" 120 86 :: double),(122,BinopF "/" 121 97 :: double),(123,ImmF (1 % 1) :: Rational),(124,BinopF "-" 116 123 :: Rational),(125,ImmF (3 % 1) :: Rational),(126,BinopF "**" 86 125 :: double),(127,BinopF "*" 124 126 :: double),(128,ImmF (2 % 1) :: Rational),(129,ImmF (2 % 1) :: Rational),(130,BinopF "**" 97 129 :: double),(131,BinopF "*" 128 130 :: double),(132,BinopF "/" 127 131 :: double),(133,BinopF "-" 122 132 :: double),(134,BinopF "-" 38 133 :: double),(135,ImmF (1 % 5) :: Rational),(136,BinopF "*" 135 118 :: Rational),(137,ImmF (2 % 1) :: Rational),(138,BinopF "*" 137 45 :: double),(139,BinopF "-" 0 138 :: double),(140,LoadCursorStaticF (-2) "e" :: double),(141,BinopF "+" 139 140 :: double),(142,BinopF "*" 136 141 :: double),(143,UniopF "-" 142 :: double),(144,BinopF "+" 134 143 :: double),(145,BinopF "*" 119 144 :: double),(146,BinopF "-" 45 145 :: double),(147,BinopF "*" 116 146 :: double),(148,ImmF (1 % 1) :: Rational),(149,BinopF "-" 116 148 :: Rational),(150,BinopF "*" 149 45 :: double),(151,ImmF (3 % 1) :: Rational),(152,BinopF "-" 151 116 :: Rational),(153,ImmF (2 % 1) :: Rational),(154,BinopF "**" 86 153 :: double),(155,BinopF "*" 152 154 :: double),(156,ImmF (2 % 1) :: Rational),(157,BinopF "*" 156 97 :: double),(158,BinopF "/" 155 157 :: double),(159,BinopF "+" 150 158 :: double),(160,BinopF "-" 82 159 :: double),(161,BinopF "*" 137 86 :: double),(162,BinopF "-" 24 161 :: double),(163,LoadCursorStaticF (-2) "m" :: double),(164,BinopF "+" 162 163 :: double),(165,BinopF "*" 136 164 :: double),(166,UniopF "-" 165 :: double),(167,BinopF "+" 160 166 :: double),(168,BinopF "*" 119 167 :: double),(169,BinopF "-" 86 168 :: double),(170,BinopF "*" 147 169 :: double),(171,BinopF "-" 24 86 :: double),(172,BinopF "*" 137 97 :: double),(173,BinopF "-" 26 172 :: double),(174,LoadCursorStaticF (-2) "r" :: double),(175,BinopF "+" 173 174 :: double),(176,BinopF "*" 136 175 :: double),(177,UniopF "-" 176 :: double),(178,BinopF "+" 171 177 :: double),(179,BinopF "*" 119 178 :: double),(180,BinopF "-" 97 179 :: double),(181,BinopF "/" 170 180 :: double),(182,ImmF (1 % 1) :: Rational),(183,BinopF "-" 116 182 :: Rational),(184,ImmF (3 % 1) :: Rational),(185,BinopF "**" 169 184 :: double),(186,BinopF "*" 183 185 :: double),(187,ImmF (2 % 1) :: Rational),(188,ImmF (2 % 1) :: Rational),(189,BinopF "**" 180 188 :: double),(190,BinopF "*" 187 189 :: double),(191,BinopF "/" 186 190 :: double),(192,BinopF "-" 181 191 :: double),(193,BinopF "-" 115 192 :: double),(194,BinopF "*" 40 2 :: Rational),(195,ImmF (3 % 10) :: Rational),(196,ImmF (1 % 1) :: Rational),(197,BinopF "/" 195 196 :: Rational),(198,ImmF (7 % 5) :: Rational),(199,LoadCursorStaticF (2) "e" :: double),(200,BinopF "*" 198 199 :: double),(201,LoadCursorStaticF (2) "m" :: double),(202,BinopF "*" 200 201 :: double),(203,LoadCursorStaticF (2) "r" :: double),(204,BinopF "/" 202 203 :: double),(205,ImmF (1 % 1) :: Rational),(206,BinopF "-" 198 205 :: Rational),(207,ImmF (3 % 1) :: Rational),(208,BinopF "**" 201 207 :: double),(209,BinopF "*" 206 208 :: double),(210,ImmF (2 % 1) :: Rational),(211,ImmF (2 % 1) :: Rational),(212,BinopF "**" 203 211 :: double),(213,BinopF "*" 210 212 :: double),(214,BinopF "/" 209 213 :: double),(215,BinopF "-" 204 214 :: double),(216,BinopF "-" 215 21 :: double),(217,ImmF (1 % 5) :: Rational),(218,BinopF "*" 217 196 :: Rational),(219,ImmF (2 % 1) :: Rational),(220,BinopF "*" 219 5 :: double),(221,BinopF "-" 199 220 :: double),(222,BinopF "+" 221 0 :: double),(223,BinopF "*" 218 222 :: double),(224,UniopF "-" 223 :: double),(225,BinopF "+" 216 224 :: double),(226,BinopF "*" 197 225 :: double),(227,BinopF "-" 5 226 :: double),(228,ImmF (2 % 1) :: Rational),(229,BinopF "*" 228 51 :: double),(230,BinopF "-" 227 229 :: double),(231,BinopF "+" 230 146 :: double),(232,BinopF "*" 194 231 :: double),(233,UniopF "-" 232 :: double),(234,BinopF "+" 193 233 :: double),(235,BinopF "*" 57 234 :: double),(236,BinopF "-" 54 235 :: double),(237,StoreF "e" 236 :: void)] :: void)

Target language is:MPICxx
r_next   (147,fromList [(0,LoadCursorStaticF (0) "r" :: double),(1,ImmF (3 % 10) :: Rational),(2,ImmF (1 % 1) :: Rational),(3,BinopF "/" 1 2 :: Rational),(4,LoadCursorStaticF (1) "m" :: double),(5,LoadCursorStaticF (0) "m" :: double),(6,BinopF "-" 4 5 :: double),(7,ImmF (1 % 5) :: Rational),(8,BinopF "*" 7 2 :: Rational),(9,LoadCursorStaticF (1) "r" :: double),(10,ImmF (2 % 1) :: Rational),(11,BinopF "*" 10 0 :: double),(12,BinopF "-" 9 11 :: double),(13,LoadCursorStaticF (-1) "r" :: double),(14,BinopF "+" 12 13 :: double),(15,BinopF "*" 8 14 :: double),(16,UniopF "-" 15 :: double),(17,BinopF "+" 6 16 :: double),(18,BinopF "*" 3 17 :: double),(19,BinopF "-" 0 18 :: double),(20,BinopF "+" 0 19 :: double),(21,ImmF (2 % 1) :: Rational),(22,BinopF "/" 20 21 :: double),(23,BinopF "/" 1 2 :: Rational),(24,ImmF (2 % 1) :: Rational),(25,BinopF "/" 23 24 :: Rational),(26,ImmF (7 % 5) :: Rational),(27,ImmF (1 % 1) :: Rational),(28,BinopF "-" 26 27 :: Rational),(29,LoadCursorStaticF (1) "e" :: double),(30,BinopF "*" 28 29 :: double),(31,ImmF (3 % 1) :: Rational),(32,BinopF "-" 31 26 :: Rational),(33,ImmF (2 % 1) :: Rational),(34,BinopF "**" 4 33 :: double),(35,BinopF "*" 32 34 :: double),(36,ImmF (2 % 1) :: Rational),(37,BinopF "*" 36 9 :: double),(38,BinopF "/" 35 37 :: double),(39,BinopF "+" 30 38 :: double),(40,ImmF (7 % 5) :: Rational),(41,ImmF (1 % 1) :: Rational),(42,BinopF "-" 40 41 :: Rational),(43,LoadCursorStaticF (0) "e" :: double),(44,BinopF "*" 42 43 :: double),(45,ImmF (3 % 1) :: Rational),(46,BinopF "-" 45 40 :: Rational),(47,ImmF (2 % 1) :: Rational),(48,BinopF "**" 5 47 :: double),(49,BinopF "*" 46 48 :: double),(50,ImmF (2 % 1) :: Rational),(51,BinopF "*" 50 0 :: double),(52,BinopF "/" 49 51 :: double),(53,BinopF "+" 44 52 :: double),(54,BinopF "-" 39 53 :: double),(55,BinopF "*" 10 5 :: double),(56,BinopF "-" 4 55 :: double),(57,LoadCursorStaticF (-1) "m" :: double),(58,BinopF "+" 56 57 :: double),(59,BinopF "*" 8 58 :: double),(60,UniopF "-" 59 :: double),(61,BinopF "+" 54 60 :: double),(62,BinopF "*" 3 61 :: double),(63,BinopF "-" 5 62 :: double),(64,ImmF (3 % 10) :: Rational),(65,ImmF (1 % 1) :: Rational),(66,BinopF "/" 64 65 :: Rational),(67,ImmF (7 % 5) :: Rational),(68,ImmF (1 % 1) :: Rational),(69,BinopF "-" 67 68 :: Rational),(70,LoadCursorStaticF (-1) "e" :: double),(71,BinopF "*" 69 70 :: double),(72,ImmF (3 % 1) :: Rational),(73,BinopF "-" 72 67 :: Rational),(74,ImmF (2 % 1) :: Rational),(75,BinopF "**" 57 74 :: double),(76,BinopF "*" 73 75 :: double),(77,ImmF (2 % 1) :: Rational),(78,BinopF "*" 77 13 :: double),(79,BinopF "/" 76 78 :: double),(80,BinopF "+" 71 79 :: double),(81,BinopF "-" 53 80 :: double),(82,ImmF (1 % 5) :: Rational),(83,BinopF "*" 82 65 :: Rational),(84,ImmF (2 % 1) :: Rational),(85,BinopF "*" 84 57 :: double),(86,BinopF "-" 5 85 :: double),(87,LoadCursorStaticF (-2) "m" :: double),(88,BinopF "+" 86 87 :: double),(89,BinopF "*" 83 88 :: double),(90,UniopF "-" 89 :: double),(91,BinopF "+" 81 90 :: double),(92,BinopF "*" 66 91 :: double),(93,BinopF "-" 57 92 :: double),(94,BinopF "-" 63 93 :: double),(95,BinopF "*" 7 2 :: Rational),(96,ImmF (3 % 10) :: Rational),(97,ImmF (1 % 1) :: Rational),(98,BinopF "/" 96 97 :: Rational),(99,LoadCursorStaticF (2) "m" :: double),(100,BinopF "-" 99 4 :: double),(101,ImmF (1 % 5) :: Rational),(102,BinopF "*" 101 97 :: Rational),(103,LoadCursorStaticF (2) "r" :: double),(104,ImmF (2 % 1) :: Rational),(105,BinopF "*" 104 9 :: double),(106,BinopF "-" 103 105 :: double),(107,BinopF "+" 106 0 :: double),(108,BinopF "*" 102 107 :: double),(109,UniopF "-" 108 :: double),(110,BinopF "+" 100 109 :: double),(111,BinopF "*" 98 110 :: double),(112,BinopF "-" 9 111 :: double),(113,ImmF (2 % 1) :: Rational),(114,BinopF "*" 113 19 :: double),(115,BinopF "-" 112 114 :: double),(116,BinopF "-" 5 57 :: double),(117,BinopF "*" 84 13 :: double),(118,BinopF "-" 0 117 :: double),(119,LoadCursorStaticF (-2) "r" :: double),(120,BinopF "+" 118 119 :: double),(121,BinopF "*" 83 120 :: double),(122,UniopF "-" 121 :: double),(123,BinopF "+" 116 122 :: double),(124,BinopF "*" 66 123 :: double),(125,BinopF "-" 13 124 :: double),(126,BinopF "+" 115 125 :: double),(127,BinopF "*" 95 126 :: double),(128,UniopF "-" 127 :: double),(129,BinopF "+" 94 128 :: double),(130,BinopF "*" 25 129 :: double),(131,BinopF "-" 22 130 :: double),(132,UniopF "+" 131 :: void)] :: double(0 % 1))
m_next   (148,fromList [(0,LoadCursorStaticF (0) "m" :: double),(1,ImmF (3 % 10) :: Rational),(2,ImmF (1 % 1) :: Rational),(3,BinopF "/" 1 2 :: Rational),(4,ImmF (7 % 5) :: Rational),(5,ImmF (1 % 1) :: Rational),(6,BinopF "-" 4 5 :: Rational),(7,LoadCursorStaticF (1) "e" :: double),(8,BinopF "*" 6 7 :: double),(9,ImmF (3 % 1) :: Rational),(10,BinopF "-" 9 4 :: Rational),(11,LoadCursorStaticF (1) "m" :: double),(12,ImmF (2 % 1) :: Rational),(13,BinopF "**" 11 12 :: double),(14,BinopF "*" 10 13 :: double),(15,ImmF (2 % 1) :: Rational),(16,LoadCursorStaticF (1) "r" :: double),(17,BinopF "*" 15 16 :: double),(18,BinopF "/" 14 17 :: double),(19,BinopF "+" 8 18 :: double),(20,ImmF (7 % 5) :: Rational),(21,ImmF (1 % 1) :: Rational),(22,BinopF "-" 20 21 :: Rational),(23,LoadCursorStaticF (0) "e" :: double),(24,BinopF "*" 22 23 :: double),(25,ImmF (3 % 1) :: Rational),(26,BinopF "-" 25 20 :: Rational),(27,ImmF (2 % 1) :: Rational),(28,BinopF "**" 0 27 :: double),(29,BinopF "*" 26 28 :: double),(30,ImmF (2 % 1) :: Rational),(31,LoadCursorStaticF (0) "r" :: double),(32,BinopF "*" 30 31 :: double),(33,BinopF "/" 29 32 :: double),(34,BinopF "+" 24 33 :: double),(35,BinopF "-" 19 34 :: double),(36,ImmF (1 % 5) :: Rational),(37,BinopF "*" 36 2 :: Rational),(38,ImmF (2 % 1) :: Rational),(39,BinopF "*" 38 0 :: double),(40,BinopF "-" 11 39 :: double),(41,LoadCursorStaticF (-1) "m" :: double),(42,BinopF "+" 40 41 :: double),(43,BinopF "*" 37 42 :: double),(44,UniopF "-" 43 :: double),(45,BinopF "+" 35 44 :: double),(46,BinopF "*" 3 45 :: double),(47,BinopF "-" 0 46 :: double),(48,BinopF "+" 0 47 :: double),(49,ImmF (2 % 1) :: Rational),(50,BinopF "/" 48 49 :: double),(51,BinopF "/" 1 2 :: Rational),(52,ImmF (2 % 1) :: Rational),(53,BinopF "/" 51 52 :: Rational),(54,ImmF (1 % 1) :: Rational),(55,BinopF "-" 20 54 :: Rational),(56,BinopF "*" 4 7 :: double),(57,BinopF "*" 56 11 :: double),(58,BinopF "/" 57 16 :: double),(59,ImmF (1 % 1) :: Rational),(60,BinopF "-" 4 59 :: Rational),(61,ImmF (3 % 1) :: Rational),(62,BinopF "**" 11 61 :: double),(63,BinopF "*" 60 62 :: double),(64,ImmF (2 % 1) :: Rational),(65,ImmF (2 % 1) :: Rational),(66,BinopF "**" 16 65 :: double),(67,BinopF "*" 64 66 :: double),(68,BinopF "/" 63 67 :: double),(69,BinopF "-" 58 68 :: double),(70,BinopF "*" 20 23 :: double),(71,BinopF "*" 70 0 :: double),(72,BinopF "/" 71 31 :: double),(73,ImmF (1 % 1) :: Rational),(74,BinopF "-" 20 73 :: Rational),(75,ImmF (3 % 1) :: Rational),(76,BinopF "**" 0 75 :: double),(77,BinopF "*" 74 76 :: double),(78,ImmF (2 % 1) :: Rational),(79,ImmF (2 % 1) :: Rational),(80,BinopF "**" 31 79 :: double),(81,BinopF "*" 78 80 :: double),(82,BinopF "/" 77 81 :: double),(83,BinopF "-" 72 82 :: double),(84,BinopF "-" 69 83 :: double),(85,BinopF "*" 38 23 :: double),(86,BinopF "-" 7 85 :: double),(87,LoadCursorStaticF (-1) "e" :: double),(88,BinopF "+" 86 87 :: double),(89,BinopF "*" 37 88 :: double),(90,UniopF "-" 89 :: double),(91,BinopF "+" 84 90 :: double),(92,BinopF "*" 3 91 :: double),(93,BinopF "-" 23 92 :: double),(94,BinopF "*" 55 93 :: double),(95,ImmF (3 % 1) :: Rational),(96,BinopF "-" 95 20 :: Rational),(97,ImmF (2 % 1) :: Rational),(98,BinopF "**" 47 97 :: double),(99,BinopF "*" 96 98 :: double),(100,ImmF (2 % 1) :: Rational),(101,BinopF "-" 11 0 :: double),(102,BinopF "*" 38 31 :: double),(103,BinopF "-" 16 102 :: double),(104,LoadCursorStaticF (-1) "r" :: double),(105,BinopF "+" 103 104 :: double),(106,BinopF "*" 37 105 :: double),(107,UniopF "-" 106 :: double),(108,BinopF "+" 101 107 :: double),(109,BinopF "*" 3 108 :: double),(110,BinopF "-" 31 109 :: double),(111,BinopF "*" 100 110 :: double),(112,BinopF "/" 99 111 :: double),(113,BinopF "+" 94 112 :: double),(114,ImmF (7 % 5) :: Rational),(115,ImmF (1 % 1) :: Rational),(116,BinopF "-" 114 115 :: Rational),(117,ImmF (3 % 10) :: Rational),(118,ImmF (1 % 1) :: Rational),(119,BinopF "/" 117 118 :: Rational),(120,BinopF "*" 114 87 :: double),(121,BinopF "*" 120 41 :: double),(122,BinopF "/" 121 104 :: double),(123,ImmF (1 % 1) :: Rational),(124,BinopF "-" 114 123 :: Rational),(125,ImmF (3 % 1) :: Rational),(126,BinopF "**" 41 125 :: double),(127,BinopF "*" 124 126 :: double),(128,ImmF (2 % 1) :: Rational),(129,ImmF (2 % 1) :: Rational),(130,BinopF "**" 104 129 :: double),(131,BinopF "*" 128 130 :: double),(132,BinopF "/" 127 131 :: double),(133,BinopF "-" 122 132 :: double),(134,BinopF "-" 83 133 :: double),(135,ImmF (1 % 5) :: Rational),(136,BinopF "*" 135 118 :: Rational),(137,ImmF (2 % 1) :: Rational),(138,BinopF "*" 137 87 :: double),(139,BinopF "-" 23 138 :: double),(140,LoadCursorStaticF (-2) "e" :: double),(141,BinopF "+" 139 140 :: double),(142,BinopF "*" 136 141 :: double),(143,UniopF "-" 142 :: double),(144,BinopF "+" 134 143 :: double),(145,BinopF "*" 119 144 :: double),(146,BinopF "-" 87 145 :: double),(147,BinopF "*" 116 146 :: double),(148,ImmF (3 % 1) :: Rational),(149,BinopF "-" 148 114 :: Rational),(150,ImmF (1 % 1) :: Rational),(151,BinopF "-" 114 150 :: Rational),(152,BinopF "*" 151 87 :: double),(153,ImmF (3 % 1) :: Rational),(154,BinopF "-" 153 114 :: Rational),(155,ImmF (2 % 1) :: Rational),(156,BinopF "**" 41 155 :: double),(157,BinopF "*" 154 156 :: double),(158,ImmF (2 % 1) :: Rational),(159,BinopF "*" 158 104 :: double),(160,BinopF "/" 157 159 :: double),(161,BinopF "+" 152 160 :: double),(162,BinopF "-" 34 161 :: double),(163,BinopF "*" 137 41 :: double),(164,BinopF "-" 0 163 :: double),(165,LoadCursorStaticF (-2) "m" :: double),(166,BinopF "+" 164 165 :: double),(167,BinopF "*" 136 166 :: double),(168,UniopF "-" 167 :: double),(169,BinopF "+" 162 168 :: double),(170,BinopF "*" 119 169 :: double),(171,BinopF "-" 41 170 :: double),(172,ImmF (2 % 1) :: Rational),(173,BinopF "**" 171 172 :: double),(174,BinopF "*" 149 173 :: double),(175,ImmF (2 % 1) :: Rational),(176,BinopF "-" 0 41 :: double),(177,BinopF "*" 137 104 :: double),(178,BinopF "-" 31 177 :: double),(179,LoadCursorStaticF (-2) "r" :: double),(180,BinopF "+" 178 179 :: double),(181,BinopF "*" 136 180 :: double),(182,UniopF "-" 181 :: double),(183,BinopF "+" 176 182 :: double),(184,BinopF "*" 119 183 :: double),(185,BinopF "-" 104 184 :: double),(186,BinopF "*" 175 185 :: double),(187,BinopF "/" 174 186 :: double),(188,BinopF "+" 147 187 :: double),(189,BinopF "-" 113 188 :: double),(190,BinopF "*" 36 2 :: Rational),(191,ImmF (3 % 10) :: Rational),(192,ImmF (1 % 1) :: Rational),(193,BinopF "/" 191 192 :: Rational),(194,ImmF (7 % 5) :: Rational),(195,ImmF (1 % 1) :: Rational),(196,BinopF "-" 194 195 :: Rational),(197,LoadCursorStaticF (2) "e" :: double),(198,BinopF "*" 196 197 :: double),(199,ImmF (3 % 1) :: Rational),(200,BinopF "-" 199 194 :: Rational),(201,LoadCursorStaticF (2) "m" :: double),(202,ImmF (2 % 1) :: Rational),(203,BinopF "**" 201 202 :: double),(204,BinopF "*" 200 203 :: double),(205,ImmF (2 % 1) :: Rational),(206,LoadCursorStaticF (2) "r" :: double),(207,BinopF "*" 205 206 :: double),(208,BinopF "/" 204 207 :: double),(209,BinopF "+" 198 208 :: double),(210,BinopF "-" 209 19 :: double),(211,ImmF (1 % 5) :: Rational),(212,BinopF "*" 211 192 :: Rational),(213,ImmF (2 % 1) :: Rational),(214,BinopF "*" 213 11 :: double),(215,BinopF "-" 201 214 :: double),(216,BinopF "+" 215 0 :: double),(217,BinopF "*" 212 216 :: double),(218,UniopF "-" 217 :: double),(219,BinopF "+" 210 218 :: double),(220,BinopF "*" 193 219 :: double),(221,BinopF "-" 11 220 :: double),(222,ImmF (2 % 1) :: Rational),(223,BinopF "*" 222 47 :: double),(224,BinopF "-" 221 223 :: double),(225,BinopF "+" 224 171 :: double),(226,BinopF "*" 190 225 :: double),(227,UniopF "-" 226 :: double),(228,BinopF "+" 189 227 :: double),(229,BinopF "*" 53 228 :: double),(230,BinopF "-" 50 229 :: double),(231,UniopF "+" 230 :: void)] :: double(0 % 1))
e_next   (149,fromList [(0,LoadCursorStaticF (0) "e" :: double),(1,ImmF (3 % 10) :: Rational),(2,ImmF (1 % 1) :: Rational),(3,BinopF "/" 1 2 :: Rational),(4,ImmF (7 % 5) :: Rational),(5,LoadCursorStaticF (1) "e" :: double),(6,BinopF "*" 4 5 :: double),(7,LoadCursorStaticF (1) "m" :: double),(8,BinopF "*" 6 7 :: double),(9,LoadCursorStaticF (1) "r" :: double),(10,BinopF "/" 8 9 :: double),(11,ImmF (1 % 1) :: Rational),(12,BinopF "-" 4 11 :: Rational),(13,ImmF (3 % 1) :: Rational),(14,BinopF "**" 7 13 :: double),(15,BinopF "*" 12 14 :: double),(16,ImmF (2 % 1) :: Rational),(17,ImmF (2 % 1) :: Rational),(18,BinopF "**" 9 17 :: double),(19,BinopF "*" 16 18 :: double),(20,BinopF "/" 15 19 :: double),(21,BinopF "-" 10 20 :: double),(22,ImmF (7 % 5) :: Rational),(23,BinopF "*" 22 0 :: double),(24,LoadCursorStaticF (0) "m" :: double),(25,BinopF "*" 23 24 :: double),(26,LoadCursorStaticF (0) "r" :: double),(27,BinopF "/" 25 26 :: double),(28,ImmF (1 % 1) :: Rational),(29,BinopF "-" 22 28 :: Rational),(30,ImmF (3 % 1) :: Rational),(31,BinopF "**" 24 30 :: double),(32,BinopF "*" 29 31 :: double),(33,ImmF (2 % 1) :: Rational),(34,ImmF (2 % 1) :: Rational),(35,BinopF "**" 26 34 :: double),(36,BinopF "*" 33 35 :: double),(37,BinopF "/" 32 36 :: double),(38,BinopF "-" 27 37 :: double),(39,BinopF "-" 21 38 :: double),(40,ImmF (1 % 5) :: Rational),(41,BinopF "*" 40 2 :: Rational),(42,ImmF (2 % 1) :: Rational),(43,BinopF "*" 42 0 :: double),(44,BinopF "-" 5 43 :: double),(45,LoadCursorStaticF (-1) "e" :: double),(46,BinopF "+" 44 45 :: double),(47,BinopF "*" 41 46 :: double),(48,UniopF "-" 47 :: double),(49,BinopF "+" 39 48 :: double),(50,BinopF "*" 3 49 :: double),(51,BinopF "-" 0 50 :: double),(52,BinopF "+" 0 51 :: double),(53,ImmF (2 % 1) :: Rational),(54,BinopF "/" 52 53 :: double),(55,BinopF "/" 1 2 :: Rational),(56,ImmF (2 % 1) :: Rational),(57,BinopF "/" 55 56 :: Rational),(58,BinopF "*" 22 51 :: double),(59,ImmF (1 % 1) :: Rational),(60,BinopF "-" 4 59 :: Rational),(61,BinopF "*" 60 5 :: double),(62,ImmF (3 % 1) :: Rational),(63,BinopF "-" 62 4 :: Rational),(64,ImmF (2 % 1) :: Rational),(65,BinopF "**" 7 64 :: double),(66,BinopF "*" 63 65 :: double),(67,ImmF (2 % 1) :: Rational),(68,BinopF "*" 67 9 :: double),(69,BinopF "/" 66 68 :: double),(70,BinopF "+" 61 69 :: double),(71,ImmF (1 % 1) :: Rational),(72,BinopF "-" 22 71 :: Rational),(73,BinopF "*" 72 0 :: double),(74,ImmF (3 % 1) :: Rational),(75,BinopF "-" 74 22 :: Rational),(76,ImmF (2 % 1) :: Rational),(77,BinopF "**" 24 76 :: double),(78,BinopF "*" 75 77 :: double),(79,ImmF (2 % 1) :: Rational),(80,BinopF "*" 79 26 :: double),(81,BinopF "/" 78 80 :: double),(82,BinopF "+" 73 81 :: double),(83,BinopF "-" 70 82 :: double),(84,BinopF "*" 42 24 :: double),(85,BinopF "-" 7 84 :: double),(86,LoadCursorStaticF (-1) "m" :: double),(87,BinopF "+" 85 86 :: double),(88,BinopF "*" 41 87 :: double),(89,UniopF "-" 88 :: double),(90,BinopF "+" 83 89 :: double),(91,BinopF "*" 3 90 :: double),(92,BinopF "-" 24 91 :: double),(93,BinopF "*" 58 92 :: double),(94,BinopF "-" 7 24 :: double),(95,BinopF "*" 42 26 :: double),(96,BinopF "-" 9 95 :: double),(97,LoadCursorStaticF (-1) "r" :: double),(98,BinopF "+" 96 97 :: double),(99,BinopF "*" 41 98 :: double),(100,UniopF "-" 99 :: double),(101,BinopF "+" 94 100 :: double),(102,BinopF "*" 3 101 :: double),(103,BinopF "-" 26 102 :: double),(104,BinopF "/" 93 103 :: double),(105,ImmF (1 % 1) :: Rational),(106,BinopF "-" 22 105 :: Rational),(107,ImmF (3 % 1) :: Rational),(108,BinopF "**" 92 107 :: double),(109,BinopF "*" 106 108 :: double),(110,ImmF (2 % 1) :: Rational),(111,ImmF (2 % 1) :: Rational),(112,BinopF "**" 103 111 :: double),(113,BinopF "*" 110 112 :: double),(114,BinopF "/" 109 113 :: double),(115,BinopF "-" 104 114 :: double),(116,ImmF (7 % 5) :: Rational),(117,ImmF (3 % 10) :: Rational),(118,ImmF (1 % 1) :: Rational),(119,BinopF "/" 117 118 :: Rational),(120,BinopF "*" 116 45 :: double),(121,BinopF "*" 120 86 :: double),(122,BinopF "/" 121 97 :: double),(123,ImmF (1 % 1) :: Rational),(124,BinopF "-" 116 123 :: Rational),(125,ImmF (3 % 1) :: Rational),(126,BinopF "**" 86 125 :: double),(127,BinopF "*" 124 126 :: double),(128,ImmF (2 % 1) :: Rational),(129,ImmF (2 % 1) :: Rational),(130,BinopF "**" 97 129 :: double),(131,BinopF "*" 128 130 :: double),(132,BinopF "/" 127 131 :: double),(133,BinopF "-" 122 132 :: double),(134,BinopF "-" 38 133 :: double),(135,ImmF (1 % 5) :: Rational),(136,BinopF "*" 135 118 :: Rational),(137,ImmF (2 % 1) :: Rational),(138,BinopF "*" 137 45 :: double),(139,BinopF "-" 0 138 :: double),(140,LoadCursorStaticF (-2) "e" :: double),(141,BinopF "+" 139 140 :: double),(142,BinopF "*" 136 141 :: double),(143,UniopF "-" 142 :: double),(144,BinopF "+" 134 143 :: double),(145,BinopF "*" 119 144 :: double),(146,BinopF "-" 45 145 :: double),(147,BinopF "*" 116 146 :: double),(148,ImmF (1 % 1) :: Rational),(149,BinopF "-" 116 148 :: Rational),(150,BinopF "*" 149 45 :: double),(151,ImmF (3 % 1) :: Rational),(152,BinopF "-" 151 116 :: Rational),(153,ImmF (2 % 1) :: Rational),(154,BinopF "**" 86 153 :: double),(155,BinopF "*" 152 154 :: double),(156,ImmF (2 % 1) :: Rational),(157,BinopF "*" 156 97 :: double),(158,BinopF "/" 155 157 :: double),(159,BinopF "+" 150 158 :: double),(160,BinopF "-" 82 159 :: double),(161,BinopF "*" 137 86 :: double),(162,BinopF "-" 24 161 :: double),(163,LoadCursorStaticF (-2) "m" :: double),(164,BinopF "+" 162 163 :: double),(165,BinopF "*" 136 164 :: double),(166,UniopF "-" 165 :: double),(167,BinopF "+" 160 166 :: double),(168,BinopF "*" 119 167 :: double),(169,BinopF "-" 86 168 :: double),(170,BinopF "*" 147 169 :: double),(171,BinopF "-" 24 86 :: double),(172,BinopF "*" 137 97 :: double),(173,BinopF "-" 26 172 :: double),(174,LoadCursorStaticF (-2) "r" :: double),(175,BinopF "+" 173 174 :: double),(176,BinopF "*" 136 175 :: double),(177,UniopF "-" 176 :: double),(178,BinopF "+" 171 177 :: double),(179,BinopF "*" 119 178 :: double),(180,BinopF "-" 97 179 :: double),(181,BinopF "/" 170 180 :: double),(182,ImmF (1 % 1) :: Rational),(183,BinopF "-" 116 182 :: Rational),(184,ImmF (3 % 1) :: Rational),(185,BinopF "**" 169 184 :: double),(186,BinopF "*" 183 185 :: double),(187,ImmF (2 % 1) :: Rational),(188,ImmF (2 % 1) :: Rational),(189,BinopF "**" 180 188 :: double),(190,BinopF "*" 187 189 :: double),(191,BinopF "/" 186 190 :: double),(192,BinopF "-" 181 191 :: double),(193,BinopF "-" 115 192 :: double),(194,BinopF "*" 40 2 :: Rational),(195,ImmF (3 % 10) :: Rational),(196,ImmF (1 % 1) :: Rational),(197,BinopF "/" 195 196 :: Rational),(198,ImmF (7 % 5) :: Rational),(199,LoadCursorStaticF (2) "e" :: double),(200,BinopF "*" 198 199 :: double),(201,LoadCursorStaticF (2) "m" :: double),(202,BinopF "*" 200 201 :: double),(203,LoadCursorStaticF (2) "r" :: double),(204,BinopF "/" 202 203 :: double),(205,ImmF (1 % 1) :: Rational),(206,BinopF "-" 198 205 :: Rational),(207,ImmF (3 % 1) :: Rational),(208,BinopF "**" 201 207 :: double),(209,BinopF "*" 206 208 :: double),(210,ImmF (2 % 1) :: Rational),(211,ImmF (2 % 1) :: Rational),(212,BinopF "**" 203 211 :: double),(213,BinopF "*" 210 212 :: double),(214,BinopF "/" 209 213 :: double),(215,BinopF "-" 204 214 :: double),(216,BinopF "-" 215 21 :: double),(217,ImmF (1 % 5) :: Rational),(218,BinopF "*" 217 196 :: Rational),(219,ImmF (2 % 1) :: Rational),(220,BinopF "*" 219 5 :: double),(221,BinopF "-" 199 220 :: double),(222,BinopF "+" 221 0 :: double),(223,BinopF "*" 218 222 :: double),(224,UniopF "-" 223 :: double),(225,BinopF "+" 216 224 :: double),(226,BinopF "*" 197 225 :: double),(227,BinopF "-" 5 226 :: double),(228,ImmF (2 % 1) :: Rational),(229,BinopF "*" 228 51 :: double),(230,BinopF "-" 227 229 :: double),(231,BinopF "+" 230 146 :: double),(232,BinopF "*" 194 231 :: double),(233,UniopF "-" 232 :: double),(234,BinopF "+" 193 233 :: double),(235,BinopF "*" 57 234 :: double),(236,BinopF "-" 54 235 :: double),(237,UniopF "+" 236 :: void)] :: double(0 % 1))
r_next   (150,fromList [(0,LoadCursorF (0) 147 :: double),(1,ImmF (3 % 10) :: Rational),(2,ImmF (1 % 1) :: Rational),(3,BinopF "/" 1 2 :: Rational),(4,LoadCursorF (1) 148 :: double),(5,LoadCursorF (0) 148 :: double),(6,BinopF "-" 4 5 :: double),(7,ImmF (1 % 5) :: Rational),(8,BinopF "*" 7 2 :: Rational),(9,LoadCursorF (1) 147 :: double),(10,ImmF (2 % 1) :: Rational),(11,BinopF "*" 10 0 :: double),(12,BinopF "-" 9 11 :: double),(13,LoadCursorF (-1) 147 :: double),(14,BinopF "+" 12 13 :: double),(15,BinopF "*" 8 14 :: double),(16,UniopF "-" 15 :: double),(17,BinopF "+" 6 16 :: double),(18,BinopF "*" 3 17 :: double),(19,BinopF "-" 0 18 :: double),(20,BinopF "+" 0 19 :: double),(21,ImmF (2 % 1) :: Rational),(22,BinopF "/" 20 21 :: double),(23,BinopF "/" 1 2 :: Rational),(24,ImmF (2 % 1) :: Rational),(25,BinopF "/" 23 24 :: Rational),(26,ImmF (7 % 5) :: Rational),(27,ImmF (1 % 1) :: Rational),(28,BinopF "-" 26 27 :: Rational),(29,LoadCursorF (1) 149 :: double),(30,BinopF "*" 28 29 :: double),(31,ImmF (3 % 1) :: Rational),(32,BinopF "-" 31 26 :: Rational),(33,ImmF (2 % 1) :: Rational),(34,BinopF "**" 4 33 :: double),(35,BinopF "*" 32 34 :: double),(36,ImmF (2 % 1) :: Rational),(37,BinopF "*" 36 9 :: double),(38,BinopF "/" 35 37 :: double),(39,BinopF "+" 30 38 :: double),(40,ImmF (7 % 5) :: Rational),(41,ImmF (1 % 1) :: Rational),(42,BinopF "-" 40 41 :: Rational),(43,LoadCursorF (0) 149 :: double),(44,BinopF "*" 42 43 :: double),(45,ImmF (3 % 1) :: Rational),(46,BinopF "-" 45 40 :: Rational),(47,ImmF (2 % 1) :: Rational),(48,BinopF "**" 5 47 :: double),(49,BinopF "*" 46 48 :: double),(50,ImmF (2 % 1) :: Rational),(51,BinopF "*" 50 0 :: double),(52,BinopF "/" 49 51 :: double),(53,BinopF "+" 44 52 :: double),(54,BinopF "-" 39 53 :: double),(55,BinopF "*" 10 5 :: double),(56,BinopF "-" 4 55 :: double),(57,LoadCursorF (-1) 148 :: double),(58,BinopF "+" 56 57 :: double),(59,BinopF "*" 8 58 :: double),(60,UniopF "-" 59 :: double),(61,BinopF "+" 54 60 :: double),(62,BinopF "*" 3 61 :: double),(63,BinopF "-" 5 62 :: double),(64,ImmF (3 % 10) :: Rational),(65,ImmF (1 % 1) :: Rational),(66,BinopF "/" 64 65 :: Rational),(67,ImmF (7 % 5) :: Rational),(68,ImmF (1 % 1) :: Rational),(69,BinopF "-" 67 68 :: Rational),(70,LoadCursorF (-1) 149 :: double),(71,BinopF "*" 69 70 :: double),(72,ImmF (3 % 1) :: Rational),(73,BinopF "-" 72 67 :: Rational),(74,ImmF (2 % 1) :: Rational),(75,BinopF "**" 57 74 :: double),(76,BinopF "*" 73 75 :: double),(77,ImmF (2 % 1) :: Rational),(78,BinopF "*" 77 13 :: double),(79,BinopF "/" 76 78 :: double),(80,BinopF "+" 71 79 :: double),(81,BinopF "-" 53 80 :: double),(82,ImmF (1 % 5) :: Rational),(83,BinopF "*" 82 65 :: Rational),(84,ImmF (2 % 1) :: Rational),(85,BinopF "*" 84 57 :: double),(86,BinopF "-" 5 85 :: double),(87,LoadCursorF (-2) 148 :: double),(88,BinopF "+" 86 87 :: double),(89,BinopF "*" 83 88 :: double),(90,UniopF "-" 89 :: double),(91,BinopF "+" 81 90 :: double),(92,BinopF "*" 66 91 :: double),(93,BinopF "-" 57 92 :: double),(94,BinopF "-" 63 93 :: double),(95,BinopF "*" 7 2 :: Rational),(96,ImmF (3 % 10) :: Rational),(97,ImmF (1 % 1) :: Rational),(98,BinopF "/" 96 97 :: Rational),(99,LoadCursorF (2) 148 :: double),(100,BinopF "-" 99 4 :: double),(101,ImmF (1 % 5) :: Rational),(102,BinopF "*" 101 97 :: Rational),(103,LoadCursorF (2) 147 :: double),(104,ImmF (2 % 1) :: Rational),(105,BinopF "*" 104 9 :: double),(106,BinopF "-" 103 105 :: double),(107,BinopF "+" 106 0 :: double),(108,BinopF "*" 102 107 :: double),(109,UniopF "-" 108 :: double),(110,BinopF "+" 100 109 :: double),(111,BinopF "*" 98 110 :: double),(112,BinopF "-" 9 111 :: double),(113,ImmF (2 % 1) :: Rational),(114,BinopF "*" 113 19 :: double),(115,BinopF "-" 112 114 :: double),(116,BinopF "-" 5 57 :: double),(117,BinopF "*" 84 13 :: double),(118,BinopF "-" 0 117 :: double),(119,LoadCursorF (-2) 147 :: double),(120,BinopF "+" 118 119 :: double),(121,BinopF "*" 83 120 :: double),(122,UniopF "-" 121 :: double),(123,BinopF "+" 116 122 :: double),(124,BinopF "*" 66 123 :: double),(125,BinopF "-" 13 124 :: double),(126,BinopF "+" 115 125 :: double),(127,BinopF "*" 95 126 :: double),(128,UniopF "-" 127 :: double),(129,BinopF "+" 94 128 :: double),(130,BinopF "*" 25 129 :: double),(131,BinopF "-" 22 130 :: double),(132,StoreF "r" 131 :: void)] :: void)
m_next   (151,fromList [(0,LoadCursorF (0) 148 :: double),(1,ImmF (3 % 10) :: Rational),(2,ImmF (1 % 1) :: Rational),(3,BinopF "/" 1 2 :: Rational),(4,ImmF (7 % 5) :: Rational),(5,ImmF (1 % 1) :: Rational),(6,BinopF "-" 4 5 :: Rational),(7,LoadCursorF (1) 149 :: double),(8,BinopF "*" 6 7 :: double),(9,ImmF (3 % 1) :: Rational),(10,BinopF "-" 9 4 :: Rational),(11,LoadCursorF (1) 148 :: double),(12,ImmF (2 % 1) :: Rational),(13,BinopF "**" 11 12 :: double),(14,BinopF "*" 10 13 :: double),(15,ImmF (2 % 1) :: Rational),(16,LoadCursorF (1) 147 :: double),(17,BinopF "*" 15 16 :: double),(18,BinopF "/" 14 17 :: double),(19,BinopF "+" 8 18 :: double),(20,ImmF (7 % 5) :: Rational),(21,ImmF (1 % 1) :: Rational),(22,BinopF "-" 20 21 :: Rational),(23,LoadCursorF (0) 149 :: double),(24,BinopF "*" 22 23 :: double),(25,ImmF (3 % 1) :: Rational),(26,BinopF "-" 25 20 :: Rational),(27,ImmF (2 % 1) :: Rational),(28,BinopF "**" 0 27 :: double),(29,BinopF "*" 26 28 :: double),(30,ImmF (2 % 1) :: Rational),(31,LoadCursorF (0) 147 :: double),(32,BinopF "*" 30 31 :: double),(33,BinopF "/" 29 32 :: double),(34,BinopF "+" 24 33 :: double),(35,BinopF "-" 19 34 :: double),(36,ImmF (1 % 5) :: Rational),(37,BinopF "*" 36 2 :: Rational),(38,ImmF (2 % 1) :: Rational),(39,BinopF "*" 38 0 :: double),(40,BinopF "-" 11 39 :: double),(41,LoadCursorF (-1) 148 :: double),(42,BinopF "+" 40 41 :: double),(43,BinopF "*" 37 42 :: double),(44,UniopF "-" 43 :: double),(45,BinopF "+" 35 44 :: double),(46,BinopF "*" 3 45 :: double),(47,BinopF "-" 0 46 :: double),(48,BinopF "+" 0 47 :: double),(49,ImmF (2 % 1) :: Rational),(50,BinopF "/" 48 49 :: double),(51,BinopF "/" 1 2 :: Rational),(52,ImmF (2 % 1) :: Rational),(53,BinopF "/" 51 52 :: Rational),(54,ImmF (1 % 1) :: Rational),(55,BinopF "-" 20 54 :: Rational),(56,BinopF "*" 4 7 :: double),(57,BinopF "*" 56 11 :: double),(58,BinopF "/" 57 16 :: double),(59,ImmF (1 % 1) :: Rational),(60,BinopF "-" 4 59 :: Rational),(61,ImmF (3 % 1) :: Rational),(62,BinopF "**" 11 61 :: double),(63,BinopF "*" 60 62 :: double),(64,ImmF (2 % 1) :: Rational),(65,ImmF (2 % 1) :: Rational),(66,BinopF "**" 16 65 :: double),(67,BinopF "*" 64 66 :: double),(68,BinopF "/" 63 67 :: double),(69,BinopF "-" 58 68 :: double),(70,BinopF "*" 20 23 :: double),(71,BinopF "*" 70 0 :: double),(72,BinopF "/" 71 31 :: double),(73,ImmF (1 % 1) :: Rational),(74,BinopF "-" 20 73 :: Rational),(75,ImmF (3 % 1) :: Rational),(76,BinopF "**" 0 75 :: double),(77,BinopF "*" 74 76 :: double),(78,ImmF (2 % 1) :: Rational),(79,ImmF (2 % 1) :: Rational),(80,BinopF "**" 31 79 :: double),(81,BinopF "*" 78 80 :: double),(82,BinopF "/" 77 81 :: double),(83,BinopF "-" 72 82 :: double),(84,BinopF "-" 69 83 :: double),(85,BinopF "*" 38 23 :: double),(86,BinopF "-" 7 85 :: double),(87,LoadCursorF (-1) 149 :: double),(88,BinopF "+" 86 87 :: double),(89,BinopF "*" 37 88 :: double),(90,UniopF "-" 89 :: double),(91,BinopF "+" 84 90 :: double),(92,BinopF "*" 3 91 :: double),(93,BinopF "-" 23 92 :: double),(94,BinopF "*" 55 93 :: double),(95,ImmF (3 % 1) :: Rational),(96,BinopF "-" 95 20 :: Rational),(97,ImmF (2 % 1) :: Rational),(98,BinopF "**" 47 97 :: double),(99,BinopF "*" 96 98 :: double),(100,ImmF (2 % 1) :: Rational),(101,BinopF "-" 11 0 :: double),(102,BinopF "*" 38 31 :: double),(103,BinopF "-" 16 102 :: double),(104,LoadCursorF (-1) 147 :: double),(105,BinopF "+" 103 104 :: double),(106,BinopF "*" 37 105 :: double),(107,UniopF "-" 106 :: double),(108,BinopF "+" 101 107 :: double),(109,BinopF "*" 3 108 :: double),(110,BinopF "-" 31 109 :: double),(111,BinopF "*" 100 110 :: double),(112,BinopF "/" 99 111 :: double),(113,BinopF "+" 94 112 :: double),(114,ImmF (7 % 5) :: Rational),(115,ImmF (1 % 1) :: Rational),(116,BinopF "-" 114 115 :: Rational),(117,ImmF (3 % 10) :: Rational),(118,ImmF (1 % 1) :: Rational),(119,BinopF "/" 117 118 :: Rational),(120,BinopF "*" 114 87 :: double),(121,BinopF "*" 120 41 :: double),(122,BinopF "/" 121 104 :: double),(123,ImmF (1 % 1) :: Rational),(124,BinopF "-" 114 123 :: Rational),(125,ImmF (3 % 1) :: Rational),(126,BinopF "**" 41 125 :: double),(127,BinopF "*" 124 126 :: double),(128,ImmF (2 % 1) :: Rational),(129,ImmF (2 % 1) :: Rational),(130,BinopF "**" 104 129 :: double),(131,BinopF "*" 128 130 :: double),(132,BinopF "/" 127 131 :: double),(133,BinopF "-" 122 132 :: double),(134,BinopF "-" 83 133 :: double),(135,ImmF (1 % 5) :: Rational),(136,BinopF "*" 135 118 :: Rational),(137,ImmF (2 % 1) :: Rational),(138,BinopF "*" 137 87 :: double),(139,BinopF "-" 23 138 :: double),(140,LoadCursorF (-2) 149 :: double),(141,BinopF "+" 139 140 :: double),(142,BinopF "*" 136 141 :: double),(143,UniopF "-" 142 :: double),(144,BinopF "+" 134 143 :: double),(145,BinopF "*" 119 144 :: double),(146,BinopF "-" 87 145 :: double),(147,BinopF "*" 116 146 :: double),(148,ImmF (3 % 1) :: Rational),(149,BinopF "-" 148 114 :: Rational),(150,ImmF (1 % 1) :: Rational),(151,BinopF "-" 114 150 :: Rational),(152,BinopF "*" 151 87 :: double),(153,ImmF (3 % 1) :: Rational),(154,BinopF "-" 153 114 :: Rational),(155,ImmF (2 % 1) :: Rational),(156,BinopF "**" 41 155 :: double),(157,BinopF "*" 154 156 :: double),(158,ImmF (2 % 1) :: Rational),(159,BinopF "*" 158 104 :: double),(160,BinopF "/" 157 159 :: double),(161,BinopF "+" 152 160 :: double),(162,BinopF "-" 34 161 :: double),(163,BinopF "*" 137 41 :: double),(164,BinopF "-" 0 163 :: double),(165,LoadCursorF (-2) 148 :: double),(166,BinopF "+" 164 165 :: double),(167,BinopF "*" 136 166 :: double),(168,UniopF "-" 167 :: double),(169,BinopF "+" 162 168 :: double),(170,BinopF "*" 119 169 :: double),(171,BinopF "-" 41 170 :: double),(172,ImmF (2 % 1) :: Rational),(173,BinopF "**" 171 172 :: double),(174,BinopF "*" 149 173 :: double),(175,ImmF (2 % 1) :: Rational),(176,BinopF "-" 0 41 :: double),(177,BinopF "*" 137 104 :: double),(178,BinopF "-" 31 177 :: double),(179,LoadCursorF (-2) 147 :: double),(180,BinopF "+" 178 179 :: double),(181,BinopF "*" 136 180 :: double),(182,UniopF "-" 181 :: double),(183,BinopF "+" 176 182 :: double),(184,BinopF "*" 119 183 :: double),(185,BinopF "-" 104 184 :: double),(186,BinopF "*" 175 185 :: double),(187,BinopF "/" 174 186 :: double),(188,BinopF "+" 147 187 :: double),(189,BinopF "-" 113 188 :: double),(190,BinopF "*" 36 2 :: Rational),(191,ImmF (3 % 10) :: Rational),(192,ImmF (1 % 1) :: Rational),(193,BinopF "/" 191 192 :: Rational),(194,ImmF (7 % 5) :: Rational),(195,ImmF (1 % 1) :: Rational),(196,BinopF "-" 194 195 :: Rational),(197,LoadCursorF (2) 149 :: double),(198,BinopF "*" 196 197 :: double),(199,ImmF (3 % 1) :: Rational),(200,BinopF "-" 199 194 :: Rational),(201,LoadCursorF (2) 148 :: double),(202,ImmF (2 % 1) :: Rational),(203,BinopF "**" 201 202 :: double),(204,BinopF "*" 200 203 :: double),(205,ImmF (2 % 1) :: Rational),(206,LoadCursorF (2) 147 :: double),(207,BinopF "*" 205 206 :: double),(208,BinopF "/" 204 207 :: double),(209,BinopF "+" 198 208 :: double),(210,BinopF "-" 209 19 :: double),(211,ImmF (1 % 5) :: Rational),(212,BinopF "*" 211 192 :: Rational),(213,ImmF (2 % 1) :: Rational),(214,BinopF "*" 213 11 :: double),(215,BinopF "-" 201 214 :: double),(216,BinopF "+" 215 0 :: double),(217,BinopF "*" 212 216 :: double),(218,UniopF "-" 217 :: double),(219,BinopF "+" 210 218 :: double),(220,BinopF "*" 193 219 :: double),(221,BinopF "-" 11 220 :: double),(222,ImmF (2 % 1) :: Rational),(223,BinopF "*" 222 47 :: double),(224,BinopF "-" 221 223 :: double),(225,BinopF "+" 224 171 :: double),(226,BinopF "*" 190 225 :: double),(227,UniopF "-" 226 :: double),(228,BinopF "+" 189 227 :: double),(229,BinopF "*" 53 228 :: double),(230,BinopF "-" 50 229 :: double),(231,StoreF "m" 230 :: void)] :: void)
e_next   (152,fromList [(0,LoadCursorF (0) 149 :: double),(1,ImmF (3 % 10) :: Rational),(2,ImmF (1 % 1) :: Rational),(3,BinopF "/" 1 2 :: Rational),(4,ImmF (7 % 5) :: Rational),(5,LoadCursorF (1) 149 :: double),(6,BinopF "*" 4 5 :: double),(7,LoadCursorF (1) 148 :: double),(8,BinopF "*" 6 7 :: double),(9,LoadCursorF (1) 147 :: double),(10,BinopF "/" 8 9 :: double),(11,ImmF (1 % 1) :: Rational),(12,BinopF "-" 4 11 :: Rational),(13,ImmF (3 % 1) :: Rational),(14,BinopF "**" 7 13 :: double),(15,BinopF "*" 12 14 :: double),(16,ImmF (2 % 1) :: Rational),(17,ImmF (2 % 1) :: Rational),(18,BinopF "**" 9 17 :: double),(19,BinopF "*" 16 18 :: double),(20,BinopF "/" 15 19 :: double),(21,BinopF "-" 10 20 :: double),(22,ImmF (7 % 5) :: Rational),(23,BinopF "*" 22 0 :: double),(24,LoadCursorF (0) 148 :: double),(25,BinopF "*" 23 24 :: double),(26,LoadCursorF (0) 147 :: double),(27,BinopF "/" 25 26 :: double),(28,ImmF (1 % 1) :: Rational),(29,BinopF "-" 22 28 :: Rational),(30,ImmF (3 % 1) :: Rational),(31,BinopF "**" 24 30 :: double),(32,BinopF "*" 29 31 :: double),(33,ImmF (2 % 1) :: Rational),(34,ImmF (2 % 1) :: Rational),(35,BinopF "**" 26 34 :: double),(36,BinopF "*" 33 35 :: double),(37,BinopF "/" 32 36 :: double),(38,BinopF "-" 27 37 :: double),(39,BinopF "-" 21 38 :: double),(40,ImmF (1 % 5) :: Rational),(41,BinopF "*" 40 2 :: Rational),(42,ImmF (2 % 1) :: Rational),(43,BinopF "*" 42 0 :: double),(44,BinopF "-" 5 43 :: double),(45,LoadCursorF (-1) 149 :: double),(46,BinopF "+" 44 45 :: double),(47,BinopF "*" 41 46 :: double),(48,UniopF "-" 47 :: double),(49,BinopF "+" 39 48 :: double),(50,BinopF "*" 3 49 :: double),(51,BinopF "-" 0 50 :: double),(52,BinopF "+" 0 51 :: double),(53,ImmF (2 % 1) :: Rational),(54,BinopF "/" 52 53 :: double),(55,BinopF "/" 1 2 :: Rational),(56,ImmF (2 % 1) :: Rational),(57,BinopF "/" 55 56 :: Rational),(58,BinopF "*" 22 51 :: double),(59,ImmF (1 % 1) :: Rational),(60,BinopF "-" 4 59 :: Rational),(61,BinopF "*" 60 5 :: double),(62,ImmF (3 % 1) :: Rational),(63,BinopF "-" 62 4 :: Rational),(64,ImmF (2 % 1) :: Rational),(65,BinopF "**" 7 64 :: double),(66,BinopF "*" 63 65 :: double),(67,ImmF (2 % 1) :: Rational),(68,BinopF "*" 67 9 :: double),(69,BinopF "/" 66 68 :: double),(70,BinopF "+" 61 69 :: double),(71,ImmF (1 % 1) :: Rational),(72,BinopF "-" 22 71 :: Rational),(73,BinopF "*" 72 0 :: double),(74,ImmF (3 % 1) :: Rational),(75,BinopF "-" 74 22 :: Rational),(76,ImmF (2 % 1) :: Rational),(77,BinopF "**" 24 76 :: double),(78,BinopF "*" 75 77 :: double),(79,ImmF (2 % 1) :: Rational),(80,BinopF "*" 79 26 :: double),(81,BinopF "/" 78 80 :: double),(82,BinopF "+" 73 81 :: double),(83,BinopF "-" 70 82 :: double),(84,BinopF "*" 42 24 :: double),(85,BinopF "-" 7 84 :: double),(86,LoadCursorF (-1) 148 :: double),(87,BinopF "+" 85 86 :: double),(88,BinopF "*" 41 87 :: double),(89,UniopF "-" 88 :: double),(90,BinopF "+" 83 89 :: double),(91,BinopF "*" 3 90 :: double),(92,BinopF "-" 24 91 :: double),(93,BinopF "*" 58 92 :: double),(94,BinopF "-" 7 24 :: double),(95,BinopF "*" 42 26 :: double),(96,BinopF "-" 9 95 :: double),(97,LoadCursorF (-1) 147 :: double),(98,BinopF "+" 96 97 :: double),(99,BinopF "*" 41 98 :: double),(100,UniopF "-" 99 :: double),(101,BinopF "+" 94 100 :: double),(102,BinopF "*" 3 101 :: double),(103,BinopF "-" 26 102 :: double),(104,BinopF "/" 93 103 :: double),(105,ImmF (1 % 1) :: Rational),(106,BinopF "-" 22 105 :: Rational),(107,ImmF (3 % 1) :: Rational),(108,BinopF "**" 92 107 :: double),(109,BinopF "*" 106 108 :: double),(110,ImmF (2 % 1) :: Rational),(111,ImmF (2 % 1) :: Rational),(112,BinopF "**" 103 111 :: double),(113,BinopF "*" 110 112 :: double),(114,BinopF "/" 109 113 :: double),(115,BinopF "-" 104 114 :: double),(116,ImmF (7 % 5) :: Rational),(117,ImmF (3 % 10) :: Rational),(118,ImmF (1 % 1) :: Rational),(119,BinopF "/" 117 118 :: Rational),(120,BinopF "*" 116 45 :: double),(121,BinopF "*" 120 86 :: double),(122,BinopF "/" 121 97 :: double),(123,ImmF (1 % 1) :: Rational),(124,BinopF "-" 116 123 :: Rational),(125,ImmF (3 % 1) :: Rational),(126,BinopF "**" 86 125 :: double),(127,BinopF "*" 124 126 :: double),(128,ImmF (2 % 1) :: Rational),(129,ImmF (2 % 1) :: Rational),(130,BinopF "**" 97 129 :: double),(131,BinopF "*" 128 130 :: double),(132,BinopF "/" 127 131 :: double),(133,BinopF "-" 122 132 :: double),(134,BinopF "-" 38 133 :: double),(135,ImmF (1 % 5) :: Rational),(136,BinopF "*" 135 118 :: Rational),(137,ImmF (2 % 1) :: Rational),(138,BinopF "*" 137 45 :: double),(139,BinopF "-" 0 138 :: double),(140,LoadCursorF (-2) 149 :: double),(141,BinopF "+" 139 140 :: double),(142,BinopF "*" 136 141 :: double),(143,UniopF "-" 142 :: double),(144,BinopF "+" 134 143 :: double),(145,BinopF "*" 119 144 :: double),(146,BinopF "-" 45 145 :: double),(147,BinopF "*" 116 146 :: double),(148,ImmF (1 % 1) :: Rational),(149,BinopF "-" 116 148 :: Rational),(150,BinopF "*" 149 45 :: double),(151,ImmF (3 % 1) :: Rational),(152,BinopF "-" 151 116 :: Rational),(153,ImmF (2 % 1) :: Rational),(154,BinopF "**" 86 153 :: double),(155,BinopF "*" 152 154 :: double),(156,ImmF (2 % 1) :: Rational),(157,BinopF "*" 156 97 :: double),(158,BinopF "/" 155 157 :: double),(159,BinopF "+" 150 158 :: double),(160,BinopF "-" 82 159 :: double),(161,BinopF "*" 137 86 :: double),(162,BinopF "-" 24 161 :: double),(163,LoadCursorF (-2) 148 :: double),(164,BinopF "+" 162 163 :: double),(165,BinopF "*" 136 164 :: double),(166,UniopF "-" 165 :: double),(167,BinopF "+" 160 166 :: double),(168,BinopF "*" 119 167 :: double),(169,BinopF "-" 86 168 :: double),(170,BinopF "*" 147 169 :: double),(171,BinopF "-" 24 86 :: double),(172,BinopF "*" 137 97 :: double),(173,BinopF "-" 26 172 :: double),(174,LoadCursorF (-2) 147 :: double),(175,BinopF "+" 173 174 :: double),(176,BinopF "*" 136 175 :: double),(177,UniopF "-" 176 :: double),(178,BinopF "+" 171 177 :: double),(179,BinopF "*" 119 178 :: double),(180,BinopF "-" 97 179 :: double),(181,BinopF "/" 170 180 :: double),(182,ImmF (1 % 1) :: Rational),(183,BinopF "-" 116 182 :: Rational),(184,ImmF (3 % 1) :: Rational),(185,BinopF "**" 169 184 :: double),(186,BinopF "*" 183 185 :: double),(187,ImmF (2 % 1) :: Rational),(188,ImmF (2 % 1) :: Rational),(189,BinopF "**" 180 188 :: double),(190,BinopF "*" 187 189 :: double),(191,BinopF "/" 186 190 :: double),(192,BinopF "-" 181 191 :: double),(193,BinopF "-" 115 192 :: double),(194,BinopF "*" 40 2 :: Rational),(195,ImmF (3 % 10) :: Rational),(196,ImmF (1 % 1) :: Rational),(197,BinopF "/" 195 196 :: Rational),(198,ImmF (7 % 5) :: Rational),(199,LoadCursorF (2) 149 :: double),(200,BinopF "*" 198 199 :: double),(201,LoadCursorF (2) 148 :: double),(202,BinopF "*" 200 201 :: double),(203,LoadCursorF (2) 147 :: double),(204,BinopF "/" 202 203 :: double),(205,ImmF (1 % 1) :: Rational),(206,BinopF "-" 198 205 :: Rational),(207,ImmF (3 % 1) :: Rational),(208,BinopF "**" 201 207 :: double),(209,BinopF "*" 206 208 :: double),(210,ImmF (2 % 1) :: Rational),(211,ImmF (2 % 1) :: Rational),(212,BinopF "**" 203 211 :: double),(213,BinopF "*" 210 212 :: double),(214,BinopF "/" 209 213 :: double),(215,BinopF "-" 204 214 :: double),(216,BinopF "-" 215 21 :: double),(217,ImmF (1 % 5) :: Rational),(218,BinopF "*" 217 196 :: Rational),(219,ImmF (2 % 1) :: Rational),(220,BinopF "*" 219 5 :: double),(221,BinopF "-" 199 220 :: double),(222,BinopF "+" 221 0 :: double),(223,BinopF "*" 218 222 :: double),(224,UniopF "-" 223 :: double),(225,BinopF "+" 216 224 :: double),(226,BinopF "*" 197 225 :: double),(227,BinopF "-" 5 226 :: double),(228,ImmF (2 % 1) :: Rational),(229,BinopF "*" 228 51 :: double),(230,BinopF "-" 227 229 :: double),(231,BinopF "+" 230 146 :: double),(232,BinopF "*" 194 231 :: double),(233,UniopF "-" 232 :: double),(234,BinopF "+" 193 233 :: double),(235,BinopF "*" 57 234 :: double),(236,BinopF "-" 54 235 :: double),(237,StoreF "e" 236 :: void)] :: void)
### wallEvolution
([0,150,300])
### wallEvolution
fromList [(147,([2,148,302])),(148,([2,148,302])),(149,([2,148,302])),(150,([4,146,304])),(151,([4,146,304])),(152,([4,146,304]))]
### inverted0
False
NODE: 147
  IR: IRank IRankCompareReverse (0)
    「(2) (148)」
  IR: IRank IRankCompareReverse (1)
    「(148) (302)」
NODE: 148
  IR: IRank IRankCompareReverse (0)
    「(2) (148)」
  IR: IRank IRankCompareReverse (1)
    「(148) (302)」
NODE: 149
  IR: IRank IRankCompareReverse (0)
    「(2) (148)」
  IR: IRank IRankCompareReverse (1)
    「(148) (302)」
NODE: 150
  IR: IRank IRankCompareReverse (0)
    「(4) (146)」
  IR: IRank IRankCompareReverse (1)
    「(146) (304)」
NODE: 151
  IR: IRank IRankCompareReverse (0)
    「(4) (146)」
  IR: IRank IRankCompareReverse (1)
    「(146) (304)」
NODE: 152
  IR: IRank IRankCompareReverse (0)
    「(4) (146)」
  IR: IRank IRankCompareReverse (1)
    「(146) (304)」
IR: IRank IRankCompareReverse (0)
  NODE: 147
    Just (fromList [(ResourceStatic "e" (),「(1) (149)」),(ResourceStatic "m" (),「(0) (150)」),(ResourceStatic "r" (),「(0) (150)」)])
  NODE: 148
    Just (fromList [(ResourceStatic "e" (),「(0) (150)」),(ResourceStatic "m" (),「(0) (150)」),(ResourceStatic "r" (),「(0) (150)」)])
  NODE: 149
    Just (fromList [(ResourceStatic "e" (),「(0) (150)」),(ResourceStatic "m" (),「(0) (150)」),(ResourceStatic "r" (),「(0) (150)」)])
  NODE: 150
    Just (fromList [(ResourceOMNode 147 (),「(2) (148)」),(ResourceOMNode 148 (),「(2) (148)」),(ResourceOMNode 149 (),「(3) (147)」)])
  NODE: 151
    Just (fromList [(ResourceOMNode 147 (),「(2) (148)」),(ResourceOMNode 148 (),「(2) (148)」),(ResourceOMNode 149 (),「(2) (148)」)])
  NODE: 152
    Just (fromList [(ResourceOMNode 147 (),「(2) (148)」),(ResourceOMNode 148 (),「(2) (148)」),(ResourceOMNode 149 (),「(2) (148)」)])
IR: IRank IRankCompareReverse (1)
  NODE: 147
    Just (fromList [(ResourceStatic "e" (),「(147) (303)」),(ResourceStatic "m" (),「(146) (304)」),(ResourceStatic "r" (),「(146) (304)」)])
  NODE: 148
    Just (fromList [(ResourceStatic "e" (),「(146) (304)」),(ResourceStatic "m" (),「(146) (304)」),(ResourceStatic "r" (),「(146) (304)」)])
  NODE: 149
    Just (fromList [(ResourceStatic "e" (),「(146) (304)」),(ResourceStatic "m" (),「(146) (304)」),(ResourceStatic "r" (),「(146) (304)」)])
  NODE: 150
    Just (fromList [(ResourceOMNode 147 (),「(144) (306)」),(ResourceOMNode 148 (),「(144) (306)」),(ResourceOMNode 149 (),「(145) (305)」)])
  NODE: 151
    Just (fromList [(ResourceOMNode 147 (),「(144) (306)」),(ResourceOMNode 148 (),「(144) (306)」),(ResourceOMNode 149 (),「(144) (306)」)])
  NODE: 152
    Just (fromList [(ResourceOMNode 147 (),「(144) (306)」),(ResourceOMNode 148 (),「(144) (306)」),(ResourceOMNode 149 (),「(144) (306)」)])
#### Allocation List ####
ResourceStatic "e" ()
  「(0) (304)」
ResourceStatic "m" ()
  「(0) (304)」
ResourceStatic "r" ()
  「(0) (304)」
ResourceOMNode 147 (IRank IRankCompareReverse (0))
  「(2) (148)」
ResourceOMNode 147 (IRank IRankCompareReverse (1))
  「(144) (306)」
ResourceOMNode 148 (IRank IRankCompareReverse (0))
  「(2) (148)」
ResourceOMNode 148 (IRank IRankCompareReverse (1))
  「(144) (306)」
ResourceOMNode 149 (IRank IRankCompareReverse (0))
  「(2) (148)」
ResourceOMNode 149 (IRank IRankCompareReverse (1))
  「(144) (306)」
ResourceOMNode 150 (IRank IRankCompareReverse (0))
  「(4) (146)」
ResourceOMNode 150 (IRank IRankCompareReverse (1))
  「(146) (304)」
ResourceOMNode 151 (IRank IRankCompareReverse (0))
  「(4) (146)」
ResourceOMNode 151 (IRank IRankCompareReverse (1))
  「(146) (304)」
ResourceOMNode 152 (IRank IRankCompareReverse (0))
  「(4) (146)」
ResourceOMNode 152 (IRank IRankCompareReverse (1))
  「(146) (304)」
#### Resource Sharing ####
0
  ResourceOMNode 147 (IRank IRankCompareReverse (0))
  ResourceOMNode 149 (IRank IRankCompareReverse (1))
1
  ResourceOMNode 148 (IRank IRankCompareReverse (0))
  ResourceOMNode 148 (IRank IRankCompareReverse (1))
2
  ResourceOMNode 147 (IRank IRankCompareReverse (1))
  ResourceOMNode 149 (IRank IRankCompareReverse (0))
#### Ridge List ####
RidgeID {_ridgeDeltaMPI = MPIRank (0), _ridgeDelta = ResourceOMNode 147 (IRank IRankCompareReverse (0),IRank IRankCompareReverse (1))}
  「(144) (148)」
RidgeID {_ridgeDeltaMPI = MPIRank (0), _ridgeDelta = ResourceOMNode 148 (IRank IRankCompareReverse (0),IRank IRankCompareReverse (1))}
  「(144) (148)」
RidgeID {_ridgeDeltaMPI = MPIRank (0), _ridgeDelta = ResourceOMNode 149 (IRank IRankCompareReverse (0),IRank IRankCompareReverse (1))}
  「(144) (148)」
RidgeID {_ridgeDeltaMPI = MPIRank (1), _ridgeDelta = ResourceStatic "e" ()}
  「(300) (304)」
RidgeID {_ridgeDeltaMPI = MPIRank (1), _ridgeDelta = ResourceStatic "m" ()}
  「(300) (304)」
RidgeID {_ridgeDeltaMPI = MPIRank (1), _ridgeDelta = ResourceStatic "r" ()}
  「(300) (304)」
RidgeID {_ridgeDeltaMPI = MPIRank (1), _ridgeDelta = ResourceOMNode 147 (IRank IRankCompareReverse (0),IRank IRankCompareReverse (1))}
  「(302) (306)」
RidgeID {_ridgeDeltaMPI = MPIRank (1), _ridgeDelta = ResourceOMNode 148 (IRank IRankCompareReverse (0),IRank IRankCompareReverse (1))}
  「(302) (306)」
RidgeID {_ridgeDeltaMPI = MPIRank (1), _ridgeDelta = ResourceOMNode 149 (IRank IRankCompareReverse (0),IRank IRankCompareReverse (1))}
  「(302) (306)」
#### Facet List ####
FacetID {_facetDeltaMPI = MPIRank (1), _facetIRSrc = IRank IRankCompareReverse (0), _facetIRDest = IRank IRankCompareReverse (1)}
  [RidgeID {_ridgeDeltaMPI = MPIRank (1), _ridgeDelta = ResourceStatic "e" ()},RidgeID {_ridgeDeltaMPI = MPIRank (1), _ridgeDelta = ResourceStatic "m" ()},RidgeID {_ridgeDeltaMPI = MPIRank (1), _ridgeDelta = ResourceStatic "r" ()},RidgeID {_ridgeDeltaMPI = MPIRank (1), _ridgeDelta = ResourceOMNode 147 (IRank IRankCompareReverse (0),IRank IRankCompareReverse (1))},RidgeID {_ridgeDeltaMPI = MPIRank (1), _ridgeDelta = ResourceOMNode 148 (IRank IRankCompareReverse (0),IRank IRankCompareReverse (1))},RidgeID {_ridgeDeltaMPI = MPIRank (1), _ridgeDelta = ResourceOMNode 149 (IRank IRankCompareReverse (0),IRank IRankCompareReverse (1))}]
#### Program ####
Stage (RidgeID {_ridgeDeltaMPI = MPIRank (1), _ridgeDelta = ResourceStatic "e" ()})
Stage (RidgeID {_ridgeDeltaMPI = MPIRank (1), _ridgeDelta = ResourceStatic "m" ()})
Stage (RidgeID {_ridgeDeltaMPI = MPIRank (1), _ridgeDelta = ResourceStatic "r" ()})
Computation (IRank IRankCompareReverse (0),147) (ResourceOMNode 147 (IRank IRankCompareReverse (0)))
Stage (RidgeID {_ridgeDeltaMPI = MPIRank (0), _ridgeDelta = ResourceOMNode 147 (IRank IRankCompareReverse (0),IRank IRankCompareReverse (1))})
Stage (RidgeID {_ridgeDeltaMPI = MPIRank (1), _ridgeDelta = ResourceOMNode 147 (IRank IRankCompareReverse (0),IRank IRankCompareReverse (1))})
Computation (IRank IRankCompareReverse (0),148) (ResourceOMNode 148 (IRank IRankCompareReverse (0)))
Stage (RidgeID {_ridgeDeltaMPI = MPIRank (0), _ridgeDelta = ResourceOMNode 148 (IRank IRankCompareReverse (0),IRank IRankCompareReverse (1))})
Stage (RidgeID {_ridgeDeltaMPI = MPIRank (1), _ridgeDelta = ResourceOMNode 148 (IRank IRankCompareReverse (0),IRank IRankCompareReverse (1))})
Computation (IRank IRankCompareReverse (0),149) (ResourceOMNode 149 (IRank IRankCompareReverse (0)))
Stage (RidgeID {_ridgeDeltaMPI = MPIRank (0), _ridgeDelta = ResourceOMNode 149 (IRank IRankCompareReverse (0),IRank IRankCompareReverse (1))})
Stage (RidgeID {_ridgeDeltaMPI = MPIRank (1), _ridgeDelta = ResourceOMNode 149 (IRank IRankCompareReverse (0),IRank IRankCompareReverse (1))})
Computation (IRank IRankCompareReverse (0),150) (ResourceStatic "r" ())
Computation (IRank IRankCompareReverse (0),151) (ResourceStatic "m" ())
Computation (IRank IRankCompareReverse (0),152) (ResourceStatic "e" ())
FreeResource (ResourceOMNode 147 (IRank IRankCompareReverse (0)))
FreeResource (ResourceOMNode 148 (IRank IRankCompareReverse (0)))
FreeResource (ResourceOMNode 149 (IRank IRankCompareReverse (0)))
CommunicationSendRecv (FacetID {_facetDeltaMPI = MPIRank (1), _facetIRSrc = IRank IRankCompareReverse (0), _facetIRDest = IRank IRankCompareReverse (1)})
CommunicationWait (FacetID {_facetDeltaMPI = MPIRank (1), _facetIRSrc = IRank IRankCompareReverse (0), _facetIRDest = IRank IRankCompareReverse (1)})
Unstage (RidgeID {_ridgeDeltaMPI = MPIRank (1), _ridgeDelta = ResourceStatic "e" ()})
Unstage (RidgeID {_ridgeDeltaMPI = MPIRank (1), _ridgeDelta = ResourceStatic "m" ()})
Unstage (RidgeID {_ridgeDeltaMPI = MPIRank (1), _ridgeDelta = ResourceStatic "r" ()})
Computation (IRank IRankCompareReverse (1),147) (ResourceOMNode 147 (IRank IRankCompareReverse (1)))
Computation (IRank IRankCompareReverse (1),148) (ResourceOMNode 148 (IRank IRankCompareReverse (1)))
Computation (IRank IRankCompareReverse (1),149) (ResourceOMNode 149 (IRank IRankCompareReverse (1)))
Unstage (RidgeID {_ridgeDeltaMPI = MPIRank (0), _ridgeDelta = ResourceOMNode 147 (IRank IRankCompareReverse (0),IRank IRankCompareReverse (1))})
Unstage (RidgeID {_ridgeDeltaMPI = MPIRank (1), _ridgeDelta = ResourceOMNode 147 (IRank IRankCompareReverse (0),IRank IRankCompareReverse (1))})
Unstage (RidgeID {_ridgeDeltaMPI = MPIRank (0), _ridgeDelta = ResourceOMNode 148 (IRank IRankCompareReverse (0),IRank IRankCompareReverse (1))})
Unstage (RidgeID {_ridgeDeltaMPI = MPIRank (1), _ridgeDelta = ResourceOMNode 148 (IRank IRankCompareReverse (0),IRank IRankCompareReverse (1))})
Unstage (RidgeID {_ridgeDeltaMPI = MPIRank (0), _ridgeDelta = ResourceOMNode 149 (IRank IRankCompareReverse (0),IRank IRankCompareReverse (1))})
Unstage (RidgeID {_ridgeDeltaMPI = MPIRank (1), _ridgeDelta = ResourceOMNode 149 (IRank IRankCompareReverse (0),IRank IRankCompareReverse (1))})
Computation (IRank IRankCompareReverse (1),150) (ResourceStatic "r" ())
Computation (IRank IRankCompareReverse (1),151) (ResourceStatic "m" ())
Computation (IRank IRankCompareReverse (1),152) (ResourceStatic "e" ())
FreeResource (ResourceOMNode 147 (IRank IRankCompareReverse (1)))
FreeResource (ResourceOMNode 148 (IRank IRankCompareReverse (1)))
FreeResource (ResourceOMNode 149 (IRank IRankCompareReverse (1)))
### wallEvolution
([0,150,300])
### wallEvolution
fromList [(147,([-2,152,298])),(148,([-2,152,298])),(149,([-2,152,298])),(150,([-4,154,296])),(151,([-4,154,296])),(152,([-4,154,296]))]
### inverted0
True
NODE: 147
  IR: IRank IRankCompareReverse (1)
    「(152) (298)」
  IR: IRank IRankCompareReverse (0)
    「(-2) (152)」
NODE: 148
  IR: IRank IRankCompareReverse (1)
    「(152) (298)」
  IR: IRank IRankCompareReverse (0)
    「(-2) (152)」
NODE: 149
  IR: IRank IRankCompareReverse (1)
    「(152) (298)」
  IR: IRank IRankCompareReverse (0)
    「(-2) (152)」
NODE: 150
  IR: IRank IRankCompareReverse (1)
    「(154) (296)」
  IR: IRank IRankCompareReverse (0)
    「(-4) (154)」
NODE: 151
  IR: IRank IRankCompareReverse (1)
    「(154) (296)」
  IR: IRank IRankCompareReverse (0)
    「(-4) (154)」
NODE: 152
  IR: IRank IRankCompareReverse (1)
    「(154) (296)」
  IR: IRank IRankCompareReverse (0)
    「(-4) (154)」
IR: IRank IRankCompareReverse (1)
  NODE: 147
    Just (fromList [(ResourceStatic "e" (),「(151) (299)」),(ResourceStatic "m" (),「(150) (300)」),(ResourceStatic "r" (),「(150) (300)」)])
  NODE: 148
    Just (fromList [(ResourceStatic "e" (),「(150) (300)」),(ResourceStatic "m" (),「(150) (300)」),(ResourceStatic "r" (),「(150) (300)」)])
  NODE: 149
    Just (fromList [(ResourceStatic "e" (),「(150) (300)」),(ResourceStatic "m" (),「(150) (300)」),(ResourceStatic "r" (),「(150) (300)」)])
  NODE: 150
    Just (fromList [(ResourceOMNode 147 (),「(152) (298)」),(ResourceOMNode 148 (),「(152) (298)」),(ResourceOMNode 149 (),「(153) (297)」)])
  NODE: 151
    Just (fromList [(ResourceOMNode 147 (),「(152) (298)」),(ResourceOMNode 148 (),「(152) (298)」),(ResourceOMNode 149 (),「(152) (298)」)])
  NODE: 152
    Just (fromList [(ResourceOMNode 147 (),「(152) (298)」),(ResourceOMNode 148 (),「(152) (298)」),(ResourceOMNode 149 (),「(152) (298)」)])
IR: IRank IRankCompareReverse (0)
  NODE: 147
    Just (fromList [(ResourceStatic "e" (),「(-3) (153)」),(ResourceStatic "m" (),「(-4) (154)」),(ResourceStatic "r" (),「(-4) (154)」)])
  NODE: 148
    Just (fromList [(ResourceStatic "e" (),「(-4) (154)」),(ResourceStatic "m" (),「(-4) (154)」),(ResourceStatic "r" (),「(-4) (154)」)])
  NODE: 149
    Just (fromList [(ResourceStatic "e" (),「(-4) (154)」),(ResourceStatic "m" (),「(-4) (154)」),(ResourceStatic "r" (),「(-4) (154)」)])
  NODE: 150
    Just (fromList [(ResourceOMNode 147 (),「(-6) (156)」),(ResourceOMNode 148 (),「(-6) (156)」),(ResourceOMNode 149 (),「(-5) (155)」)])
  NODE: 151
    Just (fromList [(ResourceOMNode 147 (),「(-6) (156)」),(ResourceOMNode 148 (),「(-6) (156)」),(ResourceOMNode 149 (),「(-6) (156)」)])
  NODE: 152
    Just (fromList [(ResourceOMNode 147 (),「(-6) (156)」),(ResourceOMNode 148 (),「(-6) (156)」),(ResourceOMNode 149 (),「(-6) (156)」)])
#### Allocation List ####
ResourceStatic "e" ()
  「(-4) (300)」
ResourceStatic "m" ()
  「(-4) (300)」
ResourceStatic "r" ()
  「(-4) (300)」
ResourceOMNode 147 (IRank IRankCompareReverse (0))
  「(-6) (156)」
ResourceOMNode 147 (IRank IRankCompareReverse (1))
  「(152) (298)」
ResourceOMNode 148 (IRank IRankCompareReverse (0))
  「(-6) (156)」
ResourceOMNode 148 (IRank IRankCompareReverse (1))
  「(152) (298)」
ResourceOMNode 149 (IRank IRankCompareReverse (0))
  「(-6) (156)」
ResourceOMNode 149 (IRank IRankCompareReverse (1))
  「(152) (298)」
ResourceOMNode 150 (IRank IRankCompareReverse (0))
  「(-4) (154)」
ResourceOMNode 150 (IRank IRankCompareReverse (1))
  「(154) (296)」
ResourceOMNode 151 (IRank IRankCompareReverse (0))
  「(-4) (154)」
ResourceOMNode 151 (IRank IRankCompareReverse (1))
  「(154) (296)」
ResourceOMNode 152 (IRank IRankCompareReverse (0))
  「(-4) (154)」
ResourceOMNode 152 (IRank IRankCompareReverse (1))
  「(154) (296)」
#### Resource Sharing ####
0
  ResourceOMNode 147 (IRank IRankCompareReverse (1))
  ResourceOMNode 149 (IRank IRankCompareReverse (0))
1
  ResourceOMNode 148 (IRank IRankCompareReverse (0))
  ResourceOMNode 148 (IRank IRankCompareReverse (1))
2
  ResourceOMNode 147 (IRank IRankCompareReverse (0))
  ResourceOMNode 149 (IRank IRankCompareReverse (1))
#### Ridge List ####
RidgeID {_ridgeDeltaMPI = MPIRank (-1), _ridgeDelta = ResourceStatic "e" ()}
  「(-4) (0)」
RidgeID {_ridgeDeltaMPI = MPIRank (-1), _ridgeDelta = ResourceStatic "m" ()}
  「(-4) (0)」
RidgeID {_ridgeDeltaMPI = MPIRank (-1), _ridgeDelta = ResourceStatic "r" ()}
  「(-4) (0)」
RidgeID {_ridgeDeltaMPI = MPIRank (-1), _ridgeDelta = ResourceOMNode 147 (IRank IRankCompareReverse (1),IRank IRankCompareReverse (0))}
  「(-6) (-2)」
RidgeID {_ridgeDeltaMPI = MPIRank (-1), _ridgeDelta = ResourceOMNode 148 (IRank IRankCompareReverse (1),IRank IRankCompareReverse (0))}
  「(-6) (-2)」
RidgeID {_ridgeDeltaMPI = MPIRank (-1), _ridgeDelta = ResourceOMNode 149 (IRank IRankCompareReverse (1),IRank IRankCompareReverse (0))}
  「(-6) (-2)」
RidgeID {_ridgeDeltaMPI = MPIRank (0), _ridgeDelta = ResourceOMNode 147 (IRank IRankCompareReverse (1),IRank IRankCompareReverse (0))}
  「(152) (156)」
RidgeID {_ridgeDeltaMPI = MPIRank (0), _ridgeDelta = ResourceOMNode 148 (IRank IRankCompareReverse (1),IRank IRankCompareReverse (0))}
  「(152) (156)」
RidgeID {_ridgeDeltaMPI = MPIRank (0), _ridgeDelta = ResourceOMNode 149 (IRank IRankCompareReverse (1),IRank IRankCompareReverse (0))}
  「(152) (156)」
#### Facet List ####
FacetID {_facetDeltaMPI = MPIRank (-1), _facetIRSrc = IRank IRankCompareReverse (1), _facetIRDest = IRank IRankCompareReverse (0)}
  [RidgeID {_ridgeDeltaMPI = MPIRank (-1), _ridgeDelta = ResourceStatic "e" ()},RidgeID {_ridgeDeltaMPI = MPIRank (-1), _ridgeDelta = ResourceStatic "m" ()},RidgeID {_ridgeDeltaMPI = MPIRank (-1), _ridgeDelta = ResourceStatic "r" ()},RidgeID {_ridgeDeltaMPI = MPIRank (-1), _ridgeDelta = ResourceOMNode 147 (IRank IRankCompareReverse (1),IRank IRankCompareReverse (0))},RidgeID {_ridgeDeltaMPI = MPIRank (-1), _ridgeDelta = ResourceOMNode 148 (IRank IRankCompareReverse (1),IRank IRankCompareReverse (0))},RidgeID {_ridgeDeltaMPI = MPIRank (-1), _ridgeDelta = ResourceOMNode 149 (IRank IRankCompareReverse (1),IRank IRankCompareReverse (0))}]
#### Program ####
Stage (RidgeID {_ridgeDeltaMPI = MPIRank (-1), _ridgeDelta = ResourceStatic "e" ()})
Stage (RidgeID {_ridgeDeltaMPI = MPIRank (-1), _ridgeDelta = ResourceStatic "m" ()})
Stage (RidgeID {_ridgeDeltaMPI = MPIRank (-1), _ridgeDelta = ResourceStatic "r" ()})
Computation (IRank IRankCompareReverse (1),147) (ResourceOMNode 147 (IRank IRankCompareReverse (1)))
Stage (RidgeID {_ridgeDeltaMPI = MPIRank (-1), _ridgeDelta = ResourceOMNode 147 (IRank IRankCompareReverse (1),IRank IRankCompareReverse (0))})
Stage (RidgeID {_ridgeDeltaMPI = MPIRank (0), _ridgeDelta = ResourceOMNode 147 (IRank IRankCompareReverse (1),IRank IRankCompareReverse (0))})
Computation (IRank IRankCompareReverse (1),148) (ResourceOMNode 148 (IRank IRankCompareReverse (1)))
Stage (RidgeID {_ridgeDeltaMPI = MPIRank (-1), _ridgeDelta = ResourceOMNode 148 (IRank IRankCompareReverse (1),IRank IRankCompareReverse (0))})
Stage (RidgeID {_ridgeDeltaMPI = MPIRank (0), _ridgeDelta = ResourceOMNode 148 (IRank IRankCompareReverse (1),IRank IRankCompareReverse (0))})
Computation (IRank IRankCompareReverse (1),149) (ResourceOMNode 149 (IRank IRankCompareReverse (1)))
Stage (RidgeID {_ridgeDeltaMPI = MPIRank (-1), _ridgeDelta = ResourceOMNode 149 (IRank IRankCompareReverse (1),IRank IRankCompareReverse (0))})
Stage (RidgeID {_ridgeDeltaMPI = MPIRank (0), _ridgeDelta = ResourceOMNode 149 (IRank IRankCompareReverse (1),IRank IRankCompareReverse (0))})
Computation (IRank IRankCompareReverse (1),150) (ResourceStatic "r" ())
Computation (IRank IRankCompareReverse (1),151) (ResourceStatic "m" ())
Computation (IRank IRankCompareReverse (1),152) (ResourceStatic "e" ())
FreeResource (ResourceOMNode 147 (IRank IRankCompareReverse (1)))
FreeResource (ResourceOMNode 148 (IRank IRankCompareReverse (1)))
FreeResource (ResourceOMNode 149 (IRank IRankCompareReverse (1)))
CommunicationSendRecv (FacetID {_facetDeltaMPI = MPIRank (-1), _facetIRSrc = IRank IRankCompareReverse (1), _facetIRDest = IRank IRankCompareReverse (0)})
CommunicationWait (FacetID {_facetDeltaMPI = MPIRank (-1), _facetIRSrc = IRank IRankCompareReverse (1), _facetIRDest = IRank IRankCompareReverse (0)})
Unstage (RidgeID {_ridgeDeltaMPI = MPIRank (-1), _ridgeDelta = ResourceStatic "e" ()})
Unstage (RidgeID {_ridgeDeltaMPI = MPIRank (-1), _ridgeDelta = ResourceStatic "m" ()})
Unstage (RidgeID {_ridgeDeltaMPI = MPIRank (-1), _ridgeDelta = ResourceStatic "r" ()})
Computation (IRank IRankCompareReverse (0),147) (ResourceOMNode 147 (IRank IRankCompareReverse (0)))
Computation (IRank IRankCompareReverse (0),148) (ResourceOMNode 148 (IRank IRankCompareReverse (0)))
Computation (IRank IRankCompareReverse (0),149) (ResourceOMNode 149 (IRank IRankCompareReverse (0)))
Unstage (RidgeID {_ridgeDeltaMPI = MPIRank (-1), _ridgeDelta = ResourceOMNode 147 (IRank IRankCompareReverse (1),IRank IRankCompareReverse (0))})
Unstage (RidgeID {_ridgeDeltaMPI = MPIRank (0), _ridgeDelta = ResourceOMNode 147 (IRank IRankCompareReverse (1),IRank IRankCompareReverse (0))})
Unstage (RidgeID {_ridgeDeltaMPI = MPIRank (-1), _ridgeDelta = ResourceOMNode 148 (IRank IRankCompareReverse (1),IRank IRankCompareReverse (0))})
Unstage (RidgeID {_ridgeDeltaMPI = MPIRank (0), _ridgeDelta = ResourceOMNode 148 (IRank IRankCompareReverse (1),IRank IRankCompareReverse (0))})
Unstage (RidgeID {_ridgeDeltaMPI = MPIRank (-1), _ridgeDelta = ResourceOMNode 149 (IRank IRankCompareReverse (1),IRank IRankCompareReverse (0))})
Unstage (RidgeID {_ridgeDeltaMPI = MPIRank (0), _ridgeDelta = ResourceOMNode 149 (IRank IRankCompareReverse (1),IRank IRankCompareReverse (0))})
Computation (IRank IRankCompareReverse (0),150) (ResourceStatic "r" ())
Computation (IRank IRankCompareReverse (0),151) (ResourceStatic "m" ())
Computation (IRank IRankCompareReverse (0),152) (ResourceStatic "e" ())
FreeResource (ResourceOMNode 147 (IRank IRankCompareReverse (0)))
FreeResource (ResourceOMNode 148 (IRank IRankCompareReverse (0)))
FreeResource (ResourceOMNode 149 (IRank IRankCompareReverse (0)))
## Subroutine Analysis
### cprog0
CProgram {_headerFileContent = Src [Raw "\n#pragma once\n#ifdef __cplusplus\nextern \"C\"\n{\n#endif\n#include <mpi.h>\n\n\n#define NX  300\ntypedef double rsc_surface;\nextern double e[310];\nextern double m[310];\nextern double r[310];\nextern double Rsc0[162];\nextern double Rsc2[162];\nextern double Rsc1[162];\nstruct Facet_1_src__0_dest__1{double Ridge_1_St_e[4];\ndouble Ridge_1_St_m[4];\ndouble Ridge_1_St_r[4];\ndouble Ridge_1_Om_147_r__0_r__1[4];\ndouble Ridge_1_Om_148_r__0_r__1[4];\ndouble Ridge_1_Om_149_r__0_r__1[4];\n};extern struct Facet_1_src__0_dest__1 Facet_1_src__0_dest__1_Send;extern struct Facet_1_src__0_dest__1 Facet_1_src__0_dest__1_Recv;extern MPI_Request req_Facet_1_src__0_dest__1;\n\nextern double Ridge_0_Om_147_r__0_r__1[4];\nextern double Ridge_0_Om_148_r__0_r__1[4];\nextern double Ridge_0_Om_149_r__0_r__1[4];\ntypedef double rsc_surface;\nstruct Facet_m1_src__1_dest__0{double Ridge_m1_St_e[4];\ndouble Ridge_m1_St_m[4];\ndouble Ridge_m1_St_r[4];\ndouble Ridge_m1_Om_147_r__1_r__0[4];\ndouble Ridge_m1_Om_148_r__1_r__0[4];\ndouble Ridge_m1_Om_149_r__1_r__0[4];\n};extern struct Facet_m1_src__1_dest__0 Facet_m1_src__1_dest__0_Send;extern struct Facet_m1_src__1_dest__0 Facet_m1_src__1_dest__0_Recv;extern MPI_Request req_Facet_m1_src__1_dest__0;\n\nextern double Ridge_0_Om_147_r__1_r__0[4];\nextern double Ridge_0_Om_148_r__1_r__0[4];\nextern double Ridge_0_Om_149_r__1_r__0[4];\n\nstruct Formura_Navigator {\nint time_step;\nint lower_x;\nint upper_x;\nint offset_x;\nMPI_Comm mpi_comm;\nint mpi_my_rank;\nint mpi_rank__m1;\nint mpi_rank__0;\nint mpi_rank__1;\n};\nextern struct Formura_Navigator navi;\n\nint Formura_Init (struct Formura_Navigator *navi, MPI_Comm comm);\n\nvoid Formura_internal();\nvoid Formura_internal_1();\nvoid Formura_internal_2();\nvoid Formura_internal_3();\n/*INSERT SUBROUTINES HERE*/\nint Formura_Forward (struct Formura_Navigator *navi);\n#ifdef __cplusplus\n}\n#endif\n"], _sourceFileContent = Src [Raw "\n#include <mpi.h>\n#include <math.h>\n#include <stdbool.h>\n\n#include \"shocktube.h\"\n\n\n\ndouble e[310];\ndouble m[310];\ndouble r[310];\ndouble Rsc0[162];\ndouble Rsc2[162];\ndouble Rsc1[162];\nstruct Facet_1_src__0_dest__1 Facet_1_src__0_dest__1_Send;struct Facet_1_src__0_dest__1 Facet_1_src__0_dest__1_Recv;MPI_Request req_Facet_1_src__0_dest__1;\n\ndouble Ridge_0_Om_147_r__0_r__1[4];\ndouble Ridge_0_Om_148_r__0_r__1[4];\ndouble Ridge_0_Om_149_r__0_r__1[4];\nstruct Facet_m1_src__1_dest__0 Facet_m1_src__1_dest__0_Send;struct Facet_m1_src__1_dest__0 Facet_m1_src__1_dest__0_Recv;MPI_Request req_Facet_m1_src__1_dest__0;\n\ndouble Ridge_0_Om_147_r__1_r__0[4];\ndouble Ridge_0_Om_148_r__1_r__0[4];\ndouble Ridge_0_Om_149_r__1_r__0[4];\n\nstruct Formura_Navigator navi;\n\nvoid Formura_decode_mpi_rank (int r, int *ix){\nint s=r;\n*ix=s%1;\ns=s/1;\n}\nint Formura_encode_mpi_rank ( int ix){\nint s = 0;\ns *= 1;\ns += (ix%1+1)%1;\nreturn s;}\nint Formura_Init (struct Formura_Navigator *navi, MPI_Comm comm){\nint ix;\nnavi->mpi_comm = comm;\n{int r; MPI_Comm_rank(comm,&r);navi->mpi_my_rank = r;}\nFormura_decode_mpi_rank( navi->mpi_my_rank, &ix);\nnavi->mpi_rank__m1=Formura_encode_mpi_rank( ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-1"}),Raw "));\nnavi->mpi_rank__0=Formura_encode_mpi_rank( ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw "));\nnavi->mpi_rank__1=Formura_encode_mpi_rank( ix+(",Hole (Typed {_holeType = "int", _holeExpr = "1"}),Raw "));\nnavi->time_step=0;\nnavi->offset_x=ix*300-4;\nnavi->lower_x=4;\nnavi->upper_x=4+300;\nreturn 0;}\n\n\nint Formura_Forward (struct Formura_Navigator *navi){\nfor(int timestep=0;timestep<1;++timestep){\nFormura_internal();\nMPI_Irecv( (void*) &Facet_1_src__0_dest__1_Recv , sizeof(struct Facet_1_src__0_dest__1) , MPI_BYTE, navi->mpi_rank__1, 0 , navi->mpi_comm, &req_Facet_1_src__0_dest__1 );\n MPI_Isend( (void*) &Facet_1_src__0_dest__1_Send , sizeof(struct Facet_1_src__0_dest__1) , MPI_BYTE, navi->mpi_rank__m1, 0 , navi->mpi_comm, &req_Facet_1_src__0_dest__1 );\n\nMPI_Wait(&req_Facet_1_src__0_dest__1,MPI_STATUS_IGNORE);\n\nFormura_internal_1();\n\n/* HALFWAYS */\nFormura_internal_2();\nMPI_Irecv( (void*) &Facet_m1_src__1_dest__0_Recv , sizeof(struct Facet_m1_src__1_dest__0) , MPI_BYTE, navi->mpi_rank__m1, 0 , navi->mpi_comm, &req_Facet_m1_src__1_dest__0 );\n MPI_Isend( (void*) &Facet_m1_src__1_dest__0_Send , sizeof(struct Facet_m1_src__1_dest__0) , MPI_BYTE, navi->mpi_rank__1, 0 , navi->mpi_comm, &req_Facet_m1_src__1_dest__0 );\n\nMPI_Wait(&req_Facet_m1_src__1_dest__0,MPI_STATUS_IGNORE);\n\nFormura_internal_3();\n\n\n}\nnavi->time_step += 4;\nreturn 0;}\n"], _auxFilesContent = fromList [("Formura_internal.c",Src [Raw "void Formura_internal(){\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nFacet_1_src__0_dest__1_Send.Ridge_1_St_e[ix]=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nFacet_1_src__0_dest__1_Send.Ridge_1_St_m[ix]=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nFacet_1_src__0_dest__1_Send.Ridge_1_St_r[ix]=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")];}\n\n",PotentialSubroutine (Src [Raw "\nfor (int  ix = ",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw " ; ix < ",Hole (Typed {_holeType = "int", _holeExpr = "146"}),Raw " ; ix += 1 ){\n            double  a=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")]/*True*/;\n double  a_0=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "5"}),Raw ")]/*True*/;\n double  a_1=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "6"}),Raw ")]/*True*/;\n double  a_2=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "7"}),Raw ")]/*True*/;\n double  a_3=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "8"}),Raw ")]/*True*/;\n double  a_4=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")]/*True*/;\n double  a_5=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "5"}),Raw ")]/*True*/;\n double  a_6=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "6"}),Raw ")]/*True*/;\n double  a_7=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "7"}),Raw ")]/*True*/;\n double  a_8=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "8"}),Raw ")]/*True*/;\n double  a_9=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "5"}),Raw ")]/*True*/;\n double  a_10=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "6"}),Raw ")]/*True*/;\n double  a_11=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "7"}),Raw ")]/*True*/;\n    double  a_12=(1.4-1.0)/*True*/;\n double  a_13=(1.4-1.0)/*True*/;\n double  a_14=(1.4-1.0)/*True*/;\n double  a_15=(a_12*a_9)/*True*/;\n double  a_16=(a_13*a_10)/*True*/;\n double  a_17=(a_14*a_11)/*True*/;\n    double  a_18=(3.0-1.4)/*True*/;\n double  a_19=(3.0-1.4)/*True*/;\n double  a_20=(3.0-1.4)/*True*/;\n    double  a_21=pow(a_5,2.0)/*True*/;\n double  a_22=pow(a_6,2.0)/*True*/;\n double  a_23=pow(a_7,2.0)/*True*/;\n double  a_24=(a_18*a_21)/*True*/;\n double  a_25=(a_19*a_22)/*True*/;\n double  a_26=(a_20*a_23)/*True*/;\n    double  a_27=(2.0*a_0)/*True*/;\n double  a_28=(2.0*a_1)/*True*/;\n double  a_29=(2.0*a_2)/*True*/;\n double  a_30=(a_24/a_27)/*True*/;\n double  a_31=(a_25/a_28)/*True*/;\n double  a_32=(a_26/a_29)/*True*/;\n double  a_33=(a_15+a_30)/*True*/;\n double  a_34=(a_16+a_31)/*True*/;\n double  a_35=(a_17+a_32)/*True*/;\n double  a_36=(0.3/1.0)/*True*/;\n double  a_37=(0.3/1.0)/*True*/;\n double  a_38=(0.3/1.0)/*True*/;\n double  a_39=(a_6-a_5)/*True*/;\n double  a_40=(a_7-a_6)/*True*/;\n double  a_41=(a_8-a_7)/*True*/;\n double  a_42=(a_34-a_33)/*True*/;\n double  a_43=(a_35-a_34)/*True*/;\n double  a_44=(0.2*1.0)/*True*/;\n double  a_45=(0.2*1.0)/*True*/;\n double  a_46=(0.2*1.0)/*True*/;\n    double  a_47=(2.0*a_0)/*True*/;\n double  a_48=(2.0*a_1)/*True*/;\n double  a_49=(2.0*a_2)/*True*/;\n double  a_50=(2.0*a_5)/*True*/;\n double  a_51=(2.0*a_6)/*True*/;\n double  a_52=(a_1-a_47)/*True*/;\n double  a_53=(a_2-a_48)/*True*/;\n double  a_54=(a_3-a_49)/*True*/;\n double  a_55=(a_6-a_50)/*True*/;\n double  a_56=(a_7-a_51)/*True*/;\n double  a_57=(a_52+a)/*True*/;\n double  a_58=(a_53+a_0)/*True*/;\n double  a_59=(a_54+a_1)/*True*/;\n double  a_60=(a_55+a_4)/*True*/;\n double  a_61=(a_56+a_5)/*True*/;\n double  a_62=(a_44*a_57)/*True*/;\n double  a_63=(a_45*a_58)/*True*/;\n double  a_64=(a_46*a_59)/*True*/;\n double  a_65=(a_44*a_60)/*True*/;\n double  a_66=(a_45*a_61)/*True*/;\n double  a_67=(-a_62)/*True*/;\n double  a_68=(-a_63)/*True*/;\n double  a_69=(-a_64)/*True*/;\n double  a_70=(-a_65)/*True*/;\n double  a_71=(-a_66)/*True*/;\n double  a_72=(a_39+a_67)/*True*/;\n double  a_73=(a_40+a_68)/*True*/;\n double  a_74=(a_41+a_69)/*True*/;\n double  a_75=(a_42+a_70)/*True*/;\n double  a_76=(a_43+a_71)/*True*/;\n double  a_77=(a_36*a_72)/*True*/;\n double  a_78=(a_37*a_73)/*True*/;\n double  a_79=(a_38*a_74)/*True*/;\n double  a_80=(a_36*a_75)/*True*/;\n double  a_81=(a_37*a_76)/*True*/;\n double  a_82=(a_0-a_77)/*True*/;\n double  a_83=(a_1-a_78)/*True*/;\n double  a_84=(a_2-a_79)/*True*/;\n double  a_85=(a_5-a_80)/*True*/;\n double  a_86=(a_6-a_81)/*True*/;\n double  a_87=(a_1+a_83)/*True*/;\n  double  a_88=(a_87/2.0)/*True*/;\n double  a_89=(0.3/1.0)/*True*/;\n  double  a_90=(a_89/2.0)/*True*/;\n double  a_91=(a_86-a_85)/*True*/;\n double  a_92=(0.2*1.0)/*True*/;\n  double  a_93=(2.0*a_83)/*True*/;\n double  a_94=(a_84-a_93)/*True*/;\n double  a_95=(a_94+a_82)/*True*/;\n double  a_96=(a_92*a_95)/*True*/;\n double  a_97=(-a_96)/*True*/;\n double  a_98=(a_91+a_97)/*True*/;\n double  a_99=(a_90*a_98)/*True*/;\n double  a_100=(a_88-a_99)/*True*/;\n \n",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=(+a_100);\n\n}\n"]),Raw "\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRidge_0_Om_147_r__0_r__1[ix]=Rsc0[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "142"}),Raw ")];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nFacet_1_src__0_dest__1_Send.Ridge_1_Om_147_r__0_r__1[ix]=Rsc0[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")];}\n\n",PotentialSubroutine (Src [Raw "\nfor (int  ix = ",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw " ; ix < ",Hole (Typed {_holeType = "int", _holeExpr = "146"}),Raw " ; ix += 1 ){\n             double  a=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")]/*True*/;\n double  a_0=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "5"}),Raw ")]/*True*/;\n double  a_1=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "6"}),Raw ")]/*True*/;\n double  a_2=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "7"}),Raw ")]/*True*/;\n double  a_3=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "8"}),Raw ")]/*True*/;\n double  a_4=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")]/*True*/;\n double  a_5=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "5"}),Raw ")]/*True*/;\n double  a_6=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "6"}),Raw ")]/*True*/;\n double  a_7=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "7"}),Raw ")]/*True*/;\n double  a_8=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "8"}),Raw ")]/*True*/;\n double  a_9=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")]/*True*/;\n double  a_10=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "5"}),Raw ")]/*True*/;\n double  a_11=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "6"}),Raw ")]/*True*/;\n double  a_12=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "7"}),Raw ")]/*True*/;\n double  a_13=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "8"}),Raw ")]/*True*/;\n     double  a_14=(1.4-1.0)/*True*/;\n double  a_15=(1.4-1.0)/*True*/;\n double  a_16=(1.4-1.0)/*True*/;\n double  a_17=(1.4-1.0)/*True*/;\n double  a_18=(a_14*a_10)/*True*/;\n double  a_19=(a_15*a_11)/*True*/;\n double  a_20=(a_16*a_12)/*True*/;\n double  a_21=(a_17*a_13)/*True*/;\n     double  a_22=(3.0-1.4)/*True*/;\n double  a_23=(3.0-1.4)/*True*/;\n double  a_24=(3.0-1.4)/*True*/;\n double  a_25=(3.0-1.4)/*True*/;\n     double  a_26=pow(a_5,2.0)/*True*/;\n double  a_27=pow(a_6,2.0)/*True*/;\n double  a_28=pow(a_7,2.0)/*True*/;\n double  a_29=pow(a_8,2.0)/*True*/;\n double  a_30=(a_22*a_26)/*True*/;\n double  a_31=(a_23*a_27)/*True*/;\n double  a_32=(a_24*a_28)/*True*/;\n double  a_33=(a_25*a_29)/*True*/;\n     double  a_34=(2.0*a_0)/*True*/;\n double  a_35=(2.0*a_1)/*True*/;\n double  a_36=(2.0*a_2)/*True*/;\n double  a_37=(2.0*a_3)/*True*/;\n double  a_38=(a_30/a_34)/*True*/;\n double  a_39=(a_31/a_35)/*True*/;\n double  a_40=(a_32/a_36)/*True*/;\n double  a_41=(a_33/a_37)/*True*/;\n double  a_42=(a_18+a_38)/*True*/;\n double  a_43=(a_19+a_39)/*True*/;\n double  a_44=(a_20+a_40)/*True*/;\n double  a_45=(a_21+a_41)/*True*/;\n double  a_46=(1.4*a_10)/*True*/;\n double  a_47=(1.4*a_11)/*True*/;\n double  a_48=(1.4*a_12)/*True*/;\n double  a_49=(a_46*a_5)/*True*/;\n double  a_50=(a_47*a_6)/*True*/;\n double  a_51=(a_48*a_7)/*True*/;\n double  a_52=(a_49/a_0)/*True*/;\n double  a_53=(a_50/a_1)/*True*/;\n double  a_54=(a_51/a_2)/*True*/;\n    double  a_55=(1.4-1.0)/*True*/;\n double  a_56=(1.4-1.0)/*True*/;\n double  a_57=(1.4-1.0)/*True*/;\n    double  a_58=pow(a_5,3.0)/*True*/;\n double  a_59=pow(a_6,3.0)/*True*/;\n double  a_60=pow(a_7,3.0)/*True*/;\n double  a_61=(a_55*a_58)/*True*/;\n double  a_62=(a_56*a_59)/*True*/;\n double  a_63=(a_57*a_60)/*True*/;\n       double  a_64=pow(a_0,2.0)/*True*/;\n double  a_65=pow(a_1,2.0)/*True*/;\n double  a_66=pow(a_2,2.0)/*True*/;\n double  a_67=(2.0*a_64)/*True*/;\n double  a_68=(2.0*a_65)/*True*/;\n double  a_69=(2.0*a_66)/*True*/;\n double  a_70=(a_61/a_67)/*True*/;\n double  a_71=(a_62/a_68)/*True*/;\n double  a_72=(a_63/a_69)/*True*/;\n double  a_73=(a_52-a_70)/*True*/;\n double  a_74=(a_53-a_71)/*True*/;\n double  a_75=(a_54-a_72)/*True*/;\n double  a_76=(0.3/1.0)/*True*/;\n double  a_77=(0.3/1.0)/*True*/;\n double  a_78=(0.3/1.0)/*True*/;\n double  a_79=(a_6-a_5)/*True*/;\n double  a_80=(a_7-a_6)/*True*/;\n double  a_81=(a_43-a_42)/*True*/;\n double  a_82=(a_44-a_43)/*True*/;\n double  a_83=(a_45-a_44)/*True*/;\n double  a_84=(a_74-a_73)/*True*/;\n double  a_85=(a_75-a_74)/*True*/;\n double  a_86=(0.2*1.0)/*True*/;\n double  a_87=(0.2*1.0)/*True*/;\n double  a_88=(0.2*1.0)/*True*/;\n    double  a_89=(2.0*a_0)/*True*/;\n double  a_90=(2.0*a_1)/*True*/;\n double  a_91=(2.0*a_5)/*True*/;\n double  a_92=(2.0*a_6)/*True*/;\n double  a_93=(2.0*a_7)/*True*/;\n double  a_94=(2.0*a_10)/*True*/;\n double  a_95=(2.0*a_11)/*True*/;\n double  a_96=(a_1-a_89)/*True*/;\n double  a_97=(a_2-a_90)/*True*/;\n double  a_98=(a_6-a_91)/*True*/;\n double  a_99=(a_7-a_92)/*True*/;\n double  a_100=(a_8-a_93)/*True*/;\n double  a_101=(a_11-a_94)/*True*/;\n double  a_102=(a_12-a_95)/*True*/;\n double  a_103=(a_96+a)/*True*/;\n double  a_104=(a_97+a_0)/*True*/;\n double  a_105=(a_98+a_4)/*True*/;\n double  a_106=(a_99+a_5)/*True*/;\n double  a_107=(a_100+a_6)/*True*/;\n double  a_108=(a_101+a_9)/*True*/;\n double  a_109=(a_102+a_10)/*True*/;\n double  a_110=(a_86*a_103)/*True*/;\n double  a_111=(a_87*a_104)/*True*/;\n double  a_112=(a_86*a_105)/*True*/;\n double  a_113=(a_87*a_106)/*True*/;\n double  a_114=(a_88*a_107)/*True*/;\n double  a_115=(a_86*a_108)/*True*/;\n double  a_116=(a_87*a_109)/*True*/;\n double  a_117=(-a_110)/*True*/;\n double  a_118=(-a_111)/*True*/;\n double  a_119=(-a_112)/*True*/;\n double  a_120=(-a_113)/*True*/;\n double  a_121=(-a_114)/*True*/;\n double  a_122=(-a_115)/*True*/;\n double  a_123=(-a_116)/*True*/;\n double  a_124=(a_79+a_117)/*True*/;\n double  a_125=(a_80+a_118)/*True*/;\n double  a_126=(a_81+a_119)/*True*/;\n double  a_127=(a_82+a_120)/*True*/;\n double  a_128=(a_83+a_121)/*True*/;\n double  a_129=(a_84+a_122)/*True*/;\n double  a_130=(a_85+a_123)/*True*/;\n double  a_131=(a_76*a_124)/*True*/;\n double  a_132=(a_77*a_125)/*True*/;\n double  a_133=(a_76*a_126)/*True*/;\n double  a_134=(a_77*a_127)/*True*/;\n double  a_135=(a_78*a_128)/*True*/;\n double  a_136=(a_76*a_129)/*True*/;\n double  a_137=(a_77*a_130)/*True*/;\n double  a_138=(a_0-a_131)/*True*/;\n double  a_139=(a_1-a_132)/*True*/;\n double  a_140=(a_5-a_133)/*True*/;\n double  a_141=(a_6-a_134)/*True*/;\n double  a_142=(a_7-a_135)/*True*/;\n double  a_143=(a_10-a_136)/*True*/;\n double  a_144=(a_11-a_137)/*True*/;\n   double  a_145=(1.4-1.0)/*True*/;\n double  a_146=(1.4-1.0)/*True*/;\n double  a_147=(a_145*a_143)/*True*/;\n double  a_148=(a_146*a_144)/*True*/;\n   double  a_149=(3.0-1.4)/*True*/;\n double  a_150=(3.0-1.4)/*True*/;\n   double  a_151=pow(a_140,2.0)/*True*/;\n double  a_152=pow(a_141,2.0)/*True*/;\n double  a_153=(a_149*a_151)/*True*/;\n double  a_154=(a_150*a_152)/*True*/;\n   double  a_155=(2.0*a_138)/*True*/;\n double  a_156=(2.0*a_139)/*True*/;\n double  a_157=(a_153/a_155)/*True*/;\n double  a_158=(a_154/a_156)/*True*/;\n double  a_159=(a_147+a_157)/*True*/;\n double  a_160=(a_148+a_158)/*True*/;\n double  a_161=(a_6+a_141)/*True*/;\n  double  a_162=(a_161/2.0)/*True*/;\n double  a_163=(0.3/1.0)/*True*/;\n  double  a_164=(a_163/2.0)/*True*/;\n double  a_165=(a_160-a_159)/*True*/;\n double  a_166=(0.2*1.0)/*True*/;\n  double  a_167=(2.0*a_141)/*True*/;\n double  a_168=(a_142-a_167)/*True*/;\n double  a_169=(a_168+a_140)/*True*/;\n double  a_170=(a_166*a_169)/*True*/;\n double  a_171=(-a_170)/*True*/;\n double  a_172=(a_165+a_171)/*True*/;\n double  a_173=(a_164*a_172)/*True*/;\n double  a_174=(a_162-a_173)/*True*/;\n \n",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=(+a_174);\n\n}\n"]),Raw "\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRidge_0_Om_148_r__0_r__1[ix]=Rsc1[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "142"}),Raw ")];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nFacet_1_src__0_dest__1_Send.Ridge_1_Om_148_r__0_r__1[ix]=Rsc1[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")];}\n\n",PotentialSubroutine (Src [Raw "\nfor (int  ix = ",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw " ; ix < ",Hole (Typed {_holeType = "int", _holeExpr = "146"}),Raw " ; ix += 1 ){\n             double  a=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")]/*True*/;\n double  a_0=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "5"}),Raw ")]/*True*/;\n double  a_1=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "6"}),Raw ")]/*True*/;\n double  a_2=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "7"}),Raw ")]/*True*/;\n double  a_3=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "8"}),Raw ")]/*True*/;\n double  a_4=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")]/*True*/;\n double  a_5=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "5"}),Raw ")]/*True*/;\n double  a_6=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "6"}),Raw ")]/*True*/;\n double  a_7=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "7"}),Raw ")]/*True*/;\n double  a_8=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "8"}),Raw ")]/*True*/;\n double  a_9=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")]/*True*/;\n double  a_10=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "5"}),Raw ")]/*True*/;\n double  a_11=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "6"}),Raw ")]/*True*/;\n double  a_12=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "7"}),Raw ")]/*True*/;\n double  a_13=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "8"}),Raw ")]/*True*/;\n    double  a_14=(1.4-1.0)/*True*/;\n double  a_15=(1.4-1.0)/*True*/;\n double  a_16=(1.4-1.0)/*True*/;\n double  a_17=(a_14*a_10)/*True*/;\n double  a_18=(a_15*a_11)/*True*/;\n double  a_19=(a_16*a_12)/*True*/;\n    double  a_20=(3.0-1.4)/*True*/;\n double  a_21=(3.0-1.4)/*True*/;\n double  a_22=(3.0-1.4)/*True*/;\n    double  a_23=pow(a_5,2.0)/*True*/;\n double  a_24=pow(a_6,2.0)/*True*/;\n double  a_25=pow(a_7,2.0)/*True*/;\n double  a_26=(a_20*a_23)/*True*/;\n double  a_27=(a_21*a_24)/*True*/;\n double  a_28=(a_22*a_25)/*True*/;\n    double  a_29=(2.0*a_0)/*True*/;\n double  a_30=(2.0*a_1)/*True*/;\n double  a_31=(2.0*a_2)/*True*/;\n double  a_32=(a_26/a_29)/*True*/;\n double  a_33=(a_27/a_30)/*True*/;\n double  a_34=(a_28/a_31)/*True*/;\n double  a_35=(a_17+a_32)/*True*/;\n double  a_36=(a_18+a_33)/*True*/;\n double  a_37=(a_19+a_34)/*True*/;\n double  a_38=(1.4*a_10)/*True*/;\n double  a_39=(1.4*a_11)/*True*/;\n double  a_40=(1.4*a_12)/*True*/;\n double  a_41=(1.4*a_13)/*True*/;\n double  a_42=(a_38*a_5)/*True*/;\n double  a_43=(a_39*a_6)/*True*/;\n double  a_44=(a_40*a_7)/*True*/;\n double  a_45=(a_41*a_8)/*True*/;\n double  a_46=(a_42/a_0)/*True*/;\n double  a_47=(a_43/a_1)/*True*/;\n double  a_48=(a_44/a_2)/*True*/;\n double  a_49=(a_45/a_3)/*True*/;\n     double  a_50=(1.4-1.0)/*True*/;\n double  a_51=(1.4-1.0)/*True*/;\n double  a_52=(1.4-1.0)/*True*/;\n double  a_53=(1.4-1.0)/*True*/;\n     double  a_54=pow(a_5,3.0)/*True*/;\n double  a_55=pow(a_6,3.0)/*True*/;\n double  a_56=pow(a_7,3.0)/*True*/;\n double  a_57=pow(a_8,3.0)/*True*/;\n double  a_58=(a_50*a_54)/*True*/;\n double  a_59=(a_51*a_55)/*True*/;\n double  a_60=(a_52*a_56)/*True*/;\n double  a_61=(a_53*a_57)/*True*/;\n         double  a_62=pow(a_0,2.0)/*True*/;\n double  a_63=pow(a_1,2.0)/*True*/;\n double  a_64=pow(a_2,2.0)/*True*/;\n double  a_65=pow(a_3,2.0)/*True*/;\n double  a_66=(2.0*a_62)/*True*/;\n double  a_67=(2.0*a_63)/*True*/;\n double  a_68=(2.0*a_64)/*True*/;\n double  a_69=(2.0*a_65)/*True*/;\n double  a_70=(a_58/a_66)/*True*/;\n double  a_71=(a_59/a_67)/*True*/;\n double  a_72=(a_60/a_68)/*True*/;\n double  a_73=(a_61/a_69)/*True*/;\n double  a_74=(a_46-a_70)/*True*/;\n double  a_75=(a_47-a_71)/*True*/;\n double  a_76=(a_48-a_72)/*True*/;\n double  a_77=(a_49-a_73)/*True*/;\n double  a_78=(0.3/1.0)/*True*/;\n double  a_79=(0.3/1.0)/*True*/;\n double  a_80=(0.3/1.0)/*True*/;\n double  a_81=(a_6-a_5)/*True*/;\n double  a_82=(a_7-a_6)/*True*/;\n double  a_83=(a_36-a_35)/*True*/;\n double  a_84=(a_37-a_36)/*True*/;\n double  a_85=(a_75-a_74)/*True*/;\n double  a_86=(a_76-a_75)/*True*/;\n double  a_87=(a_77-a_76)/*True*/;\n double  a_88=(0.2*1.0)/*True*/;\n double  a_89=(0.2*1.0)/*True*/;\n double  a_90=(0.2*1.0)/*True*/;\n    double  a_91=(2.0*a_0)/*True*/;\n double  a_92=(2.0*a_1)/*True*/;\n double  a_93=(2.0*a_5)/*True*/;\n double  a_94=(2.0*a_6)/*True*/;\n double  a_95=(2.0*a_10)/*True*/;\n double  a_96=(2.0*a_11)/*True*/;\n double  a_97=(2.0*a_12)/*True*/;\n double  a_98=(a_1-a_91)/*True*/;\n double  a_99=(a_2-a_92)/*True*/;\n double  a_100=(a_6-a_93)/*True*/;\n double  a_101=(a_7-a_94)/*True*/;\n double  a_102=(a_11-a_95)/*True*/;\n double  a_103=(a_12-a_96)/*True*/;\n double  a_104=(a_13-a_97)/*True*/;\n double  a_105=(a_98+a)/*True*/;\n double  a_106=(a_99+a_0)/*True*/;\n double  a_107=(a_100+a_4)/*True*/;\n double  a_108=(a_101+a_5)/*True*/;\n double  a_109=(a_102+a_9)/*True*/;\n double  a_110=(a_103+a_10)/*True*/;\n double  a_111=(a_104+a_11)/*True*/;\n double  a_112=(a_88*a_105)/*True*/;\n double  a_113=(a_89*a_106)/*True*/;\n double  a_114=(a_88*a_107)/*True*/;\n double  a_115=(a_89*a_108)/*True*/;\n double  a_116=(a_88*a_109)/*True*/;\n double  a_117=(a_89*a_110)/*True*/;\n double  a_118=(a_90*a_111)/*True*/;\n double  a_119=(-a_112)/*True*/;\n double  a_120=(-a_113)/*True*/;\n double  a_121=(-a_114)/*True*/;\n double  a_122=(-a_115)/*True*/;\n double  a_123=(-a_116)/*True*/;\n double  a_124=(-a_117)/*True*/;\n double  a_125=(-a_118)/*True*/;\n double  a_126=(a_81+a_119)/*True*/;\n double  a_127=(a_82+a_120)/*True*/;\n double  a_128=(a_83+a_121)/*True*/;\n double  a_129=(a_84+a_122)/*True*/;\n double  a_130=(a_85+a_123)/*True*/;\n double  a_131=(a_86+a_124)/*True*/;\n double  a_132=(a_87+a_125)/*True*/;\n double  a_133=(a_78*a_126)/*True*/;\n double  a_134=(a_79*a_127)/*True*/;\n double  a_135=(a_78*a_128)/*True*/;\n double  a_136=(a_79*a_129)/*True*/;\n double  a_137=(a_78*a_130)/*True*/;\n double  a_138=(a_79*a_131)/*True*/;\n double  a_139=(a_80*a_132)/*True*/;\n double  a_140=(a_0-a_133)/*True*/;\n double  a_141=(a_1-a_134)/*True*/;\n double  a_142=(a_5-a_135)/*True*/;\n double  a_143=(a_6-a_136)/*True*/;\n double  a_144=(a_10-a_137)/*True*/;\n double  a_145=(a_11-a_138)/*True*/;\n double  a_146=(a_12-a_139)/*True*/;\n double  a_147=(1.4*a_144)/*True*/;\n double  a_148=(1.4*a_145)/*True*/;\n double  a_149=(a_147*a_142)/*True*/;\n double  a_150=(a_148*a_143)/*True*/;\n double  a_151=(a_149/a_140)/*True*/;\n double  a_152=(a_150/a_141)/*True*/;\n   double  a_153=(1.4-1.0)/*True*/;\n double  a_154=(1.4-1.0)/*True*/;\n   double  a_155=pow(a_142,3.0)/*True*/;\n double  a_156=pow(a_143,3.0)/*True*/;\n double  a_157=(a_153*a_155)/*True*/;\n double  a_158=(a_154*a_156)/*True*/;\n     double  a_159=pow(a_140,2.0)/*True*/;\n double  a_160=pow(a_141,2.0)/*True*/;\n double  a_161=(2.0*a_159)/*True*/;\n double  a_162=(2.0*a_160)/*True*/;\n double  a_163=(a_157/a_161)/*True*/;\n double  a_164=(a_158/a_162)/*True*/;\n double  a_165=(a_151-a_163)/*True*/;\n double  a_166=(a_152-a_164)/*True*/;\n double  a_167=(a_11+a_145)/*True*/;\n  double  a_168=(a_167/2.0)/*True*/;\n double  a_169=(0.3/1.0)/*True*/;\n  double  a_170=(a_169/2.0)/*True*/;\n double  a_171=(a_166-a_165)/*True*/;\n double  a_172=(0.2*1.0)/*True*/;\n  double  a_173=(2.0*a_145)/*True*/;\n double  a_174=(a_146-a_173)/*True*/;\n double  a_175=(a_174+a_144)/*True*/;\n double  a_176=(a_172*a_175)/*True*/;\n double  a_177=(-a_176)/*True*/;\n double  a_178=(a_171+a_177)/*True*/;\n double  a_179=(a_170*a_178)/*True*/;\n double  a_180=(a_168-a_179)/*True*/;\n \n",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=(+a_180);\n\n}\n"]),Raw "\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRidge_0_Om_149_r__0_r__1[ix]=Rsc2[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "142"}),Raw ")];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nFacet_1_src__0_dest__1_Send.Ridge_1_Om_149_r__0_r__1[ix]=Rsc2[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")];}\n\n",PotentialSubroutine (Src [Raw "\nfor (int  ix = ",Hole (Typed {_holeType = "int", _holeExpr = "8"}),Raw " ; ix < ",Hole (Typed {_holeType = "int", _holeExpr = "150"}),Raw " ; ix += 1 ){\n            double  a=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-8"}),Raw ")]/*True*/;\n double  a_0=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-7"}),Raw ")]/*True*/;\n double  a_1=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-6"}),Raw ")]/*True*/;\n double  a_2=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-5"}),Raw ")]/*True*/;\n double  a_3=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-4"}),Raw ")]/*True*/;\n double  a_4=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-8"}),Raw ")]/*True*/;\n double  a_5=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-7"}),Raw ")]/*True*/;\n double  a_6=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-6"}),Raw ")]/*True*/;\n double  a_7=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-5"}),Raw ")]/*True*/;\n double  a_8=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-4"}),Raw ")]/*True*/;\n double  a_9=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-7"}),Raw ")]/*True*/;\n double  a_10=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-6"}),Raw ")]/*True*/;\n double  a_11=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-5"}),Raw ")]/*True*/;\n    double  a_12=(1.4-1.0)/*True*/;\n double  a_13=(1.4-1.0)/*True*/;\n double  a_14=(1.4-1.0)/*True*/;\n double  a_15=(a_12*a_9)/*True*/;\n double  a_16=(a_13*a_10)/*True*/;\n double  a_17=(a_14*a_11)/*True*/;\n    double  a_18=(3.0-1.4)/*True*/;\n double  a_19=(3.0-1.4)/*True*/;\n double  a_20=(3.0-1.4)/*True*/;\n    double  a_21=pow(a_5,2.0)/*True*/;\n double  a_22=pow(a_6,2.0)/*True*/;\n double  a_23=pow(a_7,2.0)/*True*/;\n double  a_24=(a_18*a_21)/*True*/;\n double  a_25=(a_19*a_22)/*True*/;\n double  a_26=(a_20*a_23)/*True*/;\n    double  a_27=(2.0*a_0)/*True*/;\n double  a_28=(2.0*a_1)/*True*/;\n double  a_29=(2.0*a_2)/*True*/;\n double  a_30=(a_24/a_27)/*True*/;\n double  a_31=(a_25/a_28)/*True*/;\n double  a_32=(a_26/a_29)/*True*/;\n double  a_33=(a_15+a_30)/*True*/;\n double  a_34=(a_16+a_31)/*True*/;\n double  a_35=(a_17+a_32)/*True*/;\n double  a_36=(0.3/1.0)/*True*/;\n double  a_37=(0.3/1.0)/*True*/;\n double  a_38=(0.3/1.0)/*True*/;\n double  a_39=(a_6-a_5)/*True*/;\n double  a_40=(a_7-a_6)/*True*/;\n double  a_41=(a_8-a_7)/*True*/;\n double  a_42=(a_34-a_33)/*True*/;\n double  a_43=(a_35-a_34)/*True*/;\n double  a_44=(0.2*1.0)/*True*/;\n double  a_45=(0.2*1.0)/*True*/;\n double  a_46=(0.2*1.0)/*True*/;\n    double  a_47=(2.0*a_0)/*True*/;\n double  a_48=(2.0*a_1)/*True*/;\n double  a_49=(2.0*a_2)/*True*/;\n double  a_50=(2.0*a_5)/*True*/;\n double  a_51=(2.0*a_6)/*True*/;\n double  a_52=(a_1-a_47)/*True*/;\n double  a_53=(a_2-a_48)/*True*/;\n double  a_54=(a_3-a_49)/*True*/;\n double  a_55=(a_6-a_50)/*True*/;\n double  a_56=(a_7-a_51)/*True*/;\n double  a_57=(a_52+a)/*True*/;\n double  a_58=(a_53+a_0)/*True*/;\n double  a_59=(a_54+a_1)/*True*/;\n double  a_60=(a_55+a_4)/*True*/;\n double  a_61=(a_56+a_5)/*True*/;\n double  a_62=(a_44*a_57)/*True*/;\n double  a_63=(a_45*a_58)/*True*/;\n double  a_64=(a_46*a_59)/*True*/;\n double  a_65=(a_44*a_60)/*True*/;\n double  a_66=(a_45*a_61)/*True*/;\n double  a_67=(-a_62)/*True*/;\n double  a_68=(-a_63)/*True*/;\n double  a_69=(-a_64)/*True*/;\n double  a_70=(-a_65)/*True*/;\n double  a_71=(-a_66)/*True*/;\n double  a_72=(a_39+a_67)/*True*/;\n double  a_73=(a_40+a_68)/*True*/;\n double  a_74=(a_41+a_69)/*True*/;\n double  a_75=(a_42+a_70)/*True*/;\n double  a_76=(a_43+a_71)/*True*/;\n double  a_77=(a_36*a_72)/*True*/;\n double  a_78=(a_37*a_73)/*True*/;\n double  a_79=(a_38*a_74)/*True*/;\n double  a_80=(a_36*a_75)/*True*/;\n double  a_81=(a_37*a_76)/*True*/;\n double  a_82=(a_0-a_77)/*True*/;\n double  a_83=(a_1-a_78)/*True*/;\n double  a_84=(a_2-a_79)/*True*/;\n double  a_85=(a_5-a_80)/*True*/;\n double  a_86=(a_6-a_81)/*True*/;\n double  a_87=(a_1+a_83)/*True*/;\n  double  a_88=(a_87/2.0)/*True*/;\n double  a_89=(0.3/1.0)/*True*/;\n  double  a_90=(a_89/2.0)/*True*/;\n double  a_91=(a_86-a_85)/*True*/;\n double  a_92=(0.2*1.0)/*True*/;\n  double  a_93=(2.0*a_83)/*True*/;\n double  a_94=(a_84-a_93)/*True*/;\n double  a_95=(a_94+a_82)/*True*/;\n double  a_96=(a_92*a_95)/*True*/;\n double  a_97=(-a_96)/*True*/;\n double  a_98=(a_91+a_97)/*True*/;\n double  a_99=(a_90*a_98)/*True*/;\n double  a_100=(a_88-a_99)/*True*/;\n \nr[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-4"}),Raw ")+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=a_100;\n\n}\n"]),Raw "\n",PotentialSubroutine (Src [Raw "\nfor (int  ix = ",Hole (Typed {_holeType = "int", _holeExpr = "8"}),Raw " ; ix < ",Hole (Typed {_holeType = "int", _holeExpr = "150"}),Raw " ; ix += 1 ){\n             double  a=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-8"}),Raw ")]/*True*/;\n double  a_0=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-7"}),Raw ")]/*True*/;\n double  a_1=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-6"}),Raw ")]/*True*/;\n double  a_2=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-5"}),Raw ")]/*True*/;\n double  a_3=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-4"}),Raw ")]/*True*/;\n double  a_4=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-8"}),Raw ")]/*True*/;\n double  a_5=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-7"}),Raw ")]/*True*/;\n double  a_6=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-6"}),Raw ")]/*True*/;\n double  a_7=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-5"}),Raw ")]/*True*/;\n double  a_8=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-4"}),Raw ")]/*True*/;\n double  a_9=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-8"}),Raw ")]/*True*/;\n double  a_10=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-7"}),Raw ")]/*True*/;\n double  a_11=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-6"}),Raw ")]/*True*/;\n double  a_12=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-5"}),Raw ")]/*True*/;\n double  a_13=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-4"}),Raw ")]/*True*/;\n     double  a_14=(1.4-1.0)/*True*/;\n double  a_15=(1.4-1.0)/*True*/;\n double  a_16=(1.4-1.0)/*True*/;\n double  a_17=(1.4-1.0)/*True*/;\n double  a_18=(a_14*a_10)/*True*/;\n double  a_19=(a_15*a_11)/*True*/;\n double  a_20=(a_16*a_12)/*True*/;\n double  a_21=(a_17*a_13)/*True*/;\n     double  a_22=(3.0-1.4)/*True*/;\n double  a_23=(3.0-1.4)/*True*/;\n double  a_24=(3.0-1.4)/*True*/;\n double  a_25=(3.0-1.4)/*True*/;\n     double  a_26=pow(a_5,2.0)/*True*/;\n double  a_27=pow(a_6,2.0)/*True*/;\n double  a_28=pow(a_7,2.0)/*True*/;\n double  a_29=pow(a_8,2.0)/*True*/;\n double  a_30=(a_22*a_26)/*True*/;\n double  a_31=(a_23*a_27)/*True*/;\n double  a_32=(a_24*a_28)/*True*/;\n double  a_33=(a_25*a_29)/*True*/;\n     double  a_34=(2.0*a_0)/*True*/;\n double  a_35=(2.0*a_1)/*True*/;\n double  a_36=(2.0*a_2)/*True*/;\n double  a_37=(2.0*a_3)/*True*/;\n double  a_38=(a_30/a_34)/*True*/;\n double  a_39=(a_31/a_35)/*True*/;\n double  a_40=(a_32/a_36)/*True*/;\n double  a_41=(a_33/a_37)/*True*/;\n double  a_42=(a_18+a_38)/*True*/;\n double  a_43=(a_19+a_39)/*True*/;\n double  a_44=(a_20+a_40)/*True*/;\n double  a_45=(a_21+a_41)/*True*/;\n double  a_46=(1.4*a_10)/*True*/;\n double  a_47=(1.4*a_11)/*True*/;\n double  a_48=(1.4*a_12)/*True*/;\n double  a_49=(a_46*a_5)/*True*/;\n double  a_50=(a_47*a_6)/*True*/;\n double  a_51=(a_48*a_7)/*True*/;\n double  a_52=(a_49/a_0)/*True*/;\n double  a_53=(a_50/a_1)/*True*/;\n double  a_54=(a_51/a_2)/*True*/;\n    double  a_55=(1.4-1.0)/*True*/;\n double  a_56=(1.4-1.0)/*True*/;\n double  a_57=(1.4-1.0)/*True*/;\n    double  a_58=pow(a_5,3.0)/*True*/;\n double  a_59=pow(a_6,3.0)/*True*/;\n double  a_60=pow(a_7,3.0)/*True*/;\n double  a_61=(a_55*a_58)/*True*/;\n double  a_62=(a_56*a_59)/*True*/;\n double  a_63=(a_57*a_60)/*True*/;\n       double  a_64=pow(a_0,2.0)/*True*/;\n double  a_65=pow(a_1,2.0)/*True*/;\n double  a_66=pow(a_2,2.0)/*True*/;\n double  a_67=(2.0*a_64)/*True*/;\n double  a_68=(2.0*a_65)/*True*/;\n double  a_69=(2.0*a_66)/*True*/;\n double  a_70=(a_61/a_67)/*True*/;\n double  a_71=(a_62/a_68)/*True*/;\n double  a_72=(a_63/a_69)/*True*/;\n double  a_73=(a_52-a_70)/*True*/;\n double  a_74=(a_53-a_71)/*True*/;\n double  a_75=(a_54-a_72)/*True*/;\n double  a_76=(0.3/1.0)/*True*/;\n double  a_77=(0.3/1.0)/*True*/;\n double  a_78=(0.3/1.0)/*True*/;\n double  a_79=(a_6-a_5)/*True*/;\n double  a_80=(a_7-a_6)/*True*/;\n double  a_81=(a_43-a_42)/*True*/;\n double  a_82=(a_44-a_43)/*True*/;\n double  a_83=(a_45-a_44)/*True*/;\n double  a_84=(a_74-a_73)/*True*/;\n double  a_85=(a_75-a_74)/*True*/;\n double  a_86=(0.2*1.0)/*True*/;\n double  a_87=(0.2*1.0)/*True*/;\n double  a_88=(0.2*1.0)/*True*/;\n    double  a_89=(2.0*a_0)/*True*/;\n double  a_90=(2.0*a_1)/*True*/;\n double  a_91=(2.0*a_5)/*True*/;\n double  a_92=(2.0*a_6)/*True*/;\n double  a_93=(2.0*a_7)/*True*/;\n double  a_94=(2.0*a_10)/*True*/;\n double  a_95=(2.0*a_11)/*True*/;\n double  a_96=(a_1-a_89)/*True*/;\n double  a_97=(a_2-a_90)/*True*/;\n double  a_98=(a_6-a_91)/*True*/;\n double  a_99=(a_7-a_92)/*True*/;\n double  a_100=(a_8-a_93)/*True*/;\n double  a_101=(a_11-a_94)/*True*/;\n double  a_102=(a_12-a_95)/*True*/;\n double  a_103=(a_96+a)/*True*/;\n double  a_104=(a_97+a_0)/*True*/;\n double  a_105=(a_98+a_4)/*True*/;\n double  a_106=(a_99+a_5)/*True*/;\n double  a_107=(a_100+a_6)/*True*/;\n double  a_108=(a_101+a_9)/*True*/;\n double  a_109=(a_102+a_10)/*True*/;\n double  a_110=(a_86*a_103)/*True*/;\n double  a_111=(a_87*a_104)/*True*/;\n double  a_112=(a_86*a_105)/*True*/;\n double  a_113=(a_87*a_106)/*True*/;\n double  a_114=(a_88*a_107)/*True*/;\n double  a_115=(a_86*a_108)/*True*/;\n double  a_116=(a_87*a_109)/*True*/;\n double  a_117=(-a_110)/*True*/;\n double  a_118=(-a_111)/*True*/;\n double  a_119=(-a_112)/*True*/;\n double  a_120=(-a_113)/*True*/;\n double  a_121=(-a_114)/*True*/;\n double  a_122=(-a_115)/*True*/;\n double  a_123=(-a_116)/*True*/;\n double  a_124=(a_79+a_117)/*True*/;\n double  a_125=(a_80+a_118)/*True*/;\n double  a_126=(a_81+a_119)/*True*/;\n double  a_127=(a_82+a_120)/*True*/;\n double  a_128=(a_83+a_121)/*True*/;\n double  a_129=(a_84+a_122)/*True*/;\n double  a_130=(a_85+a_123)/*True*/;\n double  a_131=(a_76*a_124)/*True*/;\n double  a_132=(a_77*a_125)/*True*/;\n double  a_133=(a_76*a_126)/*True*/;\n double  a_134=(a_77*a_127)/*True*/;\n double  a_135=(a_78*a_128)/*True*/;\n double  a_136=(a_76*a_129)/*True*/;\n double  a_137=(a_77*a_130)/*True*/;\n double  a_138=(a_0-a_131)/*True*/;\n double  a_139=(a_1-a_132)/*True*/;\n double  a_140=(a_5-a_133)/*True*/;\n double  a_141=(a_6-a_134)/*True*/;\n double  a_142=(a_7-a_135)/*True*/;\n double  a_143=(a_10-a_136)/*True*/;\n double  a_144=(a_11-a_137)/*True*/;\n   double  a_145=(1.4-1.0)/*True*/;\n double  a_146=(1.4-1.0)/*True*/;\n double  a_147=(a_145*a_143)/*True*/;\n double  a_148=(a_146*a_144)/*True*/;\n   double  a_149=(3.0-1.4)/*True*/;\n double  a_150=(3.0-1.4)/*True*/;\n   double  a_151=pow(a_140,2.0)/*True*/;\n double  a_152=pow(a_141,2.0)/*True*/;\n double  a_153=(a_149*a_151)/*True*/;\n double  a_154=(a_150*a_152)/*True*/;\n   double  a_155=(2.0*a_138)/*True*/;\n double  a_156=(2.0*a_139)/*True*/;\n double  a_157=(a_153/a_155)/*True*/;\n double  a_158=(a_154/a_156)/*True*/;\n double  a_159=(a_147+a_157)/*True*/;\n double  a_160=(a_148+a_158)/*True*/;\n double  a_161=(a_6+a_141)/*True*/;\n  double  a_162=(a_161/2.0)/*True*/;\n double  a_163=(0.3/1.0)/*True*/;\n  double  a_164=(a_163/2.0)/*True*/;\n double  a_165=(a_160-a_159)/*True*/;\n double  a_166=(0.2*1.0)/*True*/;\n  double  a_167=(2.0*a_141)/*True*/;\n double  a_168=(a_142-a_167)/*True*/;\n double  a_169=(a_168+a_140)/*True*/;\n double  a_170=(a_166*a_169)/*True*/;\n double  a_171=(-a_170)/*True*/;\n double  a_172=(a_165+a_171)/*True*/;\n double  a_173=(a_164*a_172)/*True*/;\n double  a_174=(a_162-a_173)/*True*/;\n \nm[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-4"}),Raw ")+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=a_174;\n\n}\n"]),Raw "\n",PotentialSubroutine (Src [Raw "\nfor (int  ix = ",Hole (Typed {_holeType = "int", _holeExpr = "8"}),Raw " ; ix < ",Hole (Typed {_holeType = "int", _holeExpr = "150"}),Raw " ; ix += 1 ){\n             double  a=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-8"}),Raw ")]/*True*/;\n double  a_0=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-7"}),Raw ")]/*True*/;\n double  a_1=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-6"}),Raw ")]/*True*/;\n double  a_2=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-5"}),Raw ")]/*True*/;\n double  a_3=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-4"}),Raw ")]/*True*/;\n double  a_4=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-8"}),Raw ")]/*True*/;\n double  a_5=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-7"}),Raw ")]/*True*/;\n double  a_6=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-6"}),Raw ")]/*True*/;\n double  a_7=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-5"}),Raw ")]/*True*/;\n double  a_8=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-4"}),Raw ")]/*True*/;\n double  a_9=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-8"}),Raw ")]/*True*/;\n double  a_10=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-7"}),Raw ")]/*True*/;\n double  a_11=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-6"}),Raw ")]/*True*/;\n double  a_12=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-5"}),Raw ")]/*True*/;\n double  a_13=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-4"}),Raw ")]/*True*/;\n    double  a_14=(1.4-1.0)/*True*/;\n double  a_15=(1.4-1.0)/*True*/;\n double  a_16=(1.4-1.0)/*True*/;\n double  a_17=(a_14*a_10)/*True*/;\n double  a_18=(a_15*a_11)/*True*/;\n double  a_19=(a_16*a_12)/*True*/;\n    double  a_20=(3.0-1.4)/*True*/;\n double  a_21=(3.0-1.4)/*True*/;\n double  a_22=(3.0-1.4)/*True*/;\n    double  a_23=pow(a_5,2.0)/*True*/;\n double  a_24=pow(a_6,2.0)/*True*/;\n double  a_25=pow(a_7,2.0)/*True*/;\n double  a_26=(a_20*a_23)/*True*/;\n double  a_27=(a_21*a_24)/*True*/;\n double  a_28=(a_22*a_25)/*True*/;\n    double  a_29=(2.0*a_0)/*True*/;\n double  a_30=(2.0*a_1)/*True*/;\n double  a_31=(2.0*a_2)/*True*/;\n double  a_32=(a_26/a_29)/*True*/;\n double  a_33=(a_27/a_30)/*True*/;\n double  a_34=(a_28/a_31)/*True*/;\n double  a_35=(a_17+a_32)/*True*/;\n double  a_36=(a_18+a_33)/*True*/;\n double  a_37=(a_19+a_34)/*True*/;\n double  a_38=(1.4*a_10)/*True*/;\n double  a_39=(1.4*a_11)/*True*/;\n double  a_40=(1.4*a_12)/*True*/;\n double  a_41=(1.4*a_13)/*True*/;\n double  a_42=(a_38*a_5)/*True*/;\n double  a_43=(a_39*a_6)/*True*/;\n double  a_44=(a_40*a_7)/*True*/;\n double  a_45=(a_41*a_8)/*True*/;\n double  a_46=(a_42/a_0)/*True*/;\n double  a_47=(a_43/a_1)/*True*/;\n double  a_48=(a_44/a_2)/*True*/;\n double  a_49=(a_45/a_3)/*True*/;\n     double  a_50=(1.4-1.0)/*True*/;\n double  a_51=(1.4-1.0)/*True*/;\n double  a_52=(1.4-1.0)/*True*/;\n double  a_53=(1.4-1.0)/*True*/;\n     double  a_54=pow(a_5,3.0)/*True*/;\n double  a_55=pow(a_6,3.0)/*True*/;\n double  a_56=pow(a_7,3.0)/*True*/;\n double  a_57=pow(a_8,3.0)/*True*/;\n double  a_58=(a_50*a_54)/*True*/;\n double  a_59=(a_51*a_55)/*True*/;\n double  a_60=(a_52*a_56)/*True*/;\n double  a_61=(a_53*a_57)/*True*/;\n         double  a_62=pow(a_0,2.0)/*True*/;\n double  a_63=pow(a_1,2.0)/*True*/;\n double  a_64=pow(a_2,2.0)/*True*/;\n double  a_65=pow(a_3,2.0)/*True*/;\n double  a_66=(2.0*a_62)/*True*/;\n double  a_67=(2.0*a_63)/*True*/;\n double  a_68=(2.0*a_64)/*True*/;\n double  a_69=(2.0*a_65)/*True*/;\n double  a_70=(a_58/a_66)/*True*/;\n double  a_71=(a_59/a_67)/*True*/;\n double  a_72=(a_60/a_68)/*True*/;\n double  a_73=(a_61/a_69)/*True*/;\n double  a_74=(a_46-a_70)/*True*/;\n double  a_75=(a_47-a_71)/*True*/;\n double  a_76=(a_48-a_72)/*True*/;\n double  a_77=(a_49-a_73)/*True*/;\n double  a_78=(0.3/1.0)/*True*/;\n double  a_79=(0.3/1.0)/*True*/;\n double  a_80=(0.3/1.0)/*True*/;\n double  a_81=(a_6-a_5)/*True*/;\n double  a_82=(a_7-a_6)/*True*/;\n double  a_83=(a_36-a_35)/*True*/;\n double  a_84=(a_37-a_36)/*True*/;\n double  a_85=(a_75-a_74)/*True*/;\n double  a_86=(a_76-a_75)/*True*/;\n double  a_87=(a_77-a_76)/*True*/;\n double  a_88=(0.2*1.0)/*True*/;\n double  a_89=(0.2*1.0)/*True*/;\n double  a_90=(0.2*1.0)/*True*/;\n    double  a_91=(2.0*a_0)/*True*/;\n double  a_92=(2.0*a_1)/*True*/;\n double  a_93=(2.0*a_5)/*True*/;\n double  a_94=(2.0*a_6)/*True*/;\n double  a_95=(2.0*a_10)/*True*/;\n double  a_96=(2.0*a_11)/*True*/;\n double  a_97=(2.0*a_12)/*True*/;\n double  a_98=(a_1-a_91)/*True*/;\n double  a_99=(a_2-a_92)/*True*/;\n double  a_100=(a_6-a_93)/*True*/;\n double  a_101=(a_7-a_94)/*True*/;\n double  a_102=(a_11-a_95)/*True*/;\n double  a_103=(a_12-a_96)/*True*/;\n double  a_104=(a_13-a_97)/*True*/;\n double  a_105=(a_98+a)/*True*/;\n double  a_106=(a_99+a_0)/*True*/;\n double  a_107=(a_100+a_4)/*True*/;\n double  a_108=(a_101+a_5)/*True*/;\n double  a_109=(a_102+a_9)/*True*/;\n double  a_110=(a_103+a_10)/*True*/;\n double  a_111=(a_104+a_11)/*True*/;\n double  a_112=(a_88*a_105)/*True*/;\n double  a_113=(a_89*a_106)/*True*/;\n double  a_114=(a_88*a_107)/*True*/;\n double  a_115=(a_89*a_108)/*True*/;\n double  a_116=(a_88*a_109)/*True*/;\n double  a_117=(a_89*a_110)/*True*/;\n double  a_118=(a_90*a_111)/*True*/;\n double  a_119=(-a_112)/*True*/;\n double  a_120=(-a_113)/*True*/;\n double  a_121=(-a_114)/*True*/;\n double  a_122=(-a_115)/*True*/;\n double  a_123=(-a_116)/*True*/;\n double  a_124=(-a_117)/*True*/;\n double  a_125=(-a_118)/*True*/;\n double  a_126=(a_81+a_119)/*True*/;\n double  a_127=(a_82+a_120)/*True*/;\n double  a_128=(a_83+a_121)/*True*/;\n double  a_129=(a_84+a_122)/*True*/;\n double  a_130=(a_85+a_123)/*True*/;\n double  a_131=(a_86+a_124)/*True*/;\n double  a_132=(a_87+a_125)/*True*/;\n double  a_133=(a_78*a_126)/*True*/;\n double  a_134=(a_79*a_127)/*True*/;\n double  a_135=(a_78*a_128)/*True*/;\n double  a_136=(a_79*a_129)/*True*/;\n double  a_137=(a_78*a_130)/*True*/;\n double  a_138=(a_79*a_131)/*True*/;\n double  a_139=(a_80*a_132)/*True*/;\n double  a_140=(a_0-a_133)/*True*/;\n double  a_141=(a_1-a_134)/*True*/;\n double  a_142=(a_5-a_135)/*True*/;\n double  a_143=(a_6-a_136)/*True*/;\n double  a_144=(a_10-a_137)/*True*/;\n double  a_145=(a_11-a_138)/*True*/;\n double  a_146=(a_12-a_139)/*True*/;\n double  a_147=(1.4*a_144)/*True*/;\n double  a_148=(1.4*a_145)/*True*/;\n double  a_149=(a_147*a_142)/*True*/;\n double  a_150=(a_148*a_143)/*True*/;\n double  a_151=(a_149/a_140)/*True*/;\n double  a_152=(a_150/a_141)/*True*/;\n   double  a_153=(1.4-1.0)/*True*/;\n double  a_154=(1.4-1.0)/*True*/;\n   double  a_155=pow(a_142,3.0)/*True*/;\n double  a_156=pow(a_143,3.0)/*True*/;\n double  a_157=(a_153*a_155)/*True*/;\n double  a_158=(a_154*a_156)/*True*/;\n     double  a_159=pow(a_140,2.0)/*True*/;\n double  a_160=pow(a_141,2.0)/*True*/;\n double  a_161=(2.0*a_159)/*True*/;\n double  a_162=(2.0*a_160)/*True*/;\n double  a_163=(a_157/a_161)/*True*/;\n double  a_164=(a_158/a_162)/*True*/;\n double  a_165=(a_151-a_163)/*True*/;\n double  a_166=(a_152-a_164)/*True*/;\n double  a_167=(a_11+a_145)/*True*/;\n  double  a_168=(a_167/2.0)/*True*/;\n double  a_169=(0.3/1.0)/*True*/;\n  double  a_170=(a_169/2.0)/*True*/;\n double  a_171=(a_166-a_165)/*True*/;\n double  a_172=(0.2*1.0)/*True*/;\n  double  a_173=(2.0*a_145)/*True*/;\n double  a_174=(a_146-a_173)/*True*/;\n double  a_175=(a_174+a_144)/*True*/;\n double  a_176=(a_172*a_175)/*True*/;\n double  a_177=(-a_176)/*True*/;\n double  a_178=(a_171+a_177)/*True*/;\n double  a_179=(a_170*a_178)/*True*/;\n double  a_180=(a_168-a_179)/*True*/;\n \ne[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-4"}),Raw ")+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=a_180;\n\n}\n"]),Raw "\n}\n"]),("Formura_internal_1.c",Src [Raw "void Formura_internal_1(){\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\ne[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "304"}),Raw ")]=Facet_1_src__0_dest__1_Recv.Ridge_1_St_e[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nm[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "304"}),Raw ")]=Facet_1_src__0_dest__1_Recv.Ridge_1_St_m[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nr[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "304"}),Raw ")]=Facet_1_src__0_dest__1_Recv.Ridge_1_St_r[ix];}\n\n",PotentialSubroutine (Src [Raw "\nfor (int  ix = ",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw " ; ix < ",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw " ; ix += 1 ){\n            double  a=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "146"}),Raw ")]/*True*/;\n double  a_0=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "147"}),Raw ")]/*True*/;\n double  a_1=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "148"}),Raw ")]/*True*/;\n double  a_2=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "149"}),Raw ")]/*True*/;\n double  a_3=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "150"}),Raw ")]/*True*/;\n double  a_4=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "146"}),Raw ")]/*True*/;\n double  a_5=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "147"}),Raw ")]/*True*/;\n double  a_6=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "148"}),Raw ")]/*True*/;\n double  a_7=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "149"}),Raw ")]/*True*/;\n double  a_8=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "150"}),Raw ")]/*True*/;\n double  a_9=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "147"}),Raw ")]/*True*/;\n double  a_10=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "148"}),Raw ")]/*True*/;\n double  a_11=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "149"}),Raw ")]/*True*/;\n    double  a_12=(1.4-1.0)/*True*/;\n double  a_13=(1.4-1.0)/*True*/;\n double  a_14=(1.4-1.0)/*True*/;\n double  a_15=(a_12*a_9)/*True*/;\n double  a_16=(a_13*a_10)/*True*/;\n double  a_17=(a_14*a_11)/*True*/;\n    double  a_18=(3.0-1.4)/*True*/;\n double  a_19=(3.0-1.4)/*True*/;\n double  a_20=(3.0-1.4)/*True*/;\n    double  a_21=pow(a_5,2.0)/*True*/;\n double  a_22=pow(a_6,2.0)/*True*/;\n double  a_23=pow(a_7,2.0)/*True*/;\n double  a_24=(a_18*a_21)/*True*/;\n double  a_25=(a_19*a_22)/*True*/;\n double  a_26=(a_20*a_23)/*True*/;\n    double  a_27=(2.0*a_0)/*True*/;\n double  a_28=(2.0*a_1)/*True*/;\n double  a_29=(2.0*a_2)/*True*/;\n double  a_30=(a_24/a_27)/*True*/;\n double  a_31=(a_25/a_28)/*True*/;\n double  a_32=(a_26/a_29)/*True*/;\n double  a_33=(a_15+a_30)/*True*/;\n double  a_34=(a_16+a_31)/*True*/;\n double  a_35=(a_17+a_32)/*True*/;\n double  a_36=(0.3/1.0)/*True*/;\n double  a_37=(0.3/1.0)/*True*/;\n double  a_38=(0.3/1.0)/*True*/;\n double  a_39=(a_6-a_5)/*True*/;\n double  a_40=(a_7-a_6)/*True*/;\n double  a_41=(a_8-a_7)/*True*/;\n double  a_42=(a_34-a_33)/*True*/;\n double  a_43=(a_35-a_34)/*True*/;\n double  a_44=(0.2*1.0)/*True*/;\n double  a_45=(0.2*1.0)/*True*/;\n double  a_46=(0.2*1.0)/*True*/;\n    double  a_47=(2.0*a_0)/*True*/;\n double  a_48=(2.0*a_1)/*True*/;\n double  a_49=(2.0*a_2)/*True*/;\n double  a_50=(2.0*a_5)/*True*/;\n double  a_51=(2.0*a_6)/*True*/;\n double  a_52=(a_1-a_47)/*True*/;\n double  a_53=(a_2-a_48)/*True*/;\n double  a_54=(a_3-a_49)/*True*/;\n double  a_55=(a_6-a_50)/*True*/;\n double  a_56=(a_7-a_51)/*True*/;\n double  a_57=(a_52+a)/*True*/;\n double  a_58=(a_53+a_0)/*True*/;\n double  a_59=(a_54+a_1)/*True*/;\n double  a_60=(a_55+a_4)/*True*/;\n double  a_61=(a_56+a_5)/*True*/;\n double  a_62=(a_44*a_57)/*True*/;\n double  a_63=(a_45*a_58)/*True*/;\n double  a_64=(a_46*a_59)/*True*/;\n double  a_65=(a_44*a_60)/*True*/;\n double  a_66=(a_45*a_61)/*True*/;\n double  a_67=(-a_62)/*True*/;\n double  a_68=(-a_63)/*True*/;\n double  a_69=(-a_64)/*True*/;\n double  a_70=(-a_65)/*True*/;\n double  a_71=(-a_66)/*True*/;\n double  a_72=(a_39+a_67)/*True*/;\n double  a_73=(a_40+a_68)/*True*/;\n double  a_74=(a_41+a_69)/*True*/;\n double  a_75=(a_42+a_70)/*True*/;\n double  a_76=(a_43+a_71)/*True*/;\n double  a_77=(a_36*a_72)/*True*/;\n double  a_78=(a_37*a_73)/*True*/;\n double  a_79=(a_38*a_74)/*True*/;\n double  a_80=(a_36*a_75)/*True*/;\n double  a_81=(a_37*a_76)/*True*/;\n double  a_82=(a_0-a_77)/*True*/;\n double  a_83=(a_1-a_78)/*True*/;\n double  a_84=(a_2-a_79)/*True*/;\n double  a_85=(a_5-a_80)/*True*/;\n double  a_86=(a_6-a_81)/*True*/;\n double  a_87=(a_1+a_83)/*True*/;\n  double  a_88=(a_87/2.0)/*True*/;\n double  a_89=(0.3/1.0)/*True*/;\n  double  a_90=(a_89/2.0)/*True*/;\n double  a_91=(a_86-a_85)/*True*/;\n double  a_92=(0.2*1.0)/*True*/;\n  double  a_93=(2.0*a_83)/*True*/;\n double  a_94=(a_84-a_93)/*True*/;\n double  a_95=(a_94+a_82)/*True*/;\n double  a_96=(a_92*a_95)/*True*/;\n double  a_97=(-a_96)/*True*/;\n double  a_98=(a_91+a_97)/*True*/;\n double  a_99=(a_90*a_98)/*True*/;\n double  a_100=(a_88-a_99)/*True*/;\n \n",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=(+a_100);\n\n}\n"]),Raw "\n",PotentialSubroutine (Src [Raw "\nfor (int  ix = ",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw " ; ix < ",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw " ; ix += 1 ){\n             double  a=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "146"}),Raw ")]/*True*/;\n double  a_0=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "147"}),Raw ")]/*True*/;\n double  a_1=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "148"}),Raw ")]/*True*/;\n double  a_2=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "149"}),Raw ")]/*True*/;\n double  a_3=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "150"}),Raw ")]/*True*/;\n double  a_4=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "146"}),Raw ")]/*True*/;\n double  a_5=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "147"}),Raw ")]/*True*/;\n double  a_6=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "148"}),Raw ")]/*True*/;\n double  a_7=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "149"}),Raw ")]/*True*/;\n double  a_8=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "150"}),Raw ")]/*True*/;\n double  a_9=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "146"}),Raw ")]/*True*/;\n double  a_10=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "147"}),Raw ")]/*True*/;\n double  a_11=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "148"}),Raw ")]/*True*/;\n double  a_12=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "149"}),Raw ")]/*True*/;\n double  a_13=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "150"}),Raw ")]/*True*/;\n     double  a_14=(1.4-1.0)/*True*/;\n double  a_15=(1.4-1.0)/*True*/;\n double  a_16=(1.4-1.0)/*True*/;\n double  a_17=(1.4-1.0)/*True*/;\n double  a_18=(a_14*a_10)/*True*/;\n double  a_19=(a_15*a_11)/*True*/;\n double  a_20=(a_16*a_12)/*True*/;\n double  a_21=(a_17*a_13)/*True*/;\n     double  a_22=(3.0-1.4)/*True*/;\n double  a_23=(3.0-1.4)/*True*/;\n double  a_24=(3.0-1.4)/*True*/;\n double  a_25=(3.0-1.4)/*True*/;\n     double  a_26=pow(a_5,2.0)/*True*/;\n double  a_27=pow(a_6,2.0)/*True*/;\n double  a_28=pow(a_7,2.0)/*True*/;\n double  a_29=pow(a_8,2.0)/*True*/;\n double  a_30=(a_22*a_26)/*True*/;\n double  a_31=(a_23*a_27)/*True*/;\n double  a_32=(a_24*a_28)/*True*/;\n double  a_33=(a_25*a_29)/*True*/;\n     double  a_34=(2.0*a_0)/*True*/;\n double  a_35=(2.0*a_1)/*True*/;\n double  a_36=(2.0*a_2)/*True*/;\n double  a_37=(2.0*a_3)/*True*/;\n double  a_38=(a_30/a_34)/*True*/;\n double  a_39=(a_31/a_35)/*True*/;\n double  a_40=(a_32/a_36)/*True*/;\n double  a_41=(a_33/a_37)/*True*/;\n double  a_42=(a_18+a_38)/*True*/;\n double  a_43=(a_19+a_39)/*True*/;\n double  a_44=(a_20+a_40)/*True*/;\n double  a_45=(a_21+a_41)/*True*/;\n double  a_46=(1.4*a_10)/*True*/;\n double  a_47=(1.4*a_11)/*True*/;\n double  a_48=(1.4*a_12)/*True*/;\n double  a_49=(a_46*a_5)/*True*/;\n double  a_50=(a_47*a_6)/*True*/;\n double  a_51=(a_48*a_7)/*True*/;\n double  a_52=(a_49/a_0)/*True*/;\n double  a_53=(a_50/a_1)/*True*/;\n double  a_54=(a_51/a_2)/*True*/;\n    double  a_55=(1.4-1.0)/*True*/;\n double  a_56=(1.4-1.0)/*True*/;\n double  a_57=(1.4-1.0)/*True*/;\n    double  a_58=pow(a_5,3.0)/*True*/;\n double  a_59=pow(a_6,3.0)/*True*/;\n double  a_60=pow(a_7,3.0)/*True*/;\n double  a_61=(a_55*a_58)/*True*/;\n double  a_62=(a_56*a_59)/*True*/;\n double  a_63=(a_57*a_60)/*True*/;\n       double  a_64=pow(a_0,2.0)/*True*/;\n double  a_65=pow(a_1,2.0)/*True*/;\n double  a_66=pow(a_2,2.0)/*True*/;\n double  a_67=(2.0*a_64)/*True*/;\n double  a_68=(2.0*a_65)/*True*/;\n double  a_69=(2.0*a_66)/*True*/;\n double  a_70=(a_61/a_67)/*True*/;\n double  a_71=(a_62/a_68)/*True*/;\n double  a_72=(a_63/a_69)/*True*/;\n double  a_73=(a_52-a_70)/*True*/;\n double  a_74=(a_53-a_71)/*True*/;\n double  a_75=(a_54-a_72)/*True*/;\n double  a_76=(0.3/1.0)/*True*/;\n double  a_77=(0.3/1.0)/*True*/;\n double  a_78=(0.3/1.0)/*True*/;\n double  a_79=(a_6-a_5)/*True*/;\n double  a_80=(a_7-a_6)/*True*/;\n double  a_81=(a_43-a_42)/*True*/;\n double  a_82=(a_44-a_43)/*True*/;\n double  a_83=(a_45-a_44)/*True*/;\n double  a_84=(a_74-a_73)/*True*/;\n double  a_85=(a_75-a_74)/*True*/;\n double  a_86=(0.2*1.0)/*True*/;\n double  a_87=(0.2*1.0)/*True*/;\n double  a_88=(0.2*1.0)/*True*/;\n    double  a_89=(2.0*a_0)/*True*/;\n double  a_90=(2.0*a_1)/*True*/;\n double  a_91=(2.0*a_5)/*True*/;\n double  a_92=(2.0*a_6)/*True*/;\n double  a_93=(2.0*a_7)/*True*/;\n double  a_94=(2.0*a_10)/*True*/;\n double  a_95=(2.0*a_11)/*True*/;\n double  a_96=(a_1-a_89)/*True*/;\n double  a_97=(a_2-a_90)/*True*/;\n double  a_98=(a_6-a_91)/*True*/;\n double  a_99=(a_7-a_92)/*True*/;\n double  a_100=(a_8-a_93)/*True*/;\n double  a_101=(a_11-a_94)/*True*/;\n double  a_102=(a_12-a_95)/*True*/;\n double  a_103=(a_96+a)/*True*/;\n double  a_104=(a_97+a_0)/*True*/;\n double  a_105=(a_98+a_4)/*True*/;\n double  a_106=(a_99+a_5)/*True*/;\n double  a_107=(a_100+a_6)/*True*/;\n double  a_108=(a_101+a_9)/*True*/;\n double  a_109=(a_102+a_10)/*True*/;\n double  a_110=(a_86*a_103)/*True*/;\n double  a_111=(a_87*a_104)/*True*/;\n double  a_112=(a_86*a_105)/*True*/;\n double  a_113=(a_87*a_106)/*True*/;\n double  a_114=(a_88*a_107)/*True*/;\n double  a_115=(a_86*a_108)/*True*/;\n double  a_116=(a_87*a_109)/*True*/;\n double  a_117=(-a_110)/*True*/;\n double  a_118=(-a_111)/*True*/;\n double  a_119=(-a_112)/*True*/;\n double  a_120=(-a_113)/*True*/;\n double  a_121=(-a_114)/*True*/;\n double  a_122=(-a_115)/*True*/;\n double  a_123=(-a_116)/*True*/;\n double  a_124=(a_79+a_117)/*True*/;\n double  a_125=(a_80+a_118)/*True*/;\n double  a_126=(a_81+a_119)/*True*/;\n double  a_127=(a_82+a_120)/*True*/;\n double  a_128=(a_83+a_121)/*True*/;\n double  a_129=(a_84+a_122)/*True*/;\n double  a_130=(a_85+a_123)/*True*/;\n double  a_131=(a_76*a_124)/*True*/;\n double  a_132=(a_77*a_125)/*True*/;\n double  a_133=(a_76*a_126)/*True*/;\n double  a_134=(a_77*a_127)/*True*/;\n double  a_135=(a_78*a_128)/*True*/;\n double  a_136=(a_76*a_129)/*True*/;\n double  a_137=(a_77*a_130)/*True*/;\n double  a_138=(a_0-a_131)/*True*/;\n double  a_139=(a_1-a_132)/*True*/;\n double  a_140=(a_5-a_133)/*True*/;\n double  a_141=(a_6-a_134)/*True*/;\n double  a_142=(a_7-a_135)/*True*/;\n double  a_143=(a_10-a_136)/*True*/;\n double  a_144=(a_11-a_137)/*True*/;\n   double  a_145=(1.4-1.0)/*True*/;\n double  a_146=(1.4-1.0)/*True*/;\n double  a_147=(a_145*a_143)/*True*/;\n double  a_148=(a_146*a_144)/*True*/;\n   double  a_149=(3.0-1.4)/*True*/;\n double  a_150=(3.0-1.4)/*True*/;\n   double  a_151=pow(a_140,2.0)/*True*/;\n double  a_152=pow(a_141,2.0)/*True*/;\n double  a_153=(a_149*a_151)/*True*/;\n double  a_154=(a_150*a_152)/*True*/;\n   double  a_155=(2.0*a_138)/*True*/;\n double  a_156=(2.0*a_139)/*True*/;\n double  a_157=(a_153/a_155)/*True*/;\n double  a_158=(a_154/a_156)/*True*/;\n double  a_159=(a_147+a_157)/*True*/;\n double  a_160=(a_148+a_158)/*True*/;\n double  a_161=(a_6+a_141)/*True*/;\n  double  a_162=(a_161/2.0)/*True*/;\n double  a_163=(0.3/1.0)/*True*/;\n  double  a_164=(a_163/2.0)/*True*/;\n double  a_165=(a_160-a_159)/*True*/;\n double  a_166=(0.2*1.0)/*True*/;\n  double  a_167=(2.0*a_141)/*True*/;\n double  a_168=(a_142-a_167)/*True*/;\n double  a_169=(a_168+a_140)/*True*/;\n double  a_170=(a_166*a_169)/*True*/;\n double  a_171=(-a_170)/*True*/;\n double  a_172=(a_165+a_171)/*True*/;\n double  a_173=(a_164*a_172)/*True*/;\n double  a_174=(a_162-a_173)/*True*/;\n \n",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=(+a_174);\n\n}\n"]),Raw "\n",PotentialSubroutine (Src [Raw "\nfor (int  ix = ",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw " ; ix < ",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw " ; ix += 1 ){\n             double  a=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "146"}),Raw ")]/*True*/;\n double  a_0=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "147"}),Raw ")]/*True*/;\n double  a_1=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "148"}),Raw ")]/*True*/;\n double  a_2=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "149"}),Raw ")]/*True*/;\n double  a_3=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "150"}),Raw ")]/*True*/;\n double  a_4=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "146"}),Raw ")]/*True*/;\n double  a_5=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "147"}),Raw ")]/*True*/;\n double  a_6=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "148"}),Raw ")]/*True*/;\n double  a_7=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "149"}),Raw ")]/*True*/;\n double  a_8=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "150"}),Raw ")]/*True*/;\n double  a_9=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "146"}),Raw ")]/*True*/;\n double  a_10=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "147"}),Raw ")]/*True*/;\n double  a_11=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "148"}),Raw ")]/*True*/;\n double  a_12=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "149"}),Raw ")]/*True*/;\n double  a_13=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "150"}),Raw ")]/*True*/;\n    double  a_14=(1.4-1.0)/*True*/;\n double  a_15=(1.4-1.0)/*True*/;\n double  a_16=(1.4-1.0)/*True*/;\n double  a_17=(a_14*a_10)/*True*/;\n double  a_18=(a_15*a_11)/*True*/;\n double  a_19=(a_16*a_12)/*True*/;\n    double  a_20=(3.0-1.4)/*True*/;\n double  a_21=(3.0-1.4)/*True*/;\n double  a_22=(3.0-1.4)/*True*/;\n    double  a_23=pow(a_5,2.0)/*True*/;\n double  a_24=pow(a_6,2.0)/*True*/;\n double  a_25=pow(a_7,2.0)/*True*/;\n double  a_26=(a_20*a_23)/*True*/;\n double  a_27=(a_21*a_24)/*True*/;\n double  a_28=(a_22*a_25)/*True*/;\n    double  a_29=(2.0*a_0)/*True*/;\n double  a_30=(2.0*a_1)/*True*/;\n double  a_31=(2.0*a_2)/*True*/;\n double  a_32=(a_26/a_29)/*True*/;\n double  a_33=(a_27/a_30)/*True*/;\n double  a_34=(a_28/a_31)/*True*/;\n double  a_35=(a_17+a_32)/*True*/;\n double  a_36=(a_18+a_33)/*True*/;\n double  a_37=(a_19+a_34)/*True*/;\n double  a_38=(1.4*a_10)/*True*/;\n double  a_39=(1.4*a_11)/*True*/;\n double  a_40=(1.4*a_12)/*True*/;\n double  a_41=(1.4*a_13)/*True*/;\n double  a_42=(a_38*a_5)/*True*/;\n double  a_43=(a_39*a_6)/*True*/;\n double  a_44=(a_40*a_7)/*True*/;\n double  a_45=(a_41*a_8)/*True*/;\n double  a_46=(a_42/a_0)/*True*/;\n double  a_47=(a_43/a_1)/*True*/;\n double  a_48=(a_44/a_2)/*True*/;\n double  a_49=(a_45/a_3)/*True*/;\n     double  a_50=(1.4-1.0)/*True*/;\n double  a_51=(1.4-1.0)/*True*/;\n double  a_52=(1.4-1.0)/*True*/;\n double  a_53=(1.4-1.0)/*True*/;\n     double  a_54=pow(a_5,3.0)/*True*/;\n double  a_55=pow(a_6,3.0)/*True*/;\n double  a_56=pow(a_7,3.0)/*True*/;\n double  a_57=pow(a_8,3.0)/*True*/;\n double  a_58=(a_50*a_54)/*True*/;\n double  a_59=(a_51*a_55)/*True*/;\n double  a_60=(a_52*a_56)/*True*/;\n double  a_61=(a_53*a_57)/*True*/;\n         double  a_62=pow(a_0,2.0)/*True*/;\n double  a_63=pow(a_1,2.0)/*True*/;\n double  a_64=pow(a_2,2.0)/*True*/;\n double  a_65=pow(a_3,2.0)/*True*/;\n double  a_66=(2.0*a_62)/*True*/;\n double  a_67=(2.0*a_63)/*True*/;\n double  a_68=(2.0*a_64)/*True*/;\n double  a_69=(2.0*a_65)/*True*/;\n double  a_70=(a_58/a_66)/*True*/;\n double  a_71=(a_59/a_67)/*True*/;\n double  a_72=(a_60/a_68)/*True*/;\n double  a_73=(a_61/a_69)/*True*/;\n double  a_74=(a_46-a_70)/*True*/;\n double  a_75=(a_47-a_71)/*True*/;\n double  a_76=(a_48-a_72)/*True*/;\n double  a_77=(a_49-a_73)/*True*/;\n double  a_78=(0.3/1.0)/*True*/;\n double  a_79=(0.3/1.0)/*True*/;\n double  a_80=(0.3/1.0)/*True*/;\n double  a_81=(a_6-a_5)/*True*/;\n double  a_82=(a_7-a_6)/*True*/;\n double  a_83=(a_36-a_35)/*True*/;\n double  a_84=(a_37-a_36)/*True*/;\n double  a_85=(a_75-a_74)/*True*/;\n double  a_86=(a_76-a_75)/*True*/;\n double  a_87=(a_77-a_76)/*True*/;\n double  a_88=(0.2*1.0)/*True*/;\n double  a_89=(0.2*1.0)/*True*/;\n double  a_90=(0.2*1.0)/*True*/;\n    double  a_91=(2.0*a_0)/*True*/;\n double  a_92=(2.0*a_1)/*True*/;\n double  a_93=(2.0*a_5)/*True*/;\n double  a_94=(2.0*a_6)/*True*/;\n double  a_95=(2.0*a_10)/*True*/;\n double  a_96=(2.0*a_11)/*True*/;\n double  a_97=(2.0*a_12)/*True*/;\n double  a_98=(a_1-a_91)/*True*/;\n double  a_99=(a_2-a_92)/*True*/;\n double  a_100=(a_6-a_93)/*True*/;\n double  a_101=(a_7-a_94)/*True*/;\n double  a_102=(a_11-a_95)/*True*/;\n double  a_103=(a_12-a_96)/*True*/;\n double  a_104=(a_13-a_97)/*True*/;\n double  a_105=(a_98+a)/*True*/;\n double  a_106=(a_99+a_0)/*True*/;\n double  a_107=(a_100+a_4)/*True*/;\n double  a_108=(a_101+a_5)/*True*/;\n double  a_109=(a_102+a_9)/*True*/;\n double  a_110=(a_103+a_10)/*True*/;\n double  a_111=(a_104+a_11)/*True*/;\n double  a_112=(a_88*a_105)/*True*/;\n double  a_113=(a_89*a_106)/*True*/;\n double  a_114=(a_88*a_107)/*True*/;\n double  a_115=(a_89*a_108)/*True*/;\n double  a_116=(a_88*a_109)/*True*/;\n double  a_117=(a_89*a_110)/*True*/;\n double  a_118=(a_90*a_111)/*True*/;\n double  a_119=(-a_112)/*True*/;\n double  a_120=(-a_113)/*True*/;\n double  a_121=(-a_114)/*True*/;\n double  a_122=(-a_115)/*True*/;\n double  a_123=(-a_116)/*True*/;\n double  a_124=(-a_117)/*True*/;\n double  a_125=(-a_118)/*True*/;\n double  a_126=(a_81+a_119)/*True*/;\n double  a_127=(a_82+a_120)/*True*/;\n double  a_128=(a_83+a_121)/*True*/;\n double  a_129=(a_84+a_122)/*True*/;\n double  a_130=(a_85+a_123)/*True*/;\n double  a_131=(a_86+a_124)/*True*/;\n double  a_132=(a_87+a_125)/*True*/;\n double  a_133=(a_78*a_126)/*True*/;\n double  a_134=(a_79*a_127)/*True*/;\n double  a_135=(a_78*a_128)/*True*/;\n double  a_136=(a_79*a_129)/*True*/;\n double  a_137=(a_78*a_130)/*True*/;\n double  a_138=(a_79*a_131)/*True*/;\n double  a_139=(a_80*a_132)/*True*/;\n double  a_140=(a_0-a_133)/*True*/;\n double  a_141=(a_1-a_134)/*True*/;\n double  a_142=(a_5-a_135)/*True*/;\n double  a_143=(a_6-a_136)/*True*/;\n double  a_144=(a_10-a_137)/*True*/;\n double  a_145=(a_11-a_138)/*True*/;\n double  a_146=(a_12-a_139)/*True*/;\n double  a_147=(1.4*a_144)/*True*/;\n double  a_148=(1.4*a_145)/*True*/;\n double  a_149=(a_147*a_142)/*True*/;\n double  a_150=(a_148*a_143)/*True*/;\n double  a_151=(a_149/a_140)/*True*/;\n double  a_152=(a_150/a_141)/*True*/;\n   double  a_153=(1.4-1.0)/*True*/;\n double  a_154=(1.4-1.0)/*True*/;\n   double  a_155=pow(a_142,3.0)/*True*/;\n double  a_156=pow(a_143,3.0)/*True*/;\n double  a_157=(a_153*a_155)/*True*/;\n double  a_158=(a_154*a_156)/*True*/;\n     double  a_159=pow(a_140,2.0)/*True*/;\n double  a_160=pow(a_141,2.0)/*True*/;\n double  a_161=(2.0*a_159)/*True*/;\n double  a_162=(2.0*a_160)/*True*/;\n double  a_163=(a_157/a_161)/*True*/;\n double  a_164=(a_158/a_162)/*True*/;\n double  a_165=(a_151-a_163)/*True*/;\n double  a_166=(a_152-a_164)/*True*/;\n double  a_167=(a_11+a_145)/*True*/;\n  double  a_168=(a_167/2.0)/*True*/;\n double  a_169=(0.3/1.0)/*True*/;\n  double  a_170=(a_169/2.0)/*True*/;\n double  a_171=(a_166-a_165)/*True*/;\n double  a_172=(0.2*1.0)/*True*/;\n  double  a_173=(2.0*a_145)/*True*/;\n double  a_174=(a_146-a_173)/*True*/;\n double  a_175=(a_174+a_144)/*True*/;\n double  a_176=(a_172*a_175)/*True*/;\n double  a_177=(-a_176)/*True*/;\n double  a_178=(a_171+a_177)/*True*/;\n double  a_179=(a_170*a_178)/*True*/;\n double  a_180=(a_168-a_179)/*True*/;\n \n",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=(+a_180);\n\n}\n"]),Raw "\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRsc2[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=Ridge_0_Om_147_r__0_r__1[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRsc2[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw ")]=Facet_1_src__0_dest__1_Recv.Ridge_1_Om_147_r__0_r__1[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRsc1[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=Ridge_0_Om_148_r__0_r__1[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRsc1[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw ")]=Facet_1_src__0_dest__1_Recv.Ridge_1_Om_148_r__0_r__1[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRsc0[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=Ridge_0_Om_149_r__0_r__1[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRsc0[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw ")]=Facet_1_src__0_dest__1_Recv.Ridge_1_Om_149_r__0_r__1[ix];}\n\n",PotentialSubroutine (Src [Raw "\nfor (int  ix = ",Hole (Typed {_holeType = "int", _holeExpr = "150"}),Raw " ; ix < ",Hole (Typed {_holeType = "int", _holeExpr = "308"}),Raw " ; ix += 1 ){\n            double  a=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-150"}),Raw ")]/*True*/;\n double  a_0=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-149"}),Raw ")]/*True*/;\n double  a_1=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-148"}),Raw ")]/*True*/;\n double  a_2=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-147"}),Raw ")]/*True*/;\n double  a_3=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-146"}),Raw ")]/*True*/;\n double  a_4=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-150"}),Raw ")]/*True*/;\n double  a_5=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-149"}),Raw ")]/*True*/;\n double  a_6=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-148"}),Raw ")]/*True*/;\n double  a_7=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-147"}),Raw ")]/*True*/;\n double  a_8=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-146"}),Raw ")]/*True*/;\n double  a_9=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-149"}),Raw ")]/*True*/;\n double  a_10=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-148"}),Raw ")]/*True*/;\n double  a_11=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-147"}),Raw ")]/*True*/;\n    double  a_12=(1.4-1.0)/*True*/;\n double  a_13=(1.4-1.0)/*True*/;\n double  a_14=(1.4-1.0)/*True*/;\n double  a_15=(a_12*a_9)/*True*/;\n double  a_16=(a_13*a_10)/*True*/;\n double  a_17=(a_14*a_11)/*True*/;\n    double  a_18=(3.0-1.4)/*True*/;\n double  a_19=(3.0-1.4)/*True*/;\n double  a_20=(3.0-1.4)/*True*/;\n    double  a_21=pow(a_5,2.0)/*True*/;\n double  a_22=pow(a_6,2.0)/*True*/;\n double  a_23=pow(a_7,2.0)/*True*/;\n double  a_24=(a_18*a_21)/*True*/;\n double  a_25=(a_19*a_22)/*True*/;\n double  a_26=(a_20*a_23)/*True*/;\n    double  a_27=(2.0*a_0)/*True*/;\n double  a_28=(2.0*a_1)/*True*/;\n double  a_29=(2.0*a_2)/*True*/;\n double  a_30=(a_24/a_27)/*True*/;\n double  a_31=(a_25/a_28)/*True*/;\n double  a_32=(a_26/a_29)/*True*/;\n double  a_33=(a_15+a_30)/*True*/;\n double  a_34=(a_16+a_31)/*True*/;\n double  a_35=(a_17+a_32)/*True*/;\n double  a_36=(0.3/1.0)/*True*/;\n double  a_37=(0.3/1.0)/*True*/;\n double  a_38=(0.3/1.0)/*True*/;\n double  a_39=(a_6-a_5)/*True*/;\n double  a_40=(a_7-a_6)/*True*/;\n double  a_41=(a_8-a_7)/*True*/;\n double  a_42=(a_34-a_33)/*True*/;\n double  a_43=(a_35-a_34)/*True*/;\n double  a_44=(0.2*1.0)/*True*/;\n double  a_45=(0.2*1.0)/*True*/;\n double  a_46=(0.2*1.0)/*True*/;\n    double  a_47=(2.0*a_0)/*True*/;\n double  a_48=(2.0*a_1)/*True*/;\n double  a_49=(2.0*a_2)/*True*/;\n double  a_50=(2.0*a_5)/*True*/;\n double  a_51=(2.0*a_6)/*True*/;\n double  a_52=(a_1-a_47)/*True*/;\n double  a_53=(a_2-a_48)/*True*/;\n double  a_54=(a_3-a_49)/*True*/;\n double  a_55=(a_6-a_50)/*True*/;\n double  a_56=(a_7-a_51)/*True*/;\n double  a_57=(a_52+a)/*True*/;\n double  a_58=(a_53+a_0)/*True*/;\n double  a_59=(a_54+a_1)/*True*/;\n double  a_60=(a_55+a_4)/*True*/;\n double  a_61=(a_56+a_5)/*True*/;\n double  a_62=(a_44*a_57)/*True*/;\n double  a_63=(a_45*a_58)/*True*/;\n double  a_64=(a_46*a_59)/*True*/;\n double  a_65=(a_44*a_60)/*True*/;\n double  a_66=(a_45*a_61)/*True*/;\n double  a_67=(-a_62)/*True*/;\n double  a_68=(-a_63)/*True*/;\n double  a_69=(-a_64)/*True*/;\n double  a_70=(-a_65)/*True*/;\n double  a_71=(-a_66)/*True*/;\n double  a_72=(a_39+a_67)/*True*/;\n double  a_73=(a_40+a_68)/*True*/;\n double  a_74=(a_41+a_69)/*True*/;\n double  a_75=(a_42+a_70)/*True*/;\n double  a_76=(a_43+a_71)/*True*/;\n double  a_77=(a_36*a_72)/*True*/;\n double  a_78=(a_37*a_73)/*True*/;\n double  a_79=(a_38*a_74)/*True*/;\n double  a_80=(a_36*a_75)/*True*/;\n double  a_81=(a_37*a_76)/*True*/;\n double  a_82=(a_0-a_77)/*True*/;\n double  a_83=(a_1-a_78)/*True*/;\n double  a_84=(a_2-a_79)/*True*/;\n double  a_85=(a_5-a_80)/*True*/;\n double  a_86=(a_6-a_81)/*True*/;\n double  a_87=(a_1+a_83)/*True*/;\n  double  a_88=(a_87/2.0)/*True*/;\n double  a_89=(0.3/1.0)/*True*/;\n  double  a_90=(a_89/2.0)/*True*/;\n double  a_91=(a_86-a_85)/*True*/;\n double  a_92=(0.2*1.0)/*True*/;\n  double  a_93=(2.0*a_83)/*True*/;\n double  a_94=(a_84-a_93)/*True*/;\n double  a_95=(a_94+a_82)/*True*/;\n double  a_96=(a_92*a_95)/*True*/;\n double  a_97=(-a_96)/*True*/;\n double  a_98=(a_91+a_97)/*True*/;\n double  a_99=(a_90*a_98)/*True*/;\n double  a_100=(a_88-a_99)/*True*/;\n \nr[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-4"}),Raw ")+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=a_100;\n\n}\n"]),Raw "\n",PotentialSubroutine (Src [Raw "\nfor (int  ix = ",Hole (Typed {_holeType = "int", _holeExpr = "150"}),Raw " ; ix < ",Hole (Typed {_holeType = "int", _holeExpr = "308"}),Raw " ; ix += 1 ){\n             double  a=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-150"}),Raw ")]/*True*/;\n double  a_0=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-149"}),Raw ")]/*True*/;\n double  a_1=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-148"}),Raw ")]/*True*/;\n double  a_2=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-147"}),Raw ")]/*True*/;\n double  a_3=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-146"}),Raw ")]/*True*/;\n double  a_4=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-150"}),Raw ")]/*True*/;\n double  a_5=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-149"}),Raw ")]/*True*/;\n double  a_6=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-148"}),Raw ")]/*True*/;\n double  a_7=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-147"}),Raw ")]/*True*/;\n double  a_8=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-146"}),Raw ")]/*True*/;\n double  a_9=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-150"}),Raw ")]/*True*/;\n double  a_10=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-149"}),Raw ")]/*True*/;\n double  a_11=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-148"}),Raw ")]/*True*/;\n double  a_12=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-147"}),Raw ")]/*True*/;\n double  a_13=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-146"}),Raw ")]/*True*/;\n     double  a_14=(1.4-1.0)/*True*/;\n double  a_15=(1.4-1.0)/*True*/;\n double  a_16=(1.4-1.0)/*True*/;\n double  a_17=(1.4-1.0)/*True*/;\n double  a_18=(a_14*a_10)/*True*/;\n double  a_19=(a_15*a_11)/*True*/;\n double  a_20=(a_16*a_12)/*True*/;\n double  a_21=(a_17*a_13)/*True*/;\n     double  a_22=(3.0-1.4)/*True*/;\n double  a_23=(3.0-1.4)/*True*/;\n double  a_24=(3.0-1.4)/*True*/;\n double  a_25=(3.0-1.4)/*True*/;\n     double  a_26=pow(a_5,2.0)/*True*/;\n double  a_27=pow(a_6,2.0)/*True*/;\n double  a_28=pow(a_7,2.0)/*True*/;\n double  a_29=pow(a_8,2.0)/*True*/;\n double  a_30=(a_22*a_26)/*True*/;\n double  a_31=(a_23*a_27)/*True*/;\n double  a_32=(a_24*a_28)/*True*/;\n double  a_33=(a_25*a_29)/*True*/;\n     double  a_34=(2.0*a_0)/*True*/;\n double  a_35=(2.0*a_1)/*True*/;\n double  a_36=(2.0*a_2)/*True*/;\n double  a_37=(2.0*a_3)/*True*/;\n double  a_38=(a_30/a_34)/*True*/;\n double  a_39=(a_31/a_35)/*True*/;\n double  a_40=(a_32/a_36)/*True*/;\n double  a_41=(a_33/a_37)/*True*/;\n double  a_42=(a_18+a_38)/*True*/;\n double  a_43=(a_19+a_39)/*True*/;\n double  a_44=(a_20+a_40)/*True*/;\n double  a_45=(a_21+a_41)/*True*/;\n double  a_46=(1.4*a_10)/*True*/;\n double  a_47=(1.4*a_11)/*True*/;\n double  a_48=(1.4*a_12)/*True*/;\n double  a_49=(a_46*a_5)/*True*/;\n double  a_50=(a_47*a_6)/*True*/;\n double  a_51=(a_48*a_7)/*True*/;\n double  a_52=(a_49/a_0)/*True*/;\n double  a_53=(a_50/a_1)/*True*/;\n double  a_54=(a_51/a_2)/*True*/;\n    double  a_55=(1.4-1.0)/*True*/;\n double  a_56=(1.4-1.0)/*True*/;\n double  a_57=(1.4-1.0)/*True*/;\n    double  a_58=pow(a_5,3.0)/*True*/;\n double  a_59=pow(a_6,3.0)/*True*/;\n double  a_60=pow(a_7,3.0)/*True*/;\n double  a_61=(a_55*a_58)/*True*/;\n double  a_62=(a_56*a_59)/*True*/;\n double  a_63=(a_57*a_60)/*True*/;\n       double  a_64=pow(a_0,2.0)/*True*/;\n double  a_65=pow(a_1,2.0)/*True*/;\n double  a_66=pow(a_2,2.0)/*True*/;\n double  a_67=(2.0*a_64)/*True*/;\n double  a_68=(2.0*a_65)/*True*/;\n double  a_69=(2.0*a_66)/*True*/;\n double  a_70=(a_61/a_67)/*True*/;\n double  a_71=(a_62/a_68)/*True*/;\n double  a_72=(a_63/a_69)/*True*/;\n double  a_73=(a_52-a_70)/*True*/;\n double  a_74=(a_53-a_71)/*True*/;\n double  a_75=(a_54-a_72)/*True*/;\n double  a_76=(0.3/1.0)/*True*/;\n double  a_77=(0.3/1.0)/*True*/;\n double  a_78=(0.3/1.0)/*True*/;\n double  a_79=(a_6-a_5)/*True*/;\n double  a_80=(a_7-a_6)/*True*/;\n double  a_81=(a_43-a_42)/*True*/;\n double  a_82=(a_44-a_43)/*True*/;\n double  a_83=(a_45-a_44)/*True*/;\n double  a_84=(a_74-a_73)/*True*/;\n double  a_85=(a_75-a_74)/*True*/;\n double  a_86=(0.2*1.0)/*True*/;\n double  a_87=(0.2*1.0)/*True*/;\n double  a_88=(0.2*1.0)/*True*/;\n    double  a_89=(2.0*a_0)/*True*/;\n double  a_90=(2.0*a_1)/*True*/;\n double  a_91=(2.0*a_5)/*True*/;\n double  a_92=(2.0*a_6)/*True*/;\n double  a_93=(2.0*a_7)/*True*/;\n double  a_94=(2.0*a_10)/*True*/;\n double  a_95=(2.0*a_11)/*True*/;\n double  a_96=(a_1-a_89)/*True*/;\n double  a_97=(a_2-a_90)/*True*/;\n double  a_98=(a_6-a_91)/*True*/;\n double  a_99=(a_7-a_92)/*True*/;\n double  a_100=(a_8-a_93)/*True*/;\n double  a_101=(a_11-a_94)/*True*/;\n double  a_102=(a_12-a_95)/*True*/;\n double  a_103=(a_96+a)/*True*/;\n double  a_104=(a_97+a_0)/*True*/;\n double  a_105=(a_98+a_4)/*True*/;\n double  a_106=(a_99+a_5)/*True*/;\n double  a_107=(a_100+a_6)/*True*/;\n double  a_108=(a_101+a_9)/*True*/;\n double  a_109=(a_102+a_10)/*True*/;\n double  a_110=(a_86*a_103)/*True*/;\n double  a_111=(a_87*a_104)/*True*/;\n double  a_112=(a_86*a_105)/*True*/;\n double  a_113=(a_87*a_106)/*True*/;\n double  a_114=(a_88*a_107)/*True*/;\n double  a_115=(a_86*a_108)/*True*/;\n double  a_116=(a_87*a_109)/*True*/;\n double  a_117=(-a_110)/*True*/;\n double  a_118=(-a_111)/*True*/;\n double  a_119=(-a_112)/*True*/;\n double  a_120=(-a_113)/*True*/;\n double  a_121=(-a_114)/*True*/;\n double  a_122=(-a_115)/*True*/;\n double  a_123=(-a_116)/*True*/;\n double  a_124=(a_79+a_117)/*True*/;\n double  a_125=(a_80+a_118)/*True*/;\n double  a_126=(a_81+a_119)/*True*/;\n double  a_127=(a_82+a_120)/*True*/;\n double  a_128=(a_83+a_121)/*True*/;\n double  a_129=(a_84+a_122)/*True*/;\n double  a_130=(a_85+a_123)/*True*/;\n double  a_131=(a_76*a_124)/*True*/;\n double  a_132=(a_77*a_125)/*True*/;\n double  a_133=(a_76*a_126)/*True*/;\n double  a_134=(a_77*a_127)/*True*/;\n double  a_135=(a_78*a_128)/*True*/;\n double  a_136=(a_76*a_129)/*True*/;\n double  a_137=(a_77*a_130)/*True*/;\n double  a_138=(a_0-a_131)/*True*/;\n double  a_139=(a_1-a_132)/*True*/;\n double  a_140=(a_5-a_133)/*True*/;\n double  a_141=(a_6-a_134)/*True*/;\n double  a_142=(a_7-a_135)/*True*/;\n double  a_143=(a_10-a_136)/*True*/;\n double  a_144=(a_11-a_137)/*True*/;\n   double  a_145=(1.4-1.0)/*True*/;\n double  a_146=(1.4-1.0)/*True*/;\n double  a_147=(a_145*a_143)/*True*/;\n double  a_148=(a_146*a_144)/*True*/;\n   double  a_149=(3.0-1.4)/*True*/;\n double  a_150=(3.0-1.4)/*True*/;\n   double  a_151=pow(a_140,2.0)/*True*/;\n double  a_152=pow(a_141,2.0)/*True*/;\n double  a_153=(a_149*a_151)/*True*/;\n double  a_154=(a_150*a_152)/*True*/;\n   double  a_155=(2.0*a_138)/*True*/;\n double  a_156=(2.0*a_139)/*True*/;\n double  a_157=(a_153/a_155)/*True*/;\n double  a_158=(a_154/a_156)/*True*/;\n double  a_159=(a_147+a_157)/*True*/;\n double  a_160=(a_148+a_158)/*True*/;\n double  a_161=(a_6+a_141)/*True*/;\n  double  a_162=(a_161/2.0)/*True*/;\n double  a_163=(0.3/1.0)/*True*/;\n  double  a_164=(a_163/2.0)/*True*/;\n double  a_165=(a_160-a_159)/*True*/;\n double  a_166=(0.2*1.0)/*True*/;\n  double  a_167=(2.0*a_141)/*True*/;\n double  a_168=(a_142-a_167)/*True*/;\n double  a_169=(a_168+a_140)/*True*/;\n double  a_170=(a_166*a_169)/*True*/;\n double  a_171=(-a_170)/*True*/;\n double  a_172=(a_165+a_171)/*True*/;\n double  a_173=(a_164*a_172)/*True*/;\n double  a_174=(a_162-a_173)/*True*/;\n \nm[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-4"}),Raw ")+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=a_174;\n\n}\n"]),Raw "\n",PotentialSubroutine (Src [Raw "\nfor (int  ix = ",Hole (Typed {_holeType = "int", _holeExpr = "150"}),Raw " ; ix < ",Hole (Typed {_holeType = "int", _holeExpr = "308"}),Raw " ; ix += 1 ){\n             double  a=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-150"}),Raw ")]/*True*/;\n double  a_0=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-149"}),Raw ")]/*True*/;\n double  a_1=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-148"}),Raw ")]/*True*/;\n double  a_2=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-147"}),Raw ")]/*True*/;\n double  a_3=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-146"}),Raw ")]/*True*/;\n double  a_4=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-150"}),Raw ")]/*True*/;\n double  a_5=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-149"}),Raw ")]/*True*/;\n double  a_6=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-148"}),Raw ")]/*True*/;\n double  a_7=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-147"}),Raw ")]/*True*/;\n double  a_8=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-146"}),Raw ")]/*True*/;\n double  a_9=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-150"}),Raw ")]/*True*/;\n double  a_10=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-149"}),Raw ")]/*True*/;\n double  a_11=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-148"}),Raw ")]/*True*/;\n double  a_12=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-147"}),Raw ")]/*True*/;\n double  a_13=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-146"}),Raw ")]/*True*/;\n    double  a_14=(1.4-1.0)/*True*/;\n double  a_15=(1.4-1.0)/*True*/;\n double  a_16=(1.4-1.0)/*True*/;\n double  a_17=(a_14*a_10)/*True*/;\n double  a_18=(a_15*a_11)/*True*/;\n double  a_19=(a_16*a_12)/*True*/;\n    double  a_20=(3.0-1.4)/*True*/;\n double  a_21=(3.0-1.4)/*True*/;\n double  a_22=(3.0-1.4)/*True*/;\n    double  a_23=pow(a_5,2.0)/*True*/;\n double  a_24=pow(a_6,2.0)/*True*/;\n double  a_25=pow(a_7,2.0)/*True*/;\n double  a_26=(a_20*a_23)/*True*/;\n double  a_27=(a_21*a_24)/*True*/;\n double  a_28=(a_22*a_25)/*True*/;\n    double  a_29=(2.0*a_0)/*True*/;\n double  a_30=(2.0*a_1)/*True*/;\n double  a_31=(2.0*a_2)/*True*/;\n double  a_32=(a_26/a_29)/*True*/;\n double  a_33=(a_27/a_30)/*True*/;\n double  a_34=(a_28/a_31)/*True*/;\n double  a_35=(a_17+a_32)/*True*/;\n double  a_36=(a_18+a_33)/*True*/;\n double  a_37=(a_19+a_34)/*True*/;\n double  a_38=(1.4*a_10)/*True*/;\n double  a_39=(1.4*a_11)/*True*/;\n double  a_40=(1.4*a_12)/*True*/;\n double  a_41=(1.4*a_13)/*True*/;\n double  a_42=(a_38*a_5)/*True*/;\n double  a_43=(a_39*a_6)/*True*/;\n double  a_44=(a_40*a_7)/*True*/;\n double  a_45=(a_41*a_8)/*True*/;\n double  a_46=(a_42/a_0)/*True*/;\n double  a_47=(a_43/a_1)/*True*/;\n double  a_48=(a_44/a_2)/*True*/;\n double  a_49=(a_45/a_3)/*True*/;\n     double  a_50=(1.4-1.0)/*True*/;\n double  a_51=(1.4-1.0)/*True*/;\n double  a_52=(1.4-1.0)/*True*/;\n double  a_53=(1.4-1.0)/*True*/;\n     double  a_54=pow(a_5,3.0)/*True*/;\n double  a_55=pow(a_6,3.0)/*True*/;\n double  a_56=pow(a_7,3.0)/*True*/;\n double  a_57=pow(a_8,3.0)/*True*/;\n double  a_58=(a_50*a_54)/*True*/;\n double  a_59=(a_51*a_55)/*True*/;\n double  a_60=(a_52*a_56)/*True*/;\n double  a_61=(a_53*a_57)/*True*/;\n         double  a_62=pow(a_0,2.0)/*True*/;\n double  a_63=pow(a_1,2.0)/*True*/;\n double  a_64=pow(a_2,2.0)/*True*/;\n double  a_65=pow(a_3,2.0)/*True*/;\n double  a_66=(2.0*a_62)/*True*/;\n double  a_67=(2.0*a_63)/*True*/;\n double  a_68=(2.0*a_64)/*True*/;\n double  a_69=(2.0*a_65)/*True*/;\n double  a_70=(a_58/a_66)/*True*/;\n double  a_71=(a_59/a_67)/*True*/;\n double  a_72=(a_60/a_68)/*True*/;\n double  a_73=(a_61/a_69)/*True*/;\n double  a_74=(a_46-a_70)/*True*/;\n double  a_75=(a_47-a_71)/*True*/;\n double  a_76=(a_48-a_72)/*True*/;\n double  a_77=(a_49-a_73)/*True*/;\n double  a_78=(0.3/1.0)/*True*/;\n double  a_79=(0.3/1.0)/*True*/;\n double  a_80=(0.3/1.0)/*True*/;\n double  a_81=(a_6-a_5)/*True*/;\n double  a_82=(a_7-a_6)/*True*/;\n double  a_83=(a_36-a_35)/*True*/;\n double  a_84=(a_37-a_36)/*True*/;\n double  a_85=(a_75-a_74)/*True*/;\n double  a_86=(a_76-a_75)/*True*/;\n double  a_87=(a_77-a_76)/*True*/;\n double  a_88=(0.2*1.0)/*True*/;\n double  a_89=(0.2*1.0)/*True*/;\n double  a_90=(0.2*1.0)/*True*/;\n    double  a_91=(2.0*a_0)/*True*/;\n double  a_92=(2.0*a_1)/*True*/;\n double  a_93=(2.0*a_5)/*True*/;\n double  a_94=(2.0*a_6)/*True*/;\n double  a_95=(2.0*a_10)/*True*/;\n double  a_96=(2.0*a_11)/*True*/;\n double  a_97=(2.0*a_12)/*True*/;\n double  a_98=(a_1-a_91)/*True*/;\n double  a_99=(a_2-a_92)/*True*/;\n double  a_100=(a_6-a_93)/*True*/;\n double  a_101=(a_7-a_94)/*True*/;\n double  a_102=(a_11-a_95)/*True*/;\n double  a_103=(a_12-a_96)/*True*/;\n double  a_104=(a_13-a_97)/*True*/;\n double  a_105=(a_98+a)/*True*/;\n double  a_106=(a_99+a_0)/*True*/;\n double  a_107=(a_100+a_4)/*True*/;\n double  a_108=(a_101+a_5)/*True*/;\n double  a_109=(a_102+a_9)/*True*/;\n double  a_110=(a_103+a_10)/*True*/;\n double  a_111=(a_104+a_11)/*True*/;\n double  a_112=(a_88*a_105)/*True*/;\n double  a_113=(a_89*a_106)/*True*/;\n double  a_114=(a_88*a_107)/*True*/;\n double  a_115=(a_89*a_108)/*True*/;\n double  a_116=(a_88*a_109)/*True*/;\n double  a_117=(a_89*a_110)/*True*/;\n double  a_118=(a_90*a_111)/*True*/;\n double  a_119=(-a_112)/*True*/;\n double  a_120=(-a_113)/*True*/;\n double  a_121=(-a_114)/*True*/;\n double  a_122=(-a_115)/*True*/;\n double  a_123=(-a_116)/*True*/;\n double  a_124=(-a_117)/*True*/;\n double  a_125=(-a_118)/*True*/;\n double  a_126=(a_81+a_119)/*True*/;\n double  a_127=(a_82+a_120)/*True*/;\n double  a_128=(a_83+a_121)/*True*/;\n double  a_129=(a_84+a_122)/*True*/;\n double  a_130=(a_85+a_123)/*True*/;\n double  a_131=(a_86+a_124)/*True*/;\n double  a_132=(a_87+a_125)/*True*/;\n double  a_133=(a_78*a_126)/*True*/;\n double  a_134=(a_79*a_127)/*True*/;\n double  a_135=(a_78*a_128)/*True*/;\n double  a_136=(a_79*a_129)/*True*/;\n double  a_137=(a_78*a_130)/*True*/;\n double  a_138=(a_79*a_131)/*True*/;\n double  a_139=(a_80*a_132)/*True*/;\n double  a_140=(a_0-a_133)/*True*/;\n double  a_141=(a_1-a_134)/*True*/;\n double  a_142=(a_5-a_135)/*True*/;\n double  a_143=(a_6-a_136)/*True*/;\n double  a_144=(a_10-a_137)/*True*/;\n double  a_145=(a_11-a_138)/*True*/;\n double  a_146=(a_12-a_139)/*True*/;\n double  a_147=(1.4*a_144)/*True*/;\n double  a_148=(1.4*a_145)/*True*/;\n double  a_149=(a_147*a_142)/*True*/;\n double  a_150=(a_148*a_143)/*True*/;\n double  a_151=(a_149/a_140)/*True*/;\n double  a_152=(a_150/a_141)/*True*/;\n   double  a_153=(1.4-1.0)/*True*/;\n double  a_154=(1.4-1.0)/*True*/;\n   double  a_155=pow(a_142,3.0)/*True*/;\n double  a_156=pow(a_143,3.0)/*True*/;\n double  a_157=(a_153*a_155)/*True*/;\n double  a_158=(a_154*a_156)/*True*/;\n     double  a_159=pow(a_140,2.0)/*True*/;\n double  a_160=pow(a_141,2.0)/*True*/;\n double  a_161=(2.0*a_159)/*True*/;\n double  a_162=(2.0*a_160)/*True*/;\n double  a_163=(a_157/a_161)/*True*/;\n double  a_164=(a_158/a_162)/*True*/;\n double  a_165=(a_151-a_163)/*True*/;\n double  a_166=(a_152-a_164)/*True*/;\n double  a_167=(a_11+a_145)/*True*/;\n  double  a_168=(a_167/2.0)/*True*/;\n double  a_169=(0.3/1.0)/*True*/;\n  double  a_170=(a_169/2.0)/*True*/;\n double  a_171=(a_166-a_165)/*True*/;\n double  a_172=(0.2*1.0)/*True*/;\n  double  a_173=(2.0*a_145)/*True*/;\n double  a_174=(a_146-a_173)/*True*/;\n double  a_175=(a_174+a_144)/*True*/;\n double  a_176=(a_172*a_175)/*True*/;\n double  a_177=(-a_176)/*True*/;\n double  a_178=(a_171+a_177)/*True*/;\n double  a_179=(a_170*a_178)/*True*/;\n double  a_180=(a_168-a_179)/*True*/;\n \ne[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-4"}),Raw ")+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=a_180;\n\n}\n"]),Raw "\n}\n"]),("Formura_internal_2.c",Src [Raw "void Formura_internal_2(){\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nFacet_m1_src__1_dest__0_Send.Ridge_m1_St_e[ix]=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "300"}),Raw ")];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nFacet_m1_src__1_dest__0_Send.Ridge_m1_St_m[ix]=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "300"}),Raw ")];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nFacet_m1_src__1_dest__0_Send.Ridge_m1_St_r[ix]=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "300"}),Raw ")];}\n\n",PotentialSubroutine (Src [Raw "\nfor (int  ix = ",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw " ; ix < ",Hole (Typed {_holeType = "int", _holeExpr = "146"}),Raw " ; ix += 1 ){\n            double  a=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "154"}),Raw ")]/*True*/;\n double  a_0=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "155"}),Raw ")]/*True*/;\n double  a_1=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "156"}),Raw ")]/*True*/;\n double  a_2=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "157"}),Raw ")]/*True*/;\n double  a_3=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw ")]/*True*/;\n double  a_4=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "154"}),Raw ")]/*True*/;\n double  a_5=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "155"}),Raw ")]/*True*/;\n double  a_6=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "156"}),Raw ")]/*True*/;\n double  a_7=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "157"}),Raw ")]/*True*/;\n double  a_8=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw ")]/*True*/;\n double  a_9=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "155"}),Raw ")]/*True*/;\n double  a_10=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "156"}),Raw ")]/*True*/;\n double  a_11=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "157"}),Raw ")]/*True*/;\n    double  a_12=(1.4-1.0)/*True*/;\n double  a_13=(1.4-1.0)/*True*/;\n double  a_14=(1.4-1.0)/*True*/;\n double  a_15=(a_12*a_9)/*True*/;\n double  a_16=(a_13*a_10)/*True*/;\n double  a_17=(a_14*a_11)/*True*/;\n    double  a_18=(3.0-1.4)/*True*/;\n double  a_19=(3.0-1.4)/*True*/;\n double  a_20=(3.0-1.4)/*True*/;\n    double  a_21=pow(a_5,2.0)/*True*/;\n double  a_22=pow(a_6,2.0)/*True*/;\n double  a_23=pow(a_7,2.0)/*True*/;\n double  a_24=(a_18*a_21)/*True*/;\n double  a_25=(a_19*a_22)/*True*/;\n double  a_26=(a_20*a_23)/*True*/;\n    double  a_27=(2.0*a_0)/*True*/;\n double  a_28=(2.0*a_1)/*True*/;\n double  a_29=(2.0*a_2)/*True*/;\n double  a_30=(a_24/a_27)/*True*/;\n double  a_31=(a_25/a_28)/*True*/;\n double  a_32=(a_26/a_29)/*True*/;\n double  a_33=(a_15+a_30)/*True*/;\n double  a_34=(a_16+a_31)/*True*/;\n double  a_35=(a_17+a_32)/*True*/;\n double  a_36=(0.3/1.0)/*True*/;\n double  a_37=(0.3/1.0)/*True*/;\n double  a_38=(0.3/1.0)/*True*/;\n double  a_39=(a_6-a_5)/*True*/;\n double  a_40=(a_7-a_6)/*True*/;\n double  a_41=(a_8-a_7)/*True*/;\n double  a_42=(a_34-a_33)/*True*/;\n double  a_43=(a_35-a_34)/*True*/;\n double  a_44=(0.2*1.0)/*True*/;\n double  a_45=(0.2*1.0)/*True*/;\n double  a_46=(0.2*1.0)/*True*/;\n    double  a_47=(2.0*a_0)/*True*/;\n double  a_48=(2.0*a_1)/*True*/;\n double  a_49=(2.0*a_2)/*True*/;\n double  a_50=(2.0*a_5)/*True*/;\n double  a_51=(2.0*a_6)/*True*/;\n double  a_52=(a_1-a_47)/*True*/;\n double  a_53=(a_2-a_48)/*True*/;\n double  a_54=(a_3-a_49)/*True*/;\n double  a_55=(a_6-a_50)/*True*/;\n double  a_56=(a_7-a_51)/*True*/;\n double  a_57=(a_52+a)/*True*/;\n double  a_58=(a_53+a_0)/*True*/;\n double  a_59=(a_54+a_1)/*True*/;\n double  a_60=(a_55+a_4)/*True*/;\n double  a_61=(a_56+a_5)/*True*/;\n double  a_62=(a_44*a_57)/*True*/;\n double  a_63=(a_45*a_58)/*True*/;\n double  a_64=(a_46*a_59)/*True*/;\n double  a_65=(a_44*a_60)/*True*/;\n double  a_66=(a_45*a_61)/*True*/;\n double  a_67=(-a_62)/*True*/;\n double  a_68=(-a_63)/*True*/;\n double  a_69=(-a_64)/*True*/;\n double  a_70=(-a_65)/*True*/;\n double  a_71=(-a_66)/*True*/;\n double  a_72=(a_39+a_67)/*True*/;\n double  a_73=(a_40+a_68)/*True*/;\n double  a_74=(a_41+a_69)/*True*/;\n double  a_75=(a_42+a_70)/*True*/;\n double  a_76=(a_43+a_71)/*True*/;\n double  a_77=(a_36*a_72)/*True*/;\n double  a_78=(a_37*a_73)/*True*/;\n double  a_79=(a_38*a_74)/*True*/;\n double  a_80=(a_36*a_75)/*True*/;\n double  a_81=(a_37*a_76)/*True*/;\n double  a_82=(a_0-a_77)/*True*/;\n double  a_83=(a_1-a_78)/*True*/;\n double  a_84=(a_2-a_79)/*True*/;\n double  a_85=(a_5-a_80)/*True*/;\n double  a_86=(a_6-a_81)/*True*/;\n double  a_87=(a_1+a_83)/*True*/;\n  double  a_88=(a_87/2.0)/*True*/;\n double  a_89=(0.3/1.0)/*True*/;\n  double  a_90=(a_89/2.0)/*True*/;\n double  a_91=(a_86-a_85)/*True*/;\n double  a_92=(0.2*1.0)/*True*/;\n  double  a_93=(2.0*a_83)/*True*/;\n double  a_94=(a_84-a_93)/*True*/;\n double  a_95=(a_94+a_82)/*True*/;\n double  a_96=(a_92*a_95)/*True*/;\n double  a_97=(-a_96)/*True*/;\n double  a_98=(a_91+a_97)/*True*/;\n double  a_99=(a_90*a_98)/*True*/;\n double  a_100=(a_88-a_99)/*True*/;\n \n",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=(+a_100);\n\n}\n"]),Raw "\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nFacet_m1_src__1_dest__0_Send.Ridge_m1_Om_147_r__1_r__0[ix]=Rsc0[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "142"}),Raw ")];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRidge_0_Om_147_r__1_r__0[ix]=Rsc0[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")];}\n\n",PotentialSubroutine (Src [Raw "\nfor (int  ix = ",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw " ; ix < ",Hole (Typed {_holeType = "int", _holeExpr = "146"}),Raw " ; ix += 1 ){\n             double  a=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "154"}),Raw ")]/*True*/;\n double  a_0=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "155"}),Raw ")]/*True*/;\n double  a_1=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "156"}),Raw ")]/*True*/;\n double  a_2=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "157"}),Raw ")]/*True*/;\n double  a_3=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw ")]/*True*/;\n double  a_4=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "154"}),Raw ")]/*True*/;\n double  a_5=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "155"}),Raw ")]/*True*/;\n double  a_6=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "156"}),Raw ")]/*True*/;\n double  a_7=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "157"}),Raw ")]/*True*/;\n double  a_8=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw ")]/*True*/;\n double  a_9=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "154"}),Raw ")]/*True*/;\n double  a_10=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "155"}),Raw ")]/*True*/;\n double  a_11=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "156"}),Raw ")]/*True*/;\n double  a_12=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "157"}),Raw ")]/*True*/;\n double  a_13=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw ")]/*True*/;\n     double  a_14=(1.4-1.0)/*True*/;\n double  a_15=(1.4-1.0)/*True*/;\n double  a_16=(1.4-1.0)/*True*/;\n double  a_17=(1.4-1.0)/*True*/;\n double  a_18=(a_14*a_10)/*True*/;\n double  a_19=(a_15*a_11)/*True*/;\n double  a_20=(a_16*a_12)/*True*/;\n double  a_21=(a_17*a_13)/*True*/;\n     double  a_22=(3.0-1.4)/*True*/;\n double  a_23=(3.0-1.4)/*True*/;\n double  a_24=(3.0-1.4)/*True*/;\n double  a_25=(3.0-1.4)/*True*/;\n     double  a_26=pow(a_5,2.0)/*True*/;\n double  a_27=pow(a_6,2.0)/*True*/;\n double  a_28=pow(a_7,2.0)/*True*/;\n double  a_29=pow(a_8,2.0)/*True*/;\n double  a_30=(a_22*a_26)/*True*/;\n double  a_31=(a_23*a_27)/*True*/;\n double  a_32=(a_24*a_28)/*True*/;\n double  a_33=(a_25*a_29)/*True*/;\n     double  a_34=(2.0*a_0)/*True*/;\n double  a_35=(2.0*a_1)/*True*/;\n double  a_36=(2.0*a_2)/*True*/;\n double  a_37=(2.0*a_3)/*True*/;\n double  a_38=(a_30/a_34)/*True*/;\n double  a_39=(a_31/a_35)/*True*/;\n double  a_40=(a_32/a_36)/*True*/;\n double  a_41=(a_33/a_37)/*True*/;\n double  a_42=(a_18+a_38)/*True*/;\n double  a_43=(a_19+a_39)/*True*/;\n double  a_44=(a_20+a_40)/*True*/;\n double  a_45=(a_21+a_41)/*True*/;\n double  a_46=(1.4*a_10)/*True*/;\n double  a_47=(1.4*a_11)/*True*/;\n double  a_48=(1.4*a_12)/*True*/;\n double  a_49=(a_46*a_5)/*True*/;\n double  a_50=(a_47*a_6)/*True*/;\n double  a_51=(a_48*a_7)/*True*/;\n double  a_52=(a_49/a_0)/*True*/;\n double  a_53=(a_50/a_1)/*True*/;\n double  a_54=(a_51/a_2)/*True*/;\n    double  a_55=(1.4-1.0)/*True*/;\n double  a_56=(1.4-1.0)/*True*/;\n double  a_57=(1.4-1.0)/*True*/;\n    double  a_58=pow(a_5,3.0)/*True*/;\n double  a_59=pow(a_6,3.0)/*True*/;\n double  a_60=pow(a_7,3.0)/*True*/;\n double  a_61=(a_55*a_58)/*True*/;\n double  a_62=(a_56*a_59)/*True*/;\n double  a_63=(a_57*a_60)/*True*/;\n       double  a_64=pow(a_0,2.0)/*True*/;\n double  a_65=pow(a_1,2.0)/*True*/;\n double  a_66=pow(a_2,2.0)/*True*/;\n double  a_67=(2.0*a_64)/*True*/;\n double  a_68=(2.0*a_65)/*True*/;\n double  a_69=(2.0*a_66)/*True*/;\n double  a_70=(a_61/a_67)/*True*/;\n double  a_71=(a_62/a_68)/*True*/;\n double  a_72=(a_63/a_69)/*True*/;\n double  a_73=(a_52-a_70)/*True*/;\n double  a_74=(a_53-a_71)/*True*/;\n double  a_75=(a_54-a_72)/*True*/;\n double  a_76=(0.3/1.0)/*True*/;\n double  a_77=(0.3/1.0)/*True*/;\n double  a_78=(0.3/1.0)/*True*/;\n double  a_79=(a_6-a_5)/*True*/;\n double  a_80=(a_7-a_6)/*True*/;\n double  a_81=(a_43-a_42)/*True*/;\n double  a_82=(a_44-a_43)/*True*/;\n double  a_83=(a_45-a_44)/*True*/;\n double  a_84=(a_74-a_73)/*True*/;\n double  a_85=(a_75-a_74)/*True*/;\n double  a_86=(0.2*1.0)/*True*/;\n double  a_87=(0.2*1.0)/*True*/;\n double  a_88=(0.2*1.0)/*True*/;\n    double  a_89=(2.0*a_0)/*True*/;\n double  a_90=(2.0*a_1)/*True*/;\n double  a_91=(2.0*a_5)/*True*/;\n double  a_92=(2.0*a_6)/*True*/;\n double  a_93=(2.0*a_7)/*True*/;\n double  a_94=(2.0*a_10)/*True*/;\n double  a_95=(2.0*a_11)/*True*/;\n double  a_96=(a_1-a_89)/*True*/;\n double  a_97=(a_2-a_90)/*True*/;\n double  a_98=(a_6-a_91)/*True*/;\n double  a_99=(a_7-a_92)/*True*/;\n double  a_100=(a_8-a_93)/*True*/;\n double  a_101=(a_11-a_94)/*True*/;\n double  a_102=(a_12-a_95)/*True*/;\n double  a_103=(a_96+a)/*True*/;\n double  a_104=(a_97+a_0)/*True*/;\n double  a_105=(a_98+a_4)/*True*/;\n double  a_106=(a_99+a_5)/*True*/;\n double  a_107=(a_100+a_6)/*True*/;\n double  a_108=(a_101+a_9)/*True*/;\n double  a_109=(a_102+a_10)/*True*/;\n double  a_110=(a_86*a_103)/*True*/;\n double  a_111=(a_87*a_104)/*True*/;\n double  a_112=(a_86*a_105)/*True*/;\n double  a_113=(a_87*a_106)/*True*/;\n double  a_114=(a_88*a_107)/*True*/;\n double  a_115=(a_86*a_108)/*True*/;\n double  a_116=(a_87*a_109)/*True*/;\n double  a_117=(-a_110)/*True*/;\n double  a_118=(-a_111)/*True*/;\n double  a_119=(-a_112)/*True*/;\n double  a_120=(-a_113)/*True*/;\n double  a_121=(-a_114)/*True*/;\n double  a_122=(-a_115)/*True*/;\n double  a_123=(-a_116)/*True*/;\n double  a_124=(a_79+a_117)/*True*/;\n double  a_125=(a_80+a_118)/*True*/;\n double  a_126=(a_81+a_119)/*True*/;\n double  a_127=(a_82+a_120)/*True*/;\n double  a_128=(a_83+a_121)/*True*/;\n double  a_129=(a_84+a_122)/*True*/;\n double  a_130=(a_85+a_123)/*True*/;\n double  a_131=(a_76*a_124)/*True*/;\n double  a_132=(a_77*a_125)/*True*/;\n double  a_133=(a_76*a_126)/*True*/;\n double  a_134=(a_77*a_127)/*True*/;\n double  a_135=(a_78*a_128)/*True*/;\n double  a_136=(a_76*a_129)/*True*/;\n double  a_137=(a_77*a_130)/*True*/;\n double  a_138=(a_0-a_131)/*True*/;\n double  a_139=(a_1-a_132)/*True*/;\n double  a_140=(a_5-a_133)/*True*/;\n double  a_141=(a_6-a_134)/*True*/;\n double  a_142=(a_7-a_135)/*True*/;\n double  a_143=(a_10-a_136)/*True*/;\n double  a_144=(a_11-a_137)/*True*/;\n   double  a_145=(1.4-1.0)/*True*/;\n double  a_146=(1.4-1.0)/*True*/;\n double  a_147=(a_145*a_143)/*True*/;\n double  a_148=(a_146*a_144)/*True*/;\n   double  a_149=(3.0-1.4)/*True*/;\n double  a_150=(3.0-1.4)/*True*/;\n   double  a_151=pow(a_140,2.0)/*True*/;\n double  a_152=pow(a_141,2.0)/*True*/;\n double  a_153=(a_149*a_151)/*True*/;\n double  a_154=(a_150*a_152)/*True*/;\n   double  a_155=(2.0*a_138)/*True*/;\n double  a_156=(2.0*a_139)/*True*/;\n double  a_157=(a_153/a_155)/*True*/;\n double  a_158=(a_154/a_156)/*True*/;\n double  a_159=(a_147+a_157)/*True*/;\n double  a_160=(a_148+a_158)/*True*/;\n double  a_161=(a_6+a_141)/*True*/;\n  double  a_162=(a_161/2.0)/*True*/;\n double  a_163=(0.3/1.0)/*True*/;\n  double  a_164=(a_163/2.0)/*True*/;\n double  a_165=(a_160-a_159)/*True*/;\n double  a_166=(0.2*1.0)/*True*/;\n  double  a_167=(2.0*a_141)/*True*/;\n double  a_168=(a_142-a_167)/*True*/;\n double  a_169=(a_168+a_140)/*True*/;\n double  a_170=(a_166*a_169)/*True*/;\n double  a_171=(-a_170)/*True*/;\n double  a_172=(a_165+a_171)/*True*/;\n double  a_173=(a_164*a_172)/*True*/;\n double  a_174=(a_162-a_173)/*True*/;\n \n",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=(+a_174);\n\n}\n"]),Raw "\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nFacet_m1_src__1_dest__0_Send.Ridge_m1_Om_148_r__1_r__0[ix]=Rsc1[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "142"}),Raw ")];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRidge_0_Om_148_r__1_r__0[ix]=Rsc1[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")];}\n\n",PotentialSubroutine (Src [Raw "\nfor (int  ix = ",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw " ; ix < ",Hole (Typed {_holeType = "int", _holeExpr = "146"}),Raw " ; ix += 1 ){\n             double  a=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "154"}),Raw ")]/*True*/;\n double  a_0=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "155"}),Raw ")]/*True*/;\n double  a_1=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "156"}),Raw ")]/*True*/;\n double  a_2=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "157"}),Raw ")]/*True*/;\n double  a_3=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw ")]/*True*/;\n double  a_4=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "154"}),Raw ")]/*True*/;\n double  a_5=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "155"}),Raw ")]/*True*/;\n double  a_6=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "156"}),Raw ")]/*True*/;\n double  a_7=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "157"}),Raw ")]/*True*/;\n double  a_8=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw ")]/*True*/;\n double  a_9=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "154"}),Raw ")]/*True*/;\n double  a_10=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "155"}),Raw ")]/*True*/;\n double  a_11=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "156"}),Raw ")]/*True*/;\n double  a_12=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "157"}),Raw ")]/*True*/;\n double  a_13=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw ")]/*True*/;\n    double  a_14=(1.4-1.0)/*True*/;\n double  a_15=(1.4-1.0)/*True*/;\n double  a_16=(1.4-1.0)/*True*/;\n double  a_17=(a_14*a_10)/*True*/;\n double  a_18=(a_15*a_11)/*True*/;\n double  a_19=(a_16*a_12)/*True*/;\n    double  a_20=(3.0-1.4)/*True*/;\n double  a_21=(3.0-1.4)/*True*/;\n double  a_22=(3.0-1.4)/*True*/;\n    double  a_23=pow(a_5,2.0)/*True*/;\n double  a_24=pow(a_6,2.0)/*True*/;\n double  a_25=pow(a_7,2.0)/*True*/;\n double  a_26=(a_20*a_23)/*True*/;\n double  a_27=(a_21*a_24)/*True*/;\n double  a_28=(a_22*a_25)/*True*/;\n    double  a_29=(2.0*a_0)/*True*/;\n double  a_30=(2.0*a_1)/*True*/;\n double  a_31=(2.0*a_2)/*True*/;\n double  a_32=(a_26/a_29)/*True*/;\n double  a_33=(a_27/a_30)/*True*/;\n double  a_34=(a_28/a_31)/*True*/;\n double  a_35=(a_17+a_32)/*True*/;\n double  a_36=(a_18+a_33)/*True*/;\n double  a_37=(a_19+a_34)/*True*/;\n double  a_38=(1.4*a_10)/*True*/;\n double  a_39=(1.4*a_11)/*True*/;\n double  a_40=(1.4*a_12)/*True*/;\n double  a_41=(1.4*a_13)/*True*/;\n double  a_42=(a_38*a_5)/*True*/;\n double  a_43=(a_39*a_6)/*True*/;\n double  a_44=(a_40*a_7)/*True*/;\n double  a_45=(a_41*a_8)/*True*/;\n double  a_46=(a_42/a_0)/*True*/;\n double  a_47=(a_43/a_1)/*True*/;\n double  a_48=(a_44/a_2)/*True*/;\n double  a_49=(a_45/a_3)/*True*/;\n     double  a_50=(1.4-1.0)/*True*/;\n double  a_51=(1.4-1.0)/*True*/;\n double  a_52=(1.4-1.0)/*True*/;\n double  a_53=(1.4-1.0)/*True*/;\n     double  a_54=pow(a_5,3.0)/*True*/;\n double  a_55=pow(a_6,3.0)/*True*/;\n double  a_56=pow(a_7,3.0)/*True*/;\n double  a_57=pow(a_8,3.0)/*True*/;\n double  a_58=(a_50*a_54)/*True*/;\n double  a_59=(a_51*a_55)/*True*/;\n double  a_60=(a_52*a_56)/*True*/;\n double  a_61=(a_53*a_57)/*True*/;\n         double  a_62=pow(a_0,2.0)/*True*/;\n double  a_63=pow(a_1,2.0)/*True*/;\n double  a_64=pow(a_2,2.0)/*True*/;\n double  a_65=pow(a_3,2.0)/*True*/;\n double  a_66=(2.0*a_62)/*True*/;\n double  a_67=(2.0*a_63)/*True*/;\n double  a_68=(2.0*a_64)/*True*/;\n double  a_69=(2.0*a_65)/*True*/;\n double  a_70=(a_58/a_66)/*True*/;\n double  a_71=(a_59/a_67)/*True*/;\n double  a_72=(a_60/a_68)/*True*/;\n double  a_73=(a_61/a_69)/*True*/;\n double  a_74=(a_46-a_70)/*True*/;\n double  a_75=(a_47-a_71)/*True*/;\n double  a_76=(a_48-a_72)/*True*/;\n double  a_77=(a_49-a_73)/*True*/;\n double  a_78=(0.3/1.0)/*True*/;\n double  a_79=(0.3/1.0)/*True*/;\n double  a_80=(0.3/1.0)/*True*/;\n double  a_81=(a_6-a_5)/*True*/;\n double  a_82=(a_7-a_6)/*True*/;\n double  a_83=(a_36-a_35)/*True*/;\n double  a_84=(a_37-a_36)/*True*/;\n double  a_85=(a_75-a_74)/*True*/;\n double  a_86=(a_76-a_75)/*True*/;\n double  a_87=(a_77-a_76)/*True*/;\n double  a_88=(0.2*1.0)/*True*/;\n double  a_89=(0.2*1.0)/*True*/;\n double  a_90=(0.2*1.0)/*True*/;\n    double  a_91=(2.0*a_0)/*True*/;\n double  a_92=(2.0*a_1)/*True*/;\n double  a_93=(2.0*a_5)/*True*/;\n double  a_94=(2.0*a_6)/*True*/;\n double  a_95=(2.0*a_10)/*True*/;\n double  a_96=(2.0*a_11)/*True*/;\n double  a_97=(2.0*a_12)/*True*/;\n double  a_98=(a_1-a_91)/*True*/;\n double  a_99=(a_2-a_92)/*True*/;\n double  a_100=(a_6-a_93)/*True*/;\n double  a_101=(a_7-a_94)/*True*/;\n double  a_102=(a_11-a_95)/*True*/;\n double  a_103=(a_12-a_96)/*True*/;\n double  a_104=(a_13-a_97)/*True*/;\n double  a_105=(a_98+a)/*True*/;\n double  a_106=(a_99+a_0)/*True*/;\n double  a_107=(a_100+a_4)/*True*/;\n double  a_108=(a_101+a_5)/*True*/;\n double  a_109=(a_102+a_9)/*True*/;\n double  a_110=(a_103+a_10)/*True*/;\n double  a_111=(a_104+a_11)/*True*/;\n double  a_112=(a_88*a_105)/*True*/;\n double  a_113=(a_89*a_106)/*True*/;\n double  a_114=(a_88*a_107)/*True*/;\n double  a_115=(a_89*a_108)/*True*/;\n double  a_116=(a_88*a_109)/*True*/;\n double  a_117=(a_89*a_110)/*True*/;\n double  a_118=(a_90*a_111)/*True*/;\n double  a_119=(-a_112)/*True*/;\n double  a_120=(-a_113)/*True*/;\n double  a_121=(-a_114)/*True*/;\n double  a_122=(-a_115)/*True*/;\n double  a_123=(-a_116)/*True*/;\n double  a_124=(-a_117)/*True*/;\n double  a_125=(-a_118)/*True*/;\n double  a_126=(a_81+a_119)/*True*/;\n double  a_127=(a_82+a_120)/*True*/;\n double  a_128=(a_83+a_121)/*True*/;\n double  a_129=(a_84+a_122)/*True*/;\n double  a_130=(a_85+a_123)/*True*/;\n double  a_131=(a_86+a_124)/*True*/;\n double  a_132=(a_87+a_125)/*True*/;\n double  a_133=(a_78*a_126)/*True*/;\n double  a_134=(a_79*a_127)/*True*/;\n double  a_135=(a_78*a_128)/*True*/;\n double  a_136=(a_79*a_129)/*True*/;\n double  a_137=(a_78*a_130)/*True*/;\n double  a_138=(a_79*a_131)/*True*/;\n double  a_139=(a_80*a_132)/*True*/;\n double  a_140=(a_0-a_133)/*True*/;\n double  a_141=(a_1-a_134)/*True*/;\n double  a_142=(a_5-a_135)/*True*/;\n double  a_143=(a_6-a_136)/*True*/;\n double  a_144=(a_10-a_137)/*True*/;\n double  a_145=(a_11-a_138)/*True*/;\n double  a_146=(a_12-a_139)/*True*/;\n double  a_147=(1.4*a_144)/*True*/;\n double  a_148=(1.4*a_145)/*True*/;\n double  a_149=(a_147*a_142)/*True*/;\n double  a_150=(a_148*a_143)/*True*/;\n double  a_151=(a_149/a_140)/*True*/;\n double  a_152=(a_150/a_141)/*True*/;\n   double  a_153=(1.4-1.0)/*True*/;\n double  a_154=(1.4-1.0)/*True*/;\n   double  a_155=pow(a_142,3.0)/*True*/;\n double  a_156=pow(a_143,3.0)/*True*/;\n double  a_157=(a_153*a_155)/*True*/;\n double  a_158=(a_154*a_156)/*True*/;\n     double  a_159=pow(a_140,2.0)/*True*/;\n double  a_160=pow(a_141,2.0)/*True*/;\n double  a_161=(2.0*a_159)/*True*/;\n double  a_162=(2.0*a_160)/*True*/;\n double  a_163=(a_157/a_161)/*True*/;\n double  a_164=(a_158/a_162)/*True*/;\n double  a_165=(a_151-a_163)/*True*/;\n double  a_166=(a_152-a_164)/*True*/;\n double  a_167=(a_11+a_145)/*True*/;\n  double  a_168=(a_167/2.0)/*True*/;\n double  a_169=(0.3/1.0)/*True*/;\n  double  a_170=(a_169/2.0)/*True*/;\n double  a_171=(a_166-a_165)/*True*/;\n double  a_172=(0.2*1.0)/*True*/;\n  double  a_173=(2.0*a_145)/*True*/;\n double  a_174=(a_146-a_173)/*True*/;\n double  a_175=(a_174+a_144)/*True*/;\n double  a_176=(a_172*a_175)/*True*/;\n double  a_177=(-a_176)/*True*/;\n double  a_178=(a_171+a_177)/*True*/;\n double  a_179=(a_170*a_178)/*True*/;\n double  a_180=(a_168-a_179)/*True*/;\n \n",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=(+a_180);\n\n}\n"]),Raw "\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nFacet_m1_src__1_dest__0_Send.Ridge_m1_Om_149_r__1_r__0[ix]=Rsc2[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "142"}),Raw ")];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRidge_0_Om_149_r__1_r__0[ix]=Rsc2[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")];}\n\n",PotentialSubroutine (Src [Raw "\nfor (int  ix = ",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw " ; ix < ",Hole (Typed {_holeType = "int", _holeExpr = "300"}),Raw " ; ix += 1 ){\n            double  a=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-158"}),Raw ")]/*True*/;\n double  a_0=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-157"}),Raw ")]/*True*/;\n double  a_1=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-156"}),Raw ")]/*True*/;\n double  a_2=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-155"}),Raw ")]/*True*/;\n double  a_3=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-154"}),Raw ")]/*True*/;\n double  a_4=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-158"}),Raw ")]/*True*/;\n double  a_5=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-157"}),Raw ")]/*True*/;\n double  a_6=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-156"}),Raw ")]/*True*/;\n double  a_7=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-155"}),Raw ")]/*True*/;\n double  a_8=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-154"}),Raw ")]/*True*/;\n double  a_9=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-157"}),Raw ")]/*True*/;\n double  a_10=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-156"}),Raw ")]/*True*/;\n double  a_11=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-155"}),Raw ")]/*True*/;\n    double  a_12=(1.4-1.0)/*True*/;\n double  a_13=(1.4-1.0)/*True*/;\n double  a_14=(1.4-1.0)/*True*/;\n double  a_15=(a_12*a_9)/*True*/;\n double  a_16=(a_13*a_10)/*True*/;\n double  a_17=(a_14*a_11)/*True*/;\n    double  a_18=(3.0-1.4)/*True*/;\n double  a_19=(3.0-1.4)/*True*/;\n double  a_20=(3.0-1.4)/*True*/;\n    double  a_21=pow(a_5,2.0)/*True*/;\n double  a_22=pow(a_6,2.0)/*True*/;\n double  a_23=pow(a_7,2.0)/*True*/;\n double  a_24=(a_18*a_21)/*True*/;\n double  a_25=(a_19*a_22)/*True*/;\n double  a_26=(a_20*a_23)/*True*/;\n    double  a_27=(2.0*a_0)/*True*/;\n double  a_28=(2.0*a_1)/*True*/;\n double  a_29=(2.0*a_2)/*True*/;\n double  a_30=(a_24/a_27)/*True*/;\n double  a_31=(a_25/a_28)/*True*/;\n double  a_32=(a_26/a_29)/*True*/;\n double  a_33=(a_15+a_30)/*True*/;\n double  a_34=(a_16+a_31)/*True*/;\n double  a_35=(a_17+a_32)/*True*/;\n double  a_36=(0.3/1.0)/*True*/;\n double  a_37=(0.3/1.0)/*True*/;\n double  a_38=(0.3/1.0)/*True*/;\n double  a_39=(a_6-a_5)/*True*/;\n double  a_40=(a_7-a_6)/*True*/;\n double  a_41=(a_8-a_7)/*True*/;\n double  a_42=(a_34-a_33)/*True*/;\n double  a_43=(a_35-a_34)/*True*/;\n double  a_44=(0.2*1.0)/*True*/;\n double  a_45=(0.2*1.0)/*True*/;\n double  a_46=(0.2*1.0)/*True*/;\n    double  a_47=(2.0*a_0)/*True*/;\n double  a_48=(2.0*a_1)/*True*/;\n double  a_49=(2.0*a_2)/*True*/;\n double  a_50=(2.0*a_5)/*True*/;\n double  a_51=(2.0*a_6)/*True*/;\n double  a_52=(a_1-a_47)/*True*/;\n double  a_53=(a_2-a_48)/*True*/;\n double  a_54=(a_3-a_49)/*True*/;\n double  a_55=(a_6-a_50)/*True*/;\n double  a_56=(a_7-a_51)/*True*/;\n double  a_57=(a_52+a)/*True*/;\n double  a_58=(a_53+a_0)/*True*/;\n double  a_59=(a_54+a_1)/*True*/;\n double  a_60=(a_55+a_4)/*True*/;\n double  a_61=(a_56+a_5)/*True*/;\n double  a_62=(a_44*a_57)/*True*/;\n double  a_63=(a_45*a_58)/*True*/;\n double  a_64=(a_46*a_59)/*True*/;\n double  a_65=(a_44*a_60)/*True*/;\n double  a_66=(a_45*a_61)/*True*/;\n double  a_67=(-a_62)/*True*/;\n double  a_68=(-a_63)/*True*/;\n double  a_69=(-a_64)/*True*/;\n double  a_70=(-a_65)/*True*/;\n double  a_71=(-a_66)/*True*/;\n double  a_72=(a_39+a_67)/*True*/;\n double  a_73=(a_40+a_68)/*True*/;\n double  a_74=(a_41+a_69)/*True*/;\n double  a_75=(a_42+a_70)/*True*/;\n double  a_76=(a_43+a_71)/*True*/;\n double  a_77=(a_36*a_72)/*True*/;\n double  a_78=(a_37*a_73)/*True*/;\n double  a_79=(a_38*a_74)/*True*/;\n double  a_80=(a_36*a_75)/*True*/;\n double  a_81=(a_37*a_76)/*True*/;\n double  a_82=(a_0-a_77)/*True*/;\n double  a_83=(a_1-a_78)/*True*/;\n double  a_84=(a_2-a_79)/*True*/;\n double  a_85=(a_5-a_80)/*True*/;\n double  a_86=(a_6-a_81)/*True*/;\n double  a_87=(a_1+a_83)/*True*/;\n  double  a_88=(a_87/2.0)/*True*/;\n double  a_89=(0.3/1.0)/*True*/;\n  double  a_90=(a_89/2.0)/*True*/;\n double  a_91=(a_86-a_85)/*True*/;\n double  a_92=(0.2*1.0)/*True*/;\n  double  a_93=(2.0*a_83)/*True*/;\n double  a_94=(a_84-a_93)/*True*/;\n double  a_95=(a_94+a_82)/*True*/;\n double  a_96=(a_92*a_95)/*True*/;\n double  a_97=(-a_96)/*True*/;\n double  a_98=(a_91+a_97)/*True*/;\n double  a_99=(a_90*a_98)/*True*/;\n double  a_100=(a_88-a_99)/*True*/;\n \nr[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=a_100;\n\n}\n"]),Raw "\n",PotentialSubroutine (Src [Raw "\nfor (int  ix = ",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw " ; ix < ",Hole (Typed {_holeType = "int", _holeExpr = "300"}),Raw " ; ix += 1 ){\n             double  a=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-158"}),Raw ")]/*True*/;\n double  a_0=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-157"}),Raw ")]/*True*/;\n double  a_1=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-156"}),Raw ")]/*True*/;\n double  a_2=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-155"}),Raw ")]/*True*/;\n double  a_3=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-154"}),Raw ")]/*True*/;\n double  a_4=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-158"}),Raw ")]/*True*/;\n double  a_5=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-157"}),Raw ")]/*True*/;\n double  a_6=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-156"}),Raw ")]/*True*/;\n double  a_7=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-155"}),Raw ")]/*True*/;\n double  a_8=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-154"}),Raw ")]/*True*/;\n double  a_9=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-158"}),Raw ")]/*True*/;\n double  a_10=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-157"}),Raw ")]/*True*/;\n double  a_11=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-156"}),Raw ")]/*True*/;\n double  a_12=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-155"}),Raw ")]/*True*/;\n double  a_13=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-154"}),Raw ")]/*True*/;\n     double  a_14=(1.4-1.0)/*True*/;\n double  a_15=(1.4-1.0)/*True*/;\n double  a_16=(1.4-1.0)/*True*/;\n double  a_17=(1.4-1.0)/*True*/;\n double  a_18=(a_14*a_10)/*True*/;\n double  a_19=(a_15*a_11)/*True*/;\n double  a_20=(a_16*a_12)/*True*/;\n double  a_21=(a_17*a_13)/*True*/;\n     double  a_22=(3.0-1.4)/*True*/;\n double  a_23=(3.0-1.4)/*True*/;\n double  a_24=(3.0-1.4)/*True*/;\n double  a_25=(3.0-1.4)/*True*/;\n     double  a_26=pow(a_5,2.0)/*True*/;\n double  a_27=pow(a_6,2.0)/*True*/;\n double  a_28=pow(a_7,2.0)/*True*/;\n double  a_29=pow(a_8,2.0)/*True*/;\n double  a_30=(a_22*a_26)/*True*/;\n double  a_31=(a_23*a_27)/*True*/;\n double  a_32=(a_24*a_28)/*True*/;\n double  a_33=(a_25*a_29)/*True*/;\n     double  a_34=(2.0*a_0)/*True*/;\n double  a_35=(2.0*a_1)/*True*/;\n double  a_36=(2.0*a_2)/*True*/;\n double  a_37=(2.0*a_3)/*True*/;\n double  a_38=(a_30/a_34)/*True*/;\n double  a_39=(a_31/a_35)/*True*/;\n double  a_40=(a_32/a_36)/*True*/;\n double  a_41=(a_33/a_37)/*True*/;\n double  a_42=(a_18+a_38)/*True*/;\n double  a_43=(a_19+a_39)/*True*/;\n double  a_44=(a_20+a_40)/*True*/;\n double  a_45=(a_21+a_41)/*True*/;\n double  a_46=(1.4*a_10)/*True*/;\n double  a_47=(1.4*a_11)/*True*/;\n double  a_48=(1.4*a_12)/*True*/;\n double  a_49=(a_46*a_5)/*True*/;\n double  a_50=(a_47*a_6)/*True*/;\n double  a_51=(a_48*a_7)/*True*/;\n double  a_52=(a_49/a_0)/*True*/;\n double  a_53=(a_50/a_1)/*True*/;\n double  a_54=(a_51/a_2)/*True*/;\n    double  a_55=(1.4-1.0)/*True*/;\n double  a_56=(1.4-1.0)/*True*/;\n double  a_57=(1.4-1.0)/*True*/;\n    double  a_58=pow(a_5,3.0)/*True*/;\n double  a_59=pow(a_6,3.0)/*True*/;\n double  a_60=pow(a_7,3.0)/*True*/;\n double  a_61=(a_55*a_58)/*True*/;\n double  a_62=(a_56*a_59)/*True*/;\n double  a_63=(a_57*a_60)/*True*/;\n       double  a_64=pow(a_0,2.0)/*True*/;\n double  a_65=pow(a_1,2.0)/*True*/;\n double  a_66=pow(a_2,2.0)/*True*/;\n double  a_67=(2.0*a_64)/*True*/;\n double  a_68=(2.0*a_65)/*True*/;\n double  a_69=(2.0*a_66)/*True*/;\n double  a_70=(a_61/a_67)/*True*/;\n double  a_71=(a_62/a_68)/*True*/;\n double  a_72=(a_63/a_69)/*True*/;\n double  a_73=(a_52-a_70)/*True*/;\n double  a_74=(a_53-a_71)/*True*/;\n double  a_75=(a_54-a_72)/*True*/;\n double  a_76=(0.3/1.0)/*True*/;\n double  a_77=(0.3/1.0)/*True*/;\n double  a_78=(0.3/1.0)/*True*/;\n double  a_79=(a_6-a_5)/*True*/;\n double  a_80=(a_7-a_6)/*True*/;\n double  a_81=(a_43-a_42)/*True*/;\n double  a_82=(a_44-a_43)/*True*/;\n double  a_83=(a_45-a_44)/*True*/;\n double  a_84=(a_74-a_73)/*True*/;\n double  a_85=(a_75-a_74)/*True*/;\n double  a_86=(0.2*1.0)/*True*/;\n double  a_87=(0.2*1.0)/*True*/;\n double  a_88=(0.2*1.0)/*True*/;\n    double  a_89=(2.0*a_0)/*True*/;\n double  a_90=(2.0*a_1)/*True*/;\n double  a_91=(2.0*a_5)/*True*/;\n double  a_92=(2.0*a_6)/*True*/;\n double  a_93=(2.0*a_7)/*True*/;\n double  a_94=(2.0*a_10)/*True*/;\n double  a_95=(2.0*a_11)/*True*/;\n double  a_96=(a_1-a_89)/*True*/;\n double  a_97=(a_2-a_90)/*True*/;\n double  a_98=(a_6-a_91)/*True*/;\n double  a_99=(a_7-a_92)/*True*/;\n double  a_100=(a_8-a_93)/*True*/;\n double  a_101=(a_11-a_94)/*True*/;\n double  a_102=(a_12-a_95)/*True*/;\n double  a_103=(a_96+a)/*True*/;\n double  a_104=(a_97+a_0)/*True*/;\n double  a_105=(a_98+a_4)/*True*/;\n double  a_106=(a_99+a_5)/*True*/;\n double  a_107=(a_100+a_6)/*True*/;\n double  a_108=(a_101+a_9)/*True*/;\n double  a_109=(a_102+a_10)/*True*/;\n double  a_110=(a_86*a_103)/*True*/;\n double  a_111=(a_87*a_104)/*True*/;\n double  a_112=(a_86*a_105)/*True*/;\n double  a_113=(a_87*a_106)/*True*/;\n double  a_114=(a_88*a_107)/*True*/;\n double  a_115=(a_86*a_108)/*True*/;\n double  a_116=(a_87*a_109)/*True*/;\n double  a_117=(-a_110)/*True*/;\n double  a_118=(-a_111)/*True*/;\n double  a_119=(-a_112)/*True*/;\n double  a_120=(-a_113)/*True*/;\n double  a_121=(-a_114)/*True*/;\n double  a_122=(-a_115)/*True*/;\n double  a_123=(-a_116)/*True*/;\n double  a_124=(a_79+a_117)/*True*/;\n double  a_125=(a_80+a_118)/*True*/;\n double  a_126=(a_81+a_119)/*True*/;\n double  a_127=(a_82+a_120)/*True*/;\n double  a_128=(a_83+a_121)/*True*/;\n double  a_129=(a_84+a_122)/*True*/;\n double  a_130=(a_85+a_123)/*True*/;\n double  a_131=(a_76*a_124)/*True*/;\n double  a_132=(a_77*a_125)/*True*/;\n double  a_133=(a_76*a_126)/*True*/;\n double  a_134=(a_77*a_127)/*True*/;\n double  a_135=(a_78*a_128)/*True*/;\n double  a_136=(a_76*a_129)/*True*/;\n double  a_137=(a_77*a_130)/*True*/;\n double  a_138=(a_0-a_131)/*True*/;\n double  a_139=(a_1-a_132)/*True*/;\n double  a_140=(a_5-a_133)/*True*/;\n double  a_141=(a_6-a_134)/*True*/;\n double  a_142=(a_7-a_135)/*True*/;\n double  a_143=(a_10-a_136)/*True*/;\n double  a_144=(a_11-a_137)/*True*/;\n   double  a_145=(1.4-1.0)/*True*/;\n double  a_146=(1.4-1.0)/*True*/;\n double  a_147=(a_145*a_143)/*True*/;\n double  a_148=(a_146*a_144)/*True*/;\n   double  a_149=(3.0-1.4)/*True*/;\n double  a_150=(3.0-1.4)/*True*/;\n   double  a_151=pow(a_140,2.0)/*True*/;\n double  a_152=pow(a_141,2.0)/*True*/;\n double  a_153=(a_149*a_151)/*True*/;\n double  a_154=(a_150*a_152)/*True*/;\n   double  a_155=(2.0*a_138)/*True*/;\n double  a_156=(2.0*a_139)/*True*/;\n double  a_157=(a_153/a_155)/*True*/;\n double  a_158=(a_154/a_156)/*True*/;\n double  a_159=(a_147+a_157)/*True*/;\n double  a_160=(a_148+a_158)/*True*/;\n double  a_161=(a_6+a_141)/*True*/;\n  double  a_162=(a_161/2.0)/*True*/;\n double  a_163=(0.3/1.0)/*True*/;\n  double  a_164=(a_163/2.0)/*True*/;\n double  a_165=(a_160-a_159)/*True*/;\n double  a_166=(0.2*1.0)/*True*/;\n  double  a_167=(2.0*a_141)/*True*/;\n double  a_168=(a_142-a_167)/*True*/;\n double  a_169=(a_168+a_140)/*True*/;\n double  a_170=(a_166*a_169)/*True*/;\n double  a_171=(-a_170)/*True*/;\n double  a_172=(a_165+a_171)/*True*/;\n double  a_173=(a_164*a_172)/*True*/;\n double  a_174=(a_162-a_173)/*True*/;\n \nm[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=a_174;\n\n}\n"]),Raw "\n",PotentialSubroutine (Src [Raw "\nfor (int  ix = ",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw " ; ix < ",Hole (Typed {_holeType = "int", _holeExpr = "300"}),Raw " ; ix += 1 ){\n             double  a=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-158"}),Raw ")]/*True*/;\n double  a_0=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-157"}),Raw ")]/*True*/;\n double  a_1=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-156"}),Raw ")]/*True*/;\n double  a_2=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-155"}),Raw ")]/*True*/;\n double  a_3=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-154"}),Raw ")]/*True*/;\n double  a_4=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-158"}),Raw ")]/*True*/;\n double  a_5=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-157"}),Raw ")]/*True*/;\n double  a_6=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-156"}),Raw ")]/*True*/;\n double  a_7=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-155"}),Raw ")]/*True*/;\n double  a_8=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-154"}),Raw ")]/*True*/;\n double  a_9=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-158"}),Raw ")]/*True*/;\n double  a_10=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-157"}),Raw ")]/*True*/;\n double  a_11=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-156"}),Raw ")]/*True*/;\n double  a_12=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-155"}),Raw ")]/*True*/;\n double  a_13=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-154"}),Raw ")]/*True*/;\n    double  a_14=(1.4-1.0)/*True*/;\n double  a_15=(1.4-1.0)/*True*/;\n double  a_16=(1.4-1.0)/*True*/;\n double  a_17=(a_14*a_10)/*True*/;\n double  a_18=(a_15*a_11)/*True*/;\n double  a_19=(a_16*a_12)/*True*/;\n    double  a_20=(3.0-1.4)/*True*/;\n double  a_21=(3.0-1.4)/*True*/;\n double  a_22=(3.0-1.4)/*True*/;\n    double  a_23=pow(a_5,2.0)/*True*/;\n double  a_24=pow(a_6,2.0)/*True*/;\n double  a_25=pow(a_7,2.0)/*True*/;\n double  a_26=(a_20*a_23)/*True*/;\n double  a_27=(a_21*a_24)/*True*/;\n double  a_28=(a_22*a_25)/*True*/;\n    double  a_29=(2.0*a_0)/*True*/;\n double  a_30=(2.0*a_1)/*True*/;\n double  a_31=(2.0*a_2)/*True*/;\n double  a_32=(a_26/a_29)/*True*/;\n double  a_33=(a_27/a_30)/*True*/;\n double  a_34=(a_28/a_31)/*True*/;\n double  a_35=(a_17+a_32)/*True*/;\n double  a_36=(a_18+a_33)/*True*/;\n double  a_37=(a_19+a_34)/*True*/;\n double  a_38=(1.4*a_10)/*True*/;\n double  a_39=(1.4*a_11)/*True*/;\n double  a_40=(1.4*a_12)/*True*/;\n double  a_41=(1.4*a_13)/*True*/;\n double  a_42=(a_38*a_5)/*True*/;\n double  a_43=(a_39*a_6)/*True*/;\n double  a_44=(a_40*a_7)/*True*/;\n double  a_45=(a_41*a_8)/*True*/;\n double  a_46=(a_42/a_0)/*True*/;\n double  a_47=(a_43/a_1)/*True*/;\n double  a_48=(a_44/a_2)/*True*/;\n double  a_49=(a_45/a_3)/*True*/;\n     double  a_50=(1.4-1.0)/*True*/;\n double  a_51=(1.4-1.0)/*True*/;\n double  a_52=(1.4-1.0)/*True*/;\n double  a_53=(1.4-1.0)/*True*/;\n     double  a_54=pow(a_5,3.0)/*True*/;\n double  a_55=pow(a_6,3.0)/*True*/;\n double  a_56=pow(a_7,3.0)/*True*/;\n double  a_57=pow(a_8,3.0)/*True*/;\n double  a_58=(a_50*a_54)/*True*/;\n double  a_59=(a_51*a_55)/*True*/;\n double  a_60=(a_52*a_56)/*True*/;\n double  a_61=(a_53*a_57)/*True*/;\n         double  a_62=pow(a_0,2.0)/*True*/;\n double  a_63=pow(a_1,2.0)/*True*/;\n double  a_64=pow(a_2,2.0)/*True*/;\n double  a_65=pow(a_3,2.0)/*True*/;\n double  a_66=(2.0*a_62)/*True*/;\n double  a_67=(2.0*a_63)/*True*/;\n double  a_68=(2.0*a_64)/*True*/;\n double  a_69=(2.0*a_65)/*True*/;\n double  a_70=(a_58/a_66)/*True*/;\n double  a_71=(a_59/a_67)/*True*/;\n double  a_72=(a_60/a_68)/*True*/;\n double  a_73=(a_61/a_69)/*True*/;\n double  a_74=(a_46-a_70)/*True*/;\n double  a_75=(a_47-a_71)/*True*/;\n double  a_76=(a_48-a_72)/*True*/;\n double  a_77=(a_49-a_73)/*True*/;\n double  a_78=(0.3/1.0)/*True*/;\n double  a_79=(0.3/1.0)/*True*/;\n double  a_80=(0.3/1.0)/*True*/;\n double  a_81=(a_6-a_5)/*True*/;\n double  a_82=(a_7-a_6)/*True*/;\n double  a_83=(a_36-a_35)/*True*/;\n double  a_84=(a_37-a_36)/*True*/;\n double  a_85=(a_75-a_74)/*True*/;\n double  a_86=(a_76-a_75)/*True*/;\n double  a_87=(a_77-a_76)/*True*/;\n double  a_88=(0.2*1.0)/*True*/;\n double  a_89=(0.2*1.0)/*True*/;\n double  a_90=(0.2*1.0)/*True*/;\n    double  a_91=(2.0*a_0)/*True*/;\n double  a_92=(2.0*a_1)/*True*/;\n double  a_93=(2.0*a_5)/*True*/;\n double  a_94=(2.0*a_6)/*True*/;\n double  a_95=(2.0*a_10)/*True*/;\n double  a_96=(2.0*a_11)/*True*/;\n double  a_97=(2.0*a_12)/*True*/;\n double  a_98=(a_1-a_91)/*True*/;\n double  a_99=(a_2-a_92)/*True*/;\n double  a_100=(a_6-a_93)/*True*/;\n double  a_101=(a_7-a_94)/*True*/;\n double  a_102=(a_11-a_95)/*True*/;\n double  a_103=(a_12-a_96)/*True*/;\n double  a_104=(a_13-a_97)/*True*/;\n double  a_105=(a_98+a)/*True*/;\n double  a_106=(a_99+a_0)/*True*/;\n double  a_107=(a_100+a_4)/*True*/;\n double  a_108=(a_101+a_5)/*True*/;\n double  a_109=(a_102+a_9)/*True*/;\n double  a_110=(a_103+a_10)/*True*/;\n double  a_111=(a_104+a_11)/*True*/;\n double  a_112=(a_88*a_105)/*True*/;\n double  a_113=(a_89*a_106)/*True*/;\n double  a_114=(a_88*a_107)/*True*/;\n double  a_115=(a_89*a_108)/*True*/;\n double  a_116=(a_88*a_109)/*True*/;\n double  a_117=(a_89*a_110)/*True*/;\n double  a_118=(a_90*a_111)/*True*/;\n double  a_119=(-a_112)/*True*/;\n double  a_120=(-a_113)/*True*/;\n double  a_121=(-a_114)/*True*/;\n double  a_122=(-a_115)/*True*/;\n double  a_123=(-a_116)/*True*/;\n double  a_124=(-a_117)/*True*/;\n double  a_125=(-a_118)/*True*/;\n double  a_126=(a_81+a_119)/*True*/;\n double  a_127=(a_82+a_120)/*True*/;\n double  a_128=(a_83+a_121)/*True*/;\n double  a_129=(a_84+a_122)/*True*/;\n double  a_130=(a_85+a_123)/*True*/;\n double  a_131=(a_86+a_124)/*True*/;\n double  a_132=(a_87+a_125)/*True*/;\n double  a_133=(a_78*a_126)/*True*/;\n double  a_134=(a_79*a_127)/*True*/;\n double  a_135=(a_78*a_128)/*True*/;\n double  a_136=(a_79*a_129)/*True*/;\n double  a_137=(a_78*a_130)/*True*/;\n double  a_138=(a_79*a_131)/*True*/;\n double  a_139=(a_80*a_132)/*True*/;\n double  a_140=(a_0-a_133)/*True*/;\n double  a_141=(a_1-a_134)/*True*/;\n double  a_142=(a_5-a_135)/*True*/;\n double  a_143=(a_6-a_136)/*True*/;\n double  a_144=(a_10-a_137)/*True*/;\n double  a_145=(a_11-a_138)/*True*/;\n double  a_146=(a_12-a_139)/*True*/;\n double  a_147=(1.4*a_144)/*True*/;\n double  a_148=(1.4*a_145)/*True*/;\n double  a_149=(a_147*a_142)/*True*/;\n double  a_150=(a_148*a_143)/*True*/;\n double  a_151=(a_149/a_140)/*True*/;\n double  a_152=(a_150/a_141)/*True*/;\n   double  a_153=(1.4-1.0)/*True*/;\n double  a_154=(1.4-1.0)/*True*/;\n   double  a_155=pow(a_142,3.0)/*True*/;\n double  a_156=pow(a_143,3.0)/*True*/;\n double  a_157=(a_153*a_155)/*True*/;\n double  a_158=(a_154*a_156)/*True*/;\n     double  a_159=pow(a_140,2.0)/*True*/;\n double  a_160=pow(a_141,2.0)/*True*/;\n double  a_161=(2.0*a_159)/*True*/;\n double  a_162=(2.0*a_160)/*True*/;\n double  a_163=(a_157/a_161)/*True*/;\n double  a_164=(a_158/a_162)/*True*/;\n double  a_165=(a_151-a_163)/*True*/;\n double  a_166=(a_152-a_164)/*True*/;\n double  a_167=(a_11+a_145)/*True*/;\n  double  a_168=(a_167/2.0)/*True*/;\n double  a_169=(0.3/1.0)/*True*/;\n  double  a_170=(a_169/2.0)/*True*/;\n double  a_171=(a_166-a_165)/*True*/;\n double  a_172=(0.2*1.0)/*True*/;\n  double  a_173=(2.0*a_145)/*True*/;\n double  a_174=(a_146-a_173)/*True*/;\n double  a_175=(a_174+a_144)/*True*/;\n double  a_176=(a_172*a_175)/*True*/;\n double  a_177=(-a_176)/*True*/;\n double  a_178=(a_171+a_177)/*True*/;\n double  a_179=(a_170*a_178)/*True*/;\n double  a_180=(a_168-a_179)/*True*/;\n \ne[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=a_180;\n\n}\n"]),Raw "\n}\n"]),("Formura_internal_3.c",Src [Raw "void Formura_internal_3(){\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\ne[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=Facet_m1_src__1_dest__0_Recv.Ridge_m1_St_e[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nm[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=Facet_m1_src__1_dest__0_Recv.Ridge_m1_St_m[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nr[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=Facet_m1_src__1_dest__0_Recv.Ridge_m1_St_r[ix];}\n\n",PotentialSubroutine (Src [Raw "\nfor (int  ix = ",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw " ; ix < ",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw " ; ix += 1 ){\n            double  a=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-4"}),Raw ")]/*True*/;\n double  a_0=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-3"}),Raw ")]/*True*/;\n double  a_1=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-2"}),Raw ")]/*True*/;\n double  a_2=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-1"}),Raw ")]/*True*/;\n double  a_3=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]/*True*/;\n double  a_4=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-4"}),Raw ")]/*True*/;\n double  a_5=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-3"}),Raw ")]/*True*/;\n double  a_6=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-2"}),Raw ")]/*True*/;\n double  a_7=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-1"}),Raw ")]/*True*/;\n double  a_8=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]/*True*/;\n double  a_9=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-3"}),Raw ")]/*True*/;\n double  a_10=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-2"}),Raw ")]/*True*/;\n double  a_11=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-1"}),Raw ")]/*True*/;\n    double  a_12=(1.4-1.0)/*True*/;\n double  a_13=(1.4-1.0)/*True*/;\n double  a_14=(1.4-1.0)/*True*/;\n double  a_15=(a_12*a_9)/*True*/;\n double  a_16=(a_13*a_10)/*True*/;\n double  a_17=(a_14*a_11)/*True*/;\n    double  a_18=(3.0-1.4)/*True*/;\n double  a_19=(3.0-1.4)/*True*/;\n double  a_20=(3.0-1.4)/*True*/;\n    double  a_21=pow(a_5,2.0)/*True*/;\n double  a_22=pow(a_6,2.0)/*True*/;\n double  a_23=pow(a_7,2.0)/*True*/;\n double  a_24=(a_18*a_21)/*True*/;\n double  a_25=(a_19*a_22)/*True*/;\n double  a_26=(a_20*a_23)/*True*/;\n    double  a_27=(2.0*a_0)/*True*/;\n double  a_28=(2.0*a_1)/*True*/;\n double  a_29=(2.0*a_2)/*True*/;\n double  a_30=(a_24/a_27)/*True*/;\n double  a_31=(a_25/a_28)/*True*/;\n double  a_32=(a_26/a_29)/*True*/;\n double  a_33=(a_15+a_30)/*True*/;\n double  a_34=(a_16+a_31)/*True*/;\n double  a_35=(a_17+a_32)/*True*/;\n double  a_36=(0.3/1.0)/*True*/;\n double  a_37=(0.3/1.0)/*True*/;\n double  a_38=(0.3/1.0)/*True*/;\n double  a_39=(a_6-a_5)/*True*/;\n double  a_40=(a_7-a_6)/*True*/;\n double  a_41=(a_8-a_7)/*True*/;\n double  a_42=(a_34-a_33)/*True*/;\n double  a_43=(a_35-a_34)/*True*/;\n double  a_44=(0.2*1.0)/*True*/;\n double  a_45=(0.2*1.0)/*True*/;\n double  a_46=(0.2*1.0)/*True*/;\n    double  a_47=(2.0*a_0)/*True*/;\n double  a_48=(2.0*a_1)/*True*/;\n double  a_49=(2.0*a_2)/*True*/;\n double  a_50=(2.0*a_5)/*True*/;\n double  a_51=(2.0*a_6)/*True*/;\n double  a_52=(a_1-a_47)/*True*/;\n double  a_53=(a_2-a_48)/*True*/;\n double  a_54=(a_3-a_49)/*True*/;\n double  a_55=(a_6-a_50)/*True*/;\n double  a_56=(a_7-a_51)/*True*/;\n double  a_57=(a_52+a)/*True*/;\n double  a_58=(a_53+a_0)/*True*/;\n double  a_59=(a_54+a_1)/*True*/;\n double  a_60=(a_55+a_4)/*True*/;\n double  a_61=(a_56+a_5)/*True*/;\n double  a_62=(a_44*a_57)/*True*/;\n double  a_63=(a_45*a_58)/*True*/;\n double  a_64=(a_46*a_59)/*True*/;\n double  a_65=(a_44*a_60)/*True*/;\n double  a_66=(a_45*a_61)/*True*/;\n double  a_67=(-a_62)/*True*/;\n double  a_68=(-a_63)/*True*/;\n double  a_69=(-a_64)/*True*/;\n double  a_70=(-a_65)/*True*/;\n double  a_71=(-a_66)/*True*/;\n double  a_72=(a_39+a_67)/*True*/;\n double  a_73=(a_40+a_68)/*True*/;\n double  a_74=(a_41+a_69)/*True*/;\n double  a_75=(a_42+a_70)/*True*/;\n double  a_76=(a_43+a_71)/*True*/;\n double  a_77=(a_36*a_72)/*True*/;\n double  a_78=(a_37*a_73)/*True*/;\n double  a_79=(a_38*a_74)/*True*/;\n double  a_80=(a_36*a_75)/*True*/;\n double  a_81=(a_37*a_76)/*True*/;\n double  a_82=(a_0-a_77)/*True*/;\n double  a_83=(a_1-a_78)/*True*/;\n double  a_84=(a_2-a_79)/*True*/;\n double  a_85=(a_5-a_80)/*True*/;\n double  a_86=(a_6-a_81)/*True*/;\n double  a_87=(a_1+a_83)/*True*/;\n  double  a_88=(a_87/2.0)/*True*/;\n double  a_89=(0.3/1.0)/*True*/;\n  double  a_90=(a_89/2.0)/*True*/;\n double  a_91=(a_86-a_85)/*True*/;\n double  a_92=(0.2*1.0)/*True*/;\n  double  a_93=(2.0*a_83)/*True*/;\n double  a_94=(a_84-a_93)/*True*/;\n double  a_95=(a_94+a_82)/*True*/;\n double  a_96=(a_92*a_95)/*True*/;\n double  a_97=(-a_96)/*True*/;\n double  a_98=(a_91+a_97)/*True*/;\n double  a_99=(a_90*a_98)/*True*/;\n double  a_100=(a_88-a_99)/*True*/;\n \n",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=(+a_100);\n\n}\n"]),Raw "\n",PotentialSubroutine (Src [Raw "\nfor (int  ix = ",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw " ; ix < ",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw " ; ix += 1 ){\n             double  a=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-4"}),Raw ")]/*True*/;\n double  a_0=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-3"}),Raw ")]/*True*/;\n double  a_1=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-2"}),Raw ")]/*True*/;\n double  a_2=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-1"}),Raw ")]/*True*/;\n double  a_3=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]/*True*/;\n double  a_4=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-4"}),Raw ")]/*True*/;\n double  a_5=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-3"}),Raw ")]/*True*/;\n double  a_6=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-2"}),Raw ")]/*True*/;\n double  a_7=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-1"}),Raw ")]/*True*/;\n double  a_8=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]/*True*/;\n double  a_9=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-4"}),Raw ")]/*True*/;\n double  a_10=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-3"}),Raw ")]/*True*/;\n double  a_11=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-2"}),Raw ")]/*True*/;\n double  a_12=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-1"}),Raw ")]/*True*/;\n double  a_13=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]/*True*/;\n     double  a_14=(1.4-1.0)/*True*/;\n double  a_15=(1.4-1.0)/*True*/;\n double  a_16=(1.4-1.0)/*True*/;\n double  a_17=(1.4-1.0)/*True*/;\n double  a_18=(a_14*a_10)/*True*/;\n double  a_19=(a_15*a_11)/*True*/;\n double  a_20=(a_16*a_12)/*True*/;\n double  a_21=(a_17*a_13)/*True*/;\n     double  a_22=(3.0-1.4)/*True*/;\n double  a_23=(3.0-1.4)/*True*/;\n double  a_24=(3.0-1.4)/*True*/;\n double  a_25=(3.0-1.4)/*True*/;\n     double  a_26=pow(a_5,2.0)/*True*/;\n double  a_27=pow(a_6,2.0)/*True*/;\n double  a_28=pow(a_7,2.0)/*True*/;\n double  a_29=pow(a_8,2.0)/*True*/;\n double  a_30=(a_22*a_26)/*True*/;\n double  a_31=(a_23*a_27)/*True*/;\n double  a_32=(a_24*a_28)/*True*/;\n double  a_33=(a_25*a_29)/*True*/;\n     double  a_34=(2.0*a_0)/*True*/;\n double  a_35=(2.0*a_1)/*True*/;\n double  a_36=(2.0*a_2)/*True*/;\n double  a_37=(2.0*a_3)/*True*/;\n double  a_38=(a_30/a_34)/*True*/;\n double  a_39=(a_31/a_35)/*True*/;\n double  a_40=(a_32/a_36)/*True*/;\n double  a_41=(a_33/a_37)/*True*/;\n double  a_42=(a_18+a_38)/*True*/;\n double  a_43=(a_19+a_39)/*True*/;\n double  a_44=(a_20+a_40)/*True*/;\n double  a_45=(a_21+a_41)/*True*/;\n double  a_46=(1.4*a_10)/*True*/;\n double  a_47=(1.4*a_11)/*True*/;\n double  a_48=(1.4*a_12)/*True*/;\n double  a_49=(a_46*a_5)/*True*/;\n double  a_50=(a_47*a_6)/*True*/;\n double  a_51=(a_48*a_7)/*True*/;\n double  a_52=(a_49/a_0)/*True*/;\n double  a_53=(a_50/a_1)/*True*/;\n double  a_54=(a_51/a_2)/*True*/;\n    double  a_55=(1.4-1.0)/*True*/;\n double  a_56=(1.4-1.0)/*True*/;\n double  a_57=(1.4-1.0)/*True*/;\n    double  a_58=pow(a_5,3.0)/*True*/;\n double  a_59=pow(a_6,3.0)/*True*/;\n double  a_60=pow(a_7,3.0)/*True*/;\n double  a_61=(a_55*a_58)/*True*/;\n double  a_62=(a_56*a_59)/*True*/;\n double  a_63=(a_57*a_60)/*True*/;\n       double  a_64=pow(a_0,2.0)/*True*/;\n double  a_65=pow(a_1,2.0)/*True*/;\n double  a_66=pow(a_2,2.0)/*True*/;\n double  a_67=(2.0*a_64)/*True*/;\n double  a_68=(2.0*a_65)/*True*/;\n double  a_69=(2.0*a_66)/*True*/;\n double  a_70=(a_61/a_67)/*True*/;\n double  a_71=(a_62/a_68)/*True*/;\n double  a_72=(a_63/a_69)/*True*/;\n double  a_73=(a_52-a_70)/*True*/;\n double  a_74=(a_53-a_71)/*True*/;\n double  a_75=(a_54-a_72)/*True*/;\n double  a_76=(0.3/1.0)/*True*/;\n double  a_77=(0.3/1.0)/*True*/;\n double  a_78=(0.3/1.0)/*True*/;\n double  a_79=(a_6-a_5)/*True*/;\n double  a_80=(a_7-a_6)/*True*/;\n double  a_81=(a_43-a_42)/*True*/;\n double  a_82=(a_44-a_43)/*True*/;\n double  a_83=(a_45-a_44)/*True*/;\n double  a_84=(a_74-a_73)/*True*/;\n double  a_85=(a_75-a_74)/*True*/;\n double  a_86=(0.2*1.0)/*True*/;\n double  a_87=(0.2*1.0)/*True*/;\n double  a_88=(0.2*1.0)/*True*/;\n    double  a_89=(2.0*a_0)/*True*/;\n double  a_90=(2.0*a_1)/*True*/;\n double  a_91=(2.0*a_5)/*True*/;\n double  a_92=(2.0*a_6)/*True*/;\n double  a_93=(2.0*a_7)/*True*/;\n double  a_94=(2.0*a_10)/*True*/;\n double  a_95=(2.0*a_11)/*True*/;\n double  a_96=(a_1-a_89)/*True*/;\n double  a_97=(a_2-a_90)/*True*/;\n double  a_98=(a_6-a_91)/*True*/;\n double  a_99=(a_7-a_92)/*True*/;\n double  a_100=(a_8-a_93)/*True*/;\n double  a_101=(a_11-a_94)/*True*/;\n double  a_102=(a_12-a_95)/*True*/;\n double  a_103=(a_96+a)/*True*/;\n double  a_104=(a_97+a_0)/*True*/;\n double  a_105=(a_98+a_4)/*True*/;\n double  a_106=(a_99+a_5)/*True*/;\n double  a_107=(a_100+a_6)/*True*/;\n double  a_108=(a_101+a_9)/*True*/;\n double  a_109=(a_102+a_10)/*True*/;\n double  a_110=(a_86*a_103)/*True*/;\n double  a_111=(a_87*a_104)/*True*/;\n double  a_112=(a_86*a_105)/*True*/;\n double  a_113=(a_87*a_106)/*True*/;\n double  a_114=(a_88*a_107)/*True*/;\n double  a_115=(a_86*a_108)/*True*/;\n double  a_116=(a_87*a_109)/*True*/;\n double  a_117=(-a_110)/*True*/;\n double  a_118=(-a_111)/*True*/;\n double  a_119=(-a_112)/*True*/;\n double  a_120=(-a_113)/*True*/;\n double  a_121=(-a_114)/*True*/;\n double  a_122=(-a_115)/*True*/;\n double  a_123=(-a_116)/*True*/;\n double  a_124=(a_79+a_117)/*True*/;\n double  a_125=(a_80+a_118)/*True*/;\n double  a_126=(a_81+a_119)/*True*/;\n double  a_127=(a_82+a_120)/*True*/;\n double  a_128=(a_83+a_121)/*True*/;\n double  a_129=(a_84+a_122)/*True*/;\n double  a_130=(a_85+a_123)/*True*/;\n double  a_131=(a_76*a_124)/*True*/;\n double  a_132=(a_77*a_125)/*True*/;\n double  a_133=(a_76*a_126)/*True*/;\n double  a_134=(a_77*a_127)/*True*/;\n double  a_135=(a_78*a_128)/*True*/;\n double  a_136=(a_76*a_129)/*True*/;\n double  a_137=(a_77*a_130)/*True*/;\n double  a_138=(a_0-a_131)/*True*/;\n double  a_139=(a_1-a_132)/*True*/;\n double  a_140=(a_5-a_133)/*True*/;\n double  a_141=(a_6-a_134)/*True*/;\n double  a_142=(a_7-a_135)/*True*/;\n double  a_143=(a_10-a_136)/*True*/;\n double  a_144=(a_11-a_137)/*True*/;\n   double  a_145=(1.4-1.0)/*True*/;\n double  a_146=(1.4-1.0)/*True*/;\n double  a_147=(a_145*a_143)/*True*/;\n double  a_148=(a_146*a_144)/*True*/;\n   double  a_149=(3.0-1.4)/*True*/;\n double  a_150=(3.0-1.4)/*True*/;\n   double  a_151=pow(a_140,2.0)/*True*/;\n double  a_152=pow(a_141,2.0)/*True*/;\n double  a_153=(a_149*a_151)/*True*/;\n double  a_154=(a_150*a_152)/*True*/;\n   double  a_155=(2.0*a_138)/*True*/;\n double  a_156=(2.0*a_139)/*True*/;\n double  a_157=(a_153/a_155)/*True*/;\n double  a_158=(a_154/a_156)/*True*/;\n double  a_159=(a_147+a_157)/*True*/;\n double  a_160=(a_148+a_158)/*True*/;\n double  a_161=(a_6+a_141)/*True*/;\n  double  a_162=(a_161/2.0)/*True*/;\n double  a_163=(0.3/1.0)/*True*/;\n  double  a_164=(a_163/2.0)/*True*/;\n double  a_165=(a_160-a_159)/*True*/;\n double  a_166=(0.2*1.0)/*True*/;\n  double  a_167=(2.0*a_141)/*True*/;\n double  a_168=(a_142-a_167)/*True*/;\n double  a_169=(a_168+a_140)/*True*/;\n double  a_170=(a_166*a_169)/*True*/;\n double  a_171=(-a_170)/*True*/;\n double  a_172=(a_165+a_171)/*True*/;\n double  a_173=(a_164*a_172)/*True*/;\n double  a_174=(a_162-a_173)/*True*/;\n \n",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=(+a_174);\n\n}\n"]),Raw "\n",PotentialSubroutine (Src [Raw "\nfor (int  ix = ",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw " ; ix < ",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw " ; ix += 1 ){\n             double  a=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-4"}),Raw ")]/*True*/;\n double  a_0=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-3"}),Raw ")]/*True*/;\n double  a_1=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-2"}),Raw ")]/*True*/;\n double  a_2=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-1"}),Raw ")]/*True*/;\n double  a_3=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]/*True*/;\n double  a_4=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-4"}),Raw ")]/*True*/;\n double  a_5=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-3"}),Raw ")]/*True*/;\n double  a_6=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-2"}),Raw ")]/*True*/;\n double  a_7=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-1"}),Raw ")]/*True*/;\n double  a_8=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]/*True*/;\n double  a_9=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-4"}),Raw ")]/*True*/;\n double  a_10=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-3"}),Raw ")]/*True*/;\n double  a_11=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-2"}),Raw ")]/*True*/;\n double  a_12=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-1"}),Raw ")]/*True*/;\n double  a_13=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]/*True*/;\n    double  a_14=(1.4-1.0)/*True*/;\n double  a_15=(1.4-1.0)/*True*/;\n double  a_16=(1.4-1.0)/*True*/;\n double  a_17=(a_14*a_10)/*True*/;\n double  a_18=(a_15*a_11)/*True*/;\n double  a_19=(a_16*a_12)/*True*/;\n    double  a_20=(3.0-1.4)/*True*/;\n double  a_21=(3.0-1.4)/*True*/;\n double  a_22=(3.0-1.4)/*True*/;\n    double  a_23=pow(a_5,2.0)/*True*/;\n double  a_24=pow(a_6,2.0)/*True*/;\n double  a_25=pow(a_7,2.0)/*True*/;\n double  a_26=(a_20*a_23)/*True*/;\n double  a_27=(a_21*a_24)/*True*/;\n double  a_28=(a_22*a_25)/*True*/;\n    double  a_29=(2.0*a_0)/*True*/;\n double  a_30=(2.0*a_1)/*True*/;\n double  a_31=(2.0*a_2)/*True*/;\n double  a_32=(a_26/a_29)/*True*/;\n double  a_33=(a_27/a_30)/*True*/;\n double  a_34=(a_28/a_31)/*True*/;\n double  a_35=(a_17+a_32)/*True*/;\n double  a_36=(a_18+a_33)/*True*/;\n double  a_37=(a_19+a_34)/*True*/;\n double  a_38=(1.4*a_10)/*True*/;\n double  a_39=(1.4*a_11)/*True*/;\n double  a_40=(1.4*a_12)/*True*/;\n double  a_41=(1.4*a_13)/*True*/;\n double  a_42=(a_38*a_5)/*True*/;\n double  a_43=(a_39*a_6)/*True*/;\n double  a_44=(a_40*a_7)/*True*/;\n double  a_45=(a_41*a_8)/*True*/;\n double  a_46=(a_42/a_0)/*True*/;\n double  a_47=(a_43/a_1)/*True*/;\n double  a_48=(a_44/a_2)/*True*/;\n double  a_49=(a_45/a_3)/*True*/;\n     double  a_50=(1.4-1.0)/*True*/;\n double  a_51=(1.4-1.0)/*True*/;\n double  a_52=(1.4-1.0)/*True*/;\n double  a_53=(1.4-1.0)/*True*/;\n     double  a_54=pow(a_5,3.0)/*True*/;\n double  a_55=pow(a_6,3.0)/*True*/;\n double  a_56=pow(a_7,3.0)/*True*/;\n double  a_57=pow(a_8,3.0)/*True*/;\n double  a_58=(a_50*a_54)/*True*/;\n double  a_59=(a_51*a_55)/*True*/;\n double  a_60=(a_52*a_56)/*True*/;\n double  a_61=(a_53*a_57)/*True*/;\n         double  a_62=pow(a_0,2.0)/*True*/;\n double  a_63=pow(a_1,2.0)/*True*/;\n double  a_64=pow(a_2,2.0)/*True*/;\n double  a_65=pow(a_3,2.0)/*True*/;\n double  a_66=(2.0*a_62)/*True*/;\n double  a_67=(2.0*a_63)/*True*/;\n double  a_68=(2.0*a_64)/*True*/;\n double  a_69=(2.0*a_65)/*True*/;\n double  a_70=(a_58/a_66)/*True*/;\n double  a_71=(a_59/a_67)/*True*/;\n double  a_72=(a_60/a_68)/*True*/;\n double  a_73=(a_61/a_69)/*True*/;\n double  a_74=(a_46-a_70)/*True*/;\n double  a_75=(a_47-a_71)/*True*/;\n double  a_76=(a_48-a_72)/*True*/;\n double  a_77=(a_49-a_73)/*True*/;\n double  a_78=(0.3/1.0)/*True*/;\n double  a_79=(0.3/1.0)/*True*/;\n double  a_80=(0.3/1.0)/*True*/;\n double  a_81=(a_6-a_5)/*True*/;\n double  a_82=(a_7-a_6)/*True*/;\n double  a_83=(a_36-a_35)/*True*/;\n double  a_84=(a_37-a_36)/*True*/;\n double  a_85=(a_75-a_74)/*True*/;\n double  a_86=(a_76-a_75)/*True*/;\n double  a_87=(a_77-a_76)/*True*/;\n double  a_88=(0.2*1.0)/*True*/;\n double  a_89=(0.2*1.0)/*True*/;\n double  a_90=(0.2*1.0)/*True*/;\n    double  a_91=(2.0*a_0)/*True*/;\n double  a_92=(2.0*a_1)/*True*/;\n double  a_93=(2.0*a_5)/*True*/;\n double  a_94=(2.0*a_6)/*True*/;\n double  a_95=(2.0*a_10)/*True*/;\n double  a_96=(2.0*a_11)/*True*/;\n double  a_97=(2.0*a_12)/*True*/;\n double  a_98=(a_1-a_91)/*True*/;\n double  a_99=(a_2-a_92)/*True*/;\n double  a_100=(a_6-a_93)/*True*/;\n double  a_101=(a_7-a_94)/*True*/;\n double  a_102=(a_11-a_95)/*True*/;\n double  a_103=(a_12-a_96)/*True*/;\n double  a_104=(a_13-a_97)/*True*/;\n double  a_105=(a_98+a)/*True*/;\n double  a_106=(a_99+a_0)/*True*/;\n double  a_107=(a_100+a_4)/*True*/;\n double  a_108=(a_101+a_5)/*True*/;\n double  a_109=(a_102+a_9)/*True*/;\n double  a_110=(a_103+a_10)/*True*/;\n double  a_111=(a_104+a_11)/*True*/;\n double  a_112=(a_88*a_105)/*True*/;\n double  a_113=(a_89*a_106)/*True*/;\n double  a_114=(a_88*a_107)/*True*/;\n double  a_115=(a_89*a_108)/*True*/;\n double  a_116=(a_88*a_109)/*True*/;\n double  a_117=(a_89*a_110)/*True*/;\n double  a_118=(a_90*a_111)/*True*/;\n double  a_119=(-a_112)/*True*/;\n double  a_120=(-a_113)/*True*/;\n double  a_121=(-a_114)/*True*/;\n double  a_122=(-a_115)/*True*/;\n double  a_123=(-a_116)/*True*/;\n double  a_124=(-a_117)/*True*/;\n double  a_125=(-a_118)/*True*/;\n double  a_126=(a_81+a_119)/*True*/;\n double  a_127=(a_82+a_120)/*True*/;\n double  a_128=(a_83+a_121)/*True*/;\n double  a_129=(a_84+a_122)/*True*/;\n double  a_130=(a_85+a_123)/*True*/;\n double  a_131=(a_86+a_124)/*True*/;\n double  a_132=(a_87+a_125)/*True*/;\n double  a_133=(a_78*a_126)/*True*/;\n double  a_134=(a_79*a_127)/*True*/;\n double  a_135=(a_78*a_128)/*True*/;\n double  a_136=(a_79*a_129)/*True*/;\n double  a_137=(a_78*a_130)/*True*/;\n double  a_138=(a_79*a_131)/*True*/;\n double  a_139=(a_80*a_132)/*True*/;\n double  a_140=(a_0-a_133)/*True*/;\n double  a_141=(a_1-a_134)/*True*/;\n double  a_142=(a_5-a_135)/*True*/;\n double  a_143=(a_6-a_136)/*True*/;\n double  a_144=(a_10-a_137)/*True*/;\n double  a_145=(a_11-a_138)/*True*/;\n double  a_146=(a_12-a_139)/*True*/;\n double  a_147=(1.4*a_144)/*True*/;\n double  a_148=(1.4*a_145)/*True*/;\n double  a_149=(a_147*a_142)/*True*/;\n double  a_150=(a_148*a_143)/*True*/;\n double  a_151=(a_149/a_140)/*True*/;\n double  a_152=(a_150/a_141)/*True*/;\n   double  a_153=(1.4-1.0)/*True*/;\n double  a_154=(1.4-1.0)/*True*/;\n   double  a_155=pow(a_142,3.0)/*True*/;\n double  a_156=pow(a_143,3.0)/*True*/;\n double  a_157=(a_153*a_155)/*True*/;\n double  a_158=(a_154*a_156)/*True*/;\n     double  a_159=pow(a_140,2.0)/*True*/;\n double  a_160=pow(a_141,2.0)/*True*/;\n double  a_161=(2.0*a_159)/*True*/;\n double  a_162=(2.0*a_160)/*True*/;\n double  a_163=(a_157/a_161)/*True*/;\n double  a_164=(a_158/a_162)/*True*/;\n double  a_165=(a_151-a_163)/*True*/;\n double  a_166=(a_152-a_164)/*True*/;\n double  a_167=(a_11+a_145)/*True*/;\n  double  a_168=(a_167/2.0)/*True*/;\n double  a_169=(0.3/1.0)/*True*/;\n  double  a_170=(a_169/2.0)/*True*/;\n double  a_171=(a_166-a_165)/*True*/;\n double  a_172=(0.2*1.0)/*True*/;\n  double  a_173=(2.0*a_145)/*True*/;\n double  a_174=(a_146-a_173)/*True*/;\n double  a_175=(a_174+a_144)/*True*/;\n double  a_176=(a_172*a_175)/*True*/;\n double  a_177=(-a_176)/*True*/;\n double  a_178=(a_171+a_177)/*True*/;\n double  a_179=(a_170*a_178)/*True*/;\n double  a_180=(a_168-a_179)/*True*/;\n \n",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=(+a_180);\n\n}\n"]),Raw "\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRsc2[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=Facet_m1_src__1_dest__0_Recv.Ridge_m1_Om_147_r__1_r__0[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRsc2[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw ")]=Ridge_0_Om_147_r__1_r__0[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRsc1[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=Facet_m1_src__1_dest__0_Recv.Ridge_m1_Om_148_r__1_r__0[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRsc1[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw ")]=Ridge_0_Om_148_r__1_r__0[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRsc0[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=Facet_m1_src__1_dest__0_Recv.Ridge_m1_Om_149_r__1_r__0[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRsc0[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw ")]=Ridge_0_Om_149_r__1_r__0[ix];}\n\n",PotentialSubroutine (Src [Raw "\nfor (int  ix = ",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw " ; ix < ",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw " ; ix += 1 ){\n            double  a=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]/*True*/;\n double  a_0=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "1"}),Raw ")]/*True*/;\n double  a_1=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "2"}),Raw ")]/*True*/;\n double  a_2=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "3"}),Raw ")]/*True*/;\n double  a_3=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")]/*True*/;\n double  a_4=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]/*True*/;\n double  a_5=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "1"}),Raw ")]/*True*/;\n double  a_6=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "2"}),Raw ")]/*True*/;\n double  a_7=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "3"}),Raw ")]/*True*/;\n double  a_8=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")]/*True*/;\n double  a_9=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "1"}),Raw ")]/*True*/;\n double  a_10=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "2"}),Raw ")]/*True*/;\n double  a_11=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "3"}),Raw ")]/*True*/;\n    double  a_12=(1.4-1.0)/*True*/;\n double  a_13=(1.4-1.0)/*True*/;\n double  a_14=(1.4-1.0)/*True*/;\n double  a_15=(a_12*a_9)/*True*/;\n double  a_16=(a_13*a_10)/*True*/;\n double  a_17=(a_14*a_11)/*True*/;\n    double  a_18=(3.0-1.4)/*True*/;\n double  a_19=(3.0-1.4)/*True*/;\n double  a_20=(3.0-1.4)/*True*/;\n    double  a_21=pow(a_5,2.0)/*True*/;\n double  a_22=pow(a_6,2.0)/*True*/;\n double  a_23=pow(a_7,2.0)/*True*/;\n double  a_24=(a_18*a_21)/*True*/;\n double  a_25=(a_19*a_22)/*True*/;\n double  a_26=(a_20*a_23)/*True*/;\n    double  a_27=(2.0*a_0)/*True*/;\n double  a_28=(2.0*a_1)/*True*/;\n double  a_29=(2.0*a_2)/*True*/;\n double  a_30=(a_24/a_27)/*True*/;\n double  a_31=(a_25/a_28)/*True*/;\n double  a_32=(a_26/a_29)/*True*/;\n double  a_33=(a_15+a_30)/*True*/;\n double  a_34=(a_16+a_31)/*True*/;\n double  a_35=(a_17+a_32)/*True*/;\n double  a_36=(0.3/1.0)/*True*/;\n double  a_37=(0.3/1.0)/*True*/;\n double  a_38=(0.3/1.0)/*True*/;\n double  a_39=(a_6-a_5)/*True*/;\n double  a_40=(a_7-a_6)/*True*/;\n double  a_41=(a_8-a_7)/*True*/;\n double  a_42=(a_34-a_33)/*True*/;\n double  a_43=(a_35-a_34)/*True*/;\n double  a_44=(0.2*1.0)/*True*/;\n double  a_45=(0.2*1.0)/*True*/;\n double  a_46=(0.2*1.0)/*True*/;\n    double  a_47=(2.0*a_0)/*True*/;\n double  a_48=(2.0*a_1)/*True*/;\n double  a_49=(2.0*a_2)/*True*/;\n double  a_50=(2.0*a_5)/*True*/;\n double  a_51=(2.0*a_6)/*True*/;\n double  a_52=(a_1-a_47)/*True*/;\n double  a_53=(a_2-a_48)/*True*/;\n double  a_54=(a_3-a_49)/*True*/;\n double  a_55=(a_6-a_50)/*True*/;\n double  a_56=(a_7-a_51)/*True*/;\n double  a_57=(a_52+a)/*True*/;\n double  a_58=(a_53+a_0)/*True*/;\n double  a_59=(a_54+a_1)/*True*/;\n double  a_60=(a_55+a_4)/*True*/;\n double  a_61=(a_56+a_5)/*True*/;\n double  a_62=(a_44*a_57)/*True*/;\n double  a_63=(a_45*a_58)/*True*/;\n double  a_64=(a_46*a_59)/*True*/;\n double  a_65=(a_44*a_60)/*True*/;\n double  a_66=(a_45*a_61)/*True*/;\n double  a_67=(-a_62)/*True*/;\n double  a_68=(-a_63)/*True*/;\n double  a_69=(-a_64)/*True*/;\n double  a_70=(-a_65)/*True*/;\n double  a_71=(-a_66)/*True*/;\n double  a_72=(a_39+a_67)/*True*/;\n double  a_73=(a_40+a_68)/*True*/;\n double  a_74=(a_41+a_69)/*True*/;\n double  a_75=(a_42+a_70)/*True*/;\n double  a_76=(a_43+a_71)/*True*/;\n double  a_77=(a_36*a_72)/*True*/;\n double  a_78=(a_37*a_73)/*True*/;\n double  a_79=(a_38*a_74)/*True*/;\n double  a_80=(a_36*a_75)/*True*/;\n double  a_81=(a_37*a_76)/*True*/;\n double  a_82=(a_0-a_77)/*True*/;\n double  a_83=(a_1-a_78)/*True*/;\n double  a_84=(a_2-a_79)/*True*/;\n double  a_85=(a_5-a_80)/*True*/;\n double  a_86=(a_6-a_81)/*True*/;\n double  a_87=(a_1+a_83)/*True*/;\n  double  a_88=(a_87/2.0)/*True*/;\n double  a_89=(0.3/1.0)/*True*/;\n  double  a_90=(a_89/2.0)/*True*/;\n double  a_91=(a_86-a_85)/*True*/;\n double  a_92=(0.2*1.0)/*True*/;\n  double  a_93=(2.0*a_83)/*True*/;\n double  a_94=(a_84-a_93)/*True*/;\n double  a_95=(a_94+a_82)/*True*/;\n double  a_96=(a_92*a_95)/*True*/;\n double  a_97=(-a_96)/*True*/;\n double  a_98=(a_91+a_97)/*True*/;\n double  a_99=(a_90*a_98)/*True*/;\n double  a_100=(a_88-a_99)/*True*/;\n \nr[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=a_100;\n\n}\n"]),Raw "\n",PotentialSubroutine (Src [Raw "\nfor (int  ix = ",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw " ; ix < ",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw " ; ix += 1 ){\n             double  a=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]/*True*/;\n double  a_0=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "1"}),Raw ")]/*True*/;\n double  a_1=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "2"}),Raw ")]/*True*/;\n double  a_2=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "3"}),Raw ")]/*True*/;\n double  a_3=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")]/*True*/;\n double  a_4=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]/*True*/;\n double  a_5=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "1"}),Raw ")]/*True*/;\n double  a_6=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "2"}),Raw ")]/*True*/;\n double  a_7=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "3"}),Raw ")]/*True*/;\n double  a_8=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")]/*True*/;\n double  a_9=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]/*True*/;\n double  a_10=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "1"}),Raw ")]/*True*/;\n double  a_11=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "2"}),Raw ")]/*True*/;\n double  a_12=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "3"}),Raw ")]/*True*/;\n double  a_13=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")]/*True*/;\n     double  a_14=(1.4-1.0)/*True*/;\n double  a_15=(1.4-1.0)/*True*/;\n double  a_16=(1.4-1.0)/*True*/;\n double  a_17=(1.4-1.0)/*True*/;\n double  a_18=(a_14*a_10)/*True*/;\n double  a_19=(a_15*a_11)/*True*/;\n double  a_20=(a_16*a_12)/*True*/;\n double  a_21=(a_17*a_13)/*True*/;\n     double  a_22=(3.0-1.4)/*True*/;\n double  a_23=(3.0-1.4)/*True*/;\n double  a_24=(3.0-1.4)/*True*/;\n double  a_25=(3.0-1.4)/*True*/;\n     double  a_26=pow(a_5,2.0)/*True*/;\n double  a_27=pow(a_6,2.0)/*True*/;\n double  a_28=pow(a_7,2.0)/*True*/;\n double  a_29=pow(a_8,2.0)/*True*/;\n double  a_30=(a_22*a_26)/*True*/;\n double  a_31=(a_23*a_27)/*True*/;\n double  a_32=(a_24*a_28)/*True*/;\n double  a_33=(a_25*a_29)/*True*/;\n     double  a_34=(2.0*a_0)/*True*/;\n double  a_35=(2.0*a_1)/*True*/;\n double  a_36=(2.0*a_2)/*True*/;\n double  a_37=(2.0*a_3)/*True*/;\n double  a_38=(a_30/a_34)/*True*/;\n double  a_39=(a_31/a_35)/*True*/;\n double  a_40=(a_32/a_36)/*True*/;\n double  a_41=(a_33/a_37)/*True*/;\n double  a_42=(a_18+a_38)/*True*/;\n double  a_43=(a_19+a_39)/*True*/;\n double  a_44=(a_20+a_40)/*True*/;\n double  a_45=(a_21+a_41)/*True*/;\n double  a_46=(1.4*a_10)/*True*/;\n double  a_47=(1.4*a_11)/*True*/;\n double  a_48=(1.4*a_12)/*True*/;\n double  a_49=(a_46*a_5)/*True*/;\n double  a_50=(a_47*a_6)/*True*/;\n double  a_51=(a_48*a_7)/*True*/;\n double  a_52=(a_49/a_0)/*True*/;\n double  a_53=(a_50/a_1)/*True*/;\n double  a_54=(a_51/a_2)/*True*/;\n    double  a_55=(1.4-1.0)/*True*/;\n double  a_56=(1.4-1.0)/*True*/;\n double  a_57=(1.4-1.0)/*True*/;\n    double  a_58=pow(a_5,3.0)/*True*/;\n double  a_59=pow(a_6,3.0)/*True*/;\n double  a_60=pow(a_7,3.0)/*True*/;\n double  a_61=(a_55*a_58)/*True*/;\n double  a_62=(a_56*a_59)/*True*/;\n double  a_63=(a_57*a_60)/*True*/;\n       double  a_64=pow(a_0,2.0)/*True*/;\n double  a_65=pow(a_1,2.0)/*True*/;\n double  a_66=pow(a_2,2.0)/*True*/;\n double  a_67=(2.0*a_64)/*True*/;\n double  a_68=(2.0*a_65)/*True*/;\n double  a_69=(2.0*a_66)/*True*/;\n double  a_70=(a_61/a_67)/*True*/;\n double  a_71=(a_62/a_68)/*True*/;\n double  a_72=(a_63/a_69)/*True*/;\n double  a_73=(a_52-a_70)/*True*/;\n double  a_74=(a_53-a_71)/*True*/;\n double  a_75=(a_54-a_72)/*True*/;\n double  a_76=(0.3/1.0)/*True*/;\n double  a_77=(0.3/1.0)/*True*/;\n double  a_78=(0.3/1.0)/*True*/;\n double  a_79=(a_6-a_5)/*True*/;\n double  a_80=(a_7-a_6)/*True*/;\n double  a_81=(a_43-a_42)/*True*/;\n double  a_82=(a_44-a_43)/*True*/;\n double  a_83=(a_45-a_44)/*True*/;\n double  a_84=(a_74-a_73)/*True*/;\n double  a_85=(a_75-a_74)/*True*/;\n double  a_86=(0.2*1.0)/*True*/;\n double  a_87=(0.2*1.0)/*True*/;\n double  a_88=(0.2*1.0)/*True*/;\n    double  a_89=(2.0*a_0)/*True*/;\n double  a_90=(2.0*a_1)/*True*/;\n double  a_91=(2.0*a_5)/*True*/;\n double  a_92=(2.0*a_6)/*True*/;\n double  a_93=(2.0*a_7)/*True*/;\n double  a_94=(2.0*a_10)/*True*/;\n double  a_95=(2.0*a_11)/*True*/;\n double  a_96=(a_1-a_89)/*True*/;\n double  a_97=(a_2-a_90)/*True*/;\n double  a_98=(a_6-a_91)/*True*/;\n double  a_99=(a_7-a_92)/*True*/;\n double  a_100=(a_8-a_93)/*True*/;\n double  a_101=(a_11-a_94)/*True*/;\n double  a_102=(a_12-a_95)/*True*/;\n double  a_103=(a_96+a)/*True*/;\n double  a_104=(a_97+a_0)/*True*/;\n double  a_105=(a_98+a_4)/*True*/;\n double  a_106=(a_99+a_5)/*True*/;\n double  a_107=(a_100+a_6)/*True*/;\n double  a_108=(a_101+a_9)/*True*/;\n double  a_109=(a_102+a_10)/*True*/;\n double  a_110=(a_86*a_103)/*True*/;\n double  a_111=(a_87*a_104)/*True*/;\n double  a_112=(a_86*a_105)/*True*/;\n double  a_113=(a_87*a_106)/*True*/;\n double  a_114=(a_88*a_107)/*True*/;\n double  a_115=(a_86*a_108)/*True*/;\n double  a_116=(a_87*a_109)/*True*/;\n double  a_117=(-a_110)/*True*/;\n double  a_118=(-a_111)/*True*/;\n double  a_119=(-a_112)/*True*/;\n double  a_120=(-a_113)/*True*/;\n double  a_121=(-a_114)/*True*/;\n double  a_122=(-a_115)/*True*/;\n double  a_123=(-a_116)/*True*/;\n double  a_124=(a_79+a_117)/*True*/;\n double  a_125=(a_80+a_118)/*True*/;\n double  a_126=(a_81+a_119)/*True*/;\n double  a_127=(a_82+a_120)/*True*/;\n double  a_128=(a_83+a_121)/*True*/;\n double  a_129=(a_84+a_122)/*True*/;\n double  a_130=(a_85+a_123)/*True*/;\n double  a_131=(a_76*a_124)/*True*/;\n double  a_132=(a_77*a_125)/*True*/;\n double  a_133=(a_76*a_126)/*True*/;\n double  a_134=(a_77*a_127)/*True*/;\n double  a_135=(a_78*a_128)/*True*/;\n double  a_136=(a_76*a_129)/*True*/;\n double  a_137=(a_77*a_130)/*True*/;\n double  a_138=(a_0-a_131)/*True*/;\n double  a_139=(a_1-a_132)/*True*/;\n double  a_140=(a_5-a_133)/*True*/;\n double  a_141=(a_6-a_134)/*True*/;\n double  a_142=(a_7-a_135)/*True*/;\n double  a_143=(a_10-a_136)/*True*/;\n double  a_144=(a_11-a_137)/*True*/;\n   double  a_145=(1.4-1.0)/*True*/;\n double  a_146=(1.4-1.0)/*True*/;\n double  a_147=(a_145*a_143)/*True*/;\n double  a_148=(a_146*a_144)/*True*/;\n   double  a_149=(3.0-1.4)/*True*/;\n double  a_150=(3.0-1.4)/*True*/;\n   double  a_151=pow(a_140,2.0)/*True*/;\n double  a_152=pow(a_141,2.0)/*True*/;\n double  a_153=(a_149*a_151)/*True*/;\n double  a_154=(a_150*a_152)/*True*/;\n   double  a_155=(2.0*a_138)/*True*/;\n double  a_156=(2.0*a_139)/*True*/;\n double  a_157=(a_153/a_155)/*True*/;\n double  a_158=(a_154/a_156)/*True*/;\n double  a_159=(a_147+a_157)/*True*/;\n double  a_160=(a_148+a_158)/*True*/;\n double  a_161=(a_6+a_141)/*True*/;\n  double  a_162=(a_161/2.0)/*True*/;\n double  a_163=(0.3/1.0)/*True*/;\n  double  a_164=(a_163/2.0)/*True*/;\n double  a_165=(a_160-a_159)/*True*/;\n double  a_166=(0.2*1.0)/*True*/;\n  double  a_167=(2.0*a_141)/*True*/;\n double  a_168=(a_142-a_167)/*True*/;\n double  a_169=(a_168+a_140)/*True*/;\n double  a_170=(a_166*a_169)/*True*/;\n double  a_171=(-a_170)/*True*/;\n double  a_172=(a_165+a_171)/*True*/;\n double  a_173=(a_164*a_172)/*True*/;\n double  a_174=(a_162-a_173)/*True*/;\n \nm[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=a_174;\n\n}\n"]),Raw "\n",PotentialSubroutine (Src [Raw "\nfor (int  ix = ",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw " ; ix < ",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw " ; ix += 1 ){\n             double  a=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]/*True*/;\n double  a_0=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "1"}),Raw ")]/*True*/;\n double  a_1=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "2"}),Raw ")]/*True*/;\n double  a_2=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "3"}),Raw ")]/*True*/;\n double  a_3=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc2"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")]/*True*/;\n double  a_4=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]/*True*/;\n double  a_5=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "1"}),Raw ")]/*True*/;\n double  a_6=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "2"}),Raw ")]/*True*/;\n double  a_7=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "3"}),Raw ")]/*True*/;\n double  a_8=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc1"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")]/*True*/;\n double  a_9=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]/*True*/;\n double  a_10=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "1"}),Raw ")]/*True*/;\n double  a_11=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "2"}),Raw ")]/*True*/;\n double  a_12=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "3"}),Raw ")]/*True*/;\n double  a_13=",Hole (Typed {_holeType = "rsc_surface * __restrict ", _holeExpr = "Rsc0"}),Raw "[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")]/*True*/;\n    double  a_14=(1.4-1.0)/*True*/;\n double  a_15=(1.4-1.0)/*True*/;\n double  a_16=(1.4-1.0)/*True*/;\n double  a_17=(a_14*a_10)/*True*/;\n double  a_18=(a_15*a_11)/*True*/;\n double  a_19=(a_16*a_12)/*True*/;\n    double  a_20=(3.0-1.4)/*True*/;\n double  a_21=(3.0-1.4)/*True*/;\n double  a_22=(3.0-1.4)/*True*/;\n    double  a_23=pow(a_5,2.0)/*True*/;\n double  a_24=pow(a_6,2.0)/*True*/;\n double  a_25=pow(a_7,2.0)/*True*/;\n double  a_26=(a_20*a_23)/*True*/;\n double  a_27=(a_21*a_24)/*True*/;\n double  a_28=(a_22*a_25)/*True*/;\n    double  a_29=(2.0*a_0)/*True*/;\n double  a_30=(2.0*a_1)/*True*/;\n double  a_31=(2.0*a_2)/*True*/;\n double  a_32=(a_26/a_29)/*True*/;\n double  a_33=(a_27/a_30)/*True*/;\n double  a_34=(a_28/a_31)/*True*/;\n double  a_35=(a_17+a_32)/*True*/;\n double  a_36=(a_18+a_33)/*True*/;\n double  a_37=(a_19+a_34)/*True*/;\n double  a_38=(1.4*a_10)/*True*/;\n double  a_39=(1.4*a_11)/*True*/;\n double  a_40=(1.4*a_12)/*True*/;\n double  a_41=(1.4*a_13)/*True*/;\n double  a_42=(a_38*a_5)/*True*/;\n double  a_43=(a_39*a_6)/*True*/;\n double  a_44=(a_40*a_7)/*True*/;\n double  a_45=(a_41*a_8)/*True*/;\n double  a_46=(a_42/a_0)/*True*/;\n double  a_47=(a_43/a_1)/*True*/;\n double  a_48=(a_44/a_2)/*True*/;\n double  a_49=(a_45/a_3)/*True*/;\n     double  a_50=(1.4-1.0)/*True*/;\n double  a_51=(1.4-1.0)/*True*/;\n double  a_52=(1.4-1.0)/*True*/;\n double  a_53=(1.4-1.0)/*True*/;\n     double  a_54=pow(a_5,3.0)/*True*/;\n double  a_55=pow(a_6,3.0)/*True*/;\n double  a_56=pow(a_7,3.0)/*True*/;\n double  a_57=pow(a_8,3.0)/*True*/;\n double  a_58=(a_50*a_54)/*True*/;\n double  a_59=(a_51*a_55)/*True*/;\n double  a_60=(a_52*a_56)/*True*/;\n double  a_61=(a_53*a_57)/*True*/;\n         double  a_62=pow(a_0,2.0)/*True*/;\n double  a_63=pow(a_1,2.0)/*True*/;\n double  a_64=pow(a_2,2.0)/*True*/;\n double  a_65=pow(a_3,2.0)/*True*/;\n double  a_66=(2.0*a_62)/*True*/;\n double  a_67=(2.0*a_63)/*True*/;\n double  a_68=(2.0*a_64)/*True*/;\n double  a_69=(2.0*a_65)/*True*/;\n double  a_70=(a_58/a_66)/*True*/;\n double  a_71=(a_59/a_67)/*True*/;\n double  a_72=(a_60/a_68)/*True*/;\n double  a_73=(a_61/a_69)/*True*/;\n double  a_74=(a_46-a_70)/*True*/;\n double  a_75=(a_47-a_71)/*True*/;\n double  a_76=(a_48-a_72)/*True*/;\n double  a_77=(a_49-a_73)/*True*/;\n double  a_78=(0.3/1.0)/*True*/;\n double  a_79=(0.3/1.0)/*True*/;\n double  a_80=(0.3/1.0)/*True*/;\n double  a_81=(a_6-a_5)/*True*/;\n double  a_82=(a_7-a_6)/*True*/;\n double  a_83=(a_36-a_35)/*True*/;\n double  a_84=(a_37-a_36)/*True*/;\n double  a_85=(a_75-a_74)/*True*/;\n double  a_86=(a_76-a_75)/*True*/;\n double  a_87=(a_77-a_76)/*True*/;\n double  a_88=(0.2*1.0)/*True*/;\n double  a_89=(0.2*1.0)/*True*/;\n double  a_90=(0.2*1.0)/*True*/;\n    double  a_91=(2.0*a_0)/*True*/;\n double  a_92=(2.0*a_1)/*True*/;\n double  a_93=(2.0*a_5)/*True*/;\n double  a_94=(2.0*a_6)/*True*/;\n double  a_95=(2.0*a_10)/*True*/;\n double  a_96=(2.0*a_11)/*True*/;\n double  a_97=(2.0*a_12)/*True*/;\n double  a_98=(a_1-a_91)/*True*/;\n double  a_99=(a_2-a_92)/*True*/;\n double  a_100=(a_6-a_93)/*True*/;\n double  a_101=(a_7-a_94)/*True*/;\n double  a_102=(a_11-a_95)/*True*/;\n double  a_103=(a_12-a_96)/*True*/;\n double  a_104=(a_13-a_97)/*True*/;\n double  a_105=(a_98+a)/*True*/;\n double  a_106=(a_99+a_0)/*True*/;\n double  a_107=(a_100+a_4)/*True*/;\n double  a_108=(a_101+a_5)/*True*/;\n double  a_109=(a_102+a_9)/*True*/;\n double  a_110=(a_103+a_10)/*True*/;\n double  a_111=(a_104+a_11)/*True*/;\n double  a_112=(a_88*a_105)/*True*/;\n double  a_113=(a_89*a_106)/*True*/;\n double  a_114=(a_88*a_107)/*True*/;\n double  a_115=(a_89*a_108)/*True*/;\n double  a_116=(a_88*a_109)/*True*/;\n double  a_117=(a_89*a_110)/*True*/;\n double  a_118=(a_90*a_111)/*True*/;\n double  a_119=(-a_112)/*True*/;\n double  a_120=(-a_113)/*True*/;\n double  a_121=(-a_114)/*True*/;\n double  a_122=(-a_115)/*True*/;\n double  a_123=(-a_116)/*True*/;\n double  a_124=(-a_117)/*True*/;\n double  a_125=(-a_118)/*True*/;\n double  a_126=(a_81+a_119)/*True*/;\n double  a_127=(a_82+a_120)/*True*/;\n double  a_128=(a_83+a_121)/*True*/;\n double  a_129=(a_84+a_122)/*True*/;\n double  a_130=(a_85+a_123)/*True*/;\n double  a_131=(a_86+a_124)/*True*/;\n double  a_132=(a_87+a_125)/*True*/;\n double  a_133=(a_78*a_126)/*True*/;\n double  a_134=(a_79*a_127)/*True*/;\n double  a_135=(a_78*a_128)/*True*/;\n double  a_136=(a_79*a_129)/*True*/;\n double  a_137=(a_78*a_130)/*True*/;\n double  a_138=(a_79*a_131)/*True*/;\n double  a_139=(a_80*a_132)/*True*/;\n double  a_140=(a_0-a_133)/*True*/;\n double  a_141=(a_1-a_134)/*True*/;\n double  a_142=(a_5-a_135)/*True*/;\n double  a_143=(a_6-a_136)/*True*/;\n double  a_144=(a_10-a_137)/*True*/;\n double  a_145=(a_11-a_138)/*True*/;\n double  a_146=(a_12-a_139)/*True*/;\n double  a_147=(1.4*a_144)/*True*/;\n double  a_148=(1.4*a_145)/*True*/;\n double  a_149=(a_147*a_142)/*True*/;\n double  a_150=(a_148*a_143)/*True*/;\n double  a_151=(a_149/a_140)/*True*/;\n double  a_152=(a_150/a_141)/*True*/;\n   double  a_153=(1.4-1.0)/*True*/;\n double  a_154=(1.4-1.0)/*True*/;\n   double  a_155=pow(a_142,3.0)/*True*/;\n double  a_156=pow(a_143,3.0)/*True*/;\n double  a_157=(a_153*a_155)/*True*/;\n double  a_158=(a_154*a_156)/*True*/;\n     double  a_159=pow(a_140,2.0)/*True*/;\n double  a_160=pow(a_141,2.0)/*True*/;\n double  a_161=(2.0*a_159)/*True*/;\n double  a_162=(2.0*a_160)/*True*/;\n double  a_163=(a_157/a_161)/*True*/;\n double  a_164=(a_158/a_162)/*True*/;\n double  a_165=(a_151-a_163)/*True*/;\n double  a_166=(a_152-a_164)/*True*/;\n double  a_167=(a_11+a_145)/*True*/;\n  double  a_168=(a_167/2.0)/*True*/;\n double  a_169=(0.3/1.0)/*True*/;\n  double  a_170=(a_169/2.0)/*True*/;\n double  a_171=(a_166-a_165)/*True*/;\n double  a_172=(0.2*1.0)/*True*/;\n  double  a_173=(2.0*a_145)/*True*/;\n double  a_174=(a_146-a_173)/*True*/;\n double  a_175=(a_174+a_144)/*True*/;\n double  a_176=(a_172*a_175)/*True*/;\n double  a_177=(-a_176)/*True*/;\n double  a_178=(a_171+a_177)/*True*/;\n double  a_179=(a_170*a_178)/*True*/;\n double  a_180=(a_168-a_179)/*True*/;\n \ne[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=a_180;\n\n}\n"]),Raw "\n}\n"])]}
Found 24 subroutines.
Found 6 subroutine groups.
("Count of typed holes #",1,34)
("Count of typed holes #",2,34)
("Count of typed holes #",3,19)
("Count of typed holes #",4,19)
("Count of typed holes #",5,30)
("Count of typed holes #",6,17)
### cprog1
CProgram {_headerFileContent = Src [Raw "\n#pragma once\n#ifdef __cplusplus\nextern \"C\"\n{\n#endif\n#include <mpi.h>\n\n\n#define NX  300\ntypedef double rsc_surface;\nextern double e[310];\nextern double m[310];\nextern double r[310];\nextern double Rsc0[162];\nextern double Rsc2[162];\nextern double Rsc1[162];\nstruct Facet_1_src__0_dest__1{double Ridge_1_St_e[4];\ndouble Ridge_1_St_m[4];\ndouble Ridge_1_St_r[4];\ndouble Ridge_1_Om_147_r__0_r__1[4];\ndouble Ridge_1_Om_148_r__0_r__1[4];\ndouble Ridge_1_Om_149_r__0_r__1[4];\n};extern struct Facet_1_src__0_dest__1 Facet_1_src__0_dest__1_Send;extern struct Facet_1_src__0_dest__1 Facet_1_src__0_dest__1_Recv;extern MPI_Request req_Facet_1_src__0_dest__1;\n\nextern double Ridge_0_Om_147_r__0_r__1[4];\nextern double Ridge_0_Om_148_r__0_r__1[4];\nextern double Ridge_0_Om_149_r__0_r__1[4];\ntypedef double rsc_surface;\nstruct Facet_m1_src__1_dest__0{double Ridge_m1_St_e[4];\ndouble Ridge_m1_St_m[4];\ndouble Ridge_m1_St_r[4];\ndouble Ridge_m1_Om_147_r__1_r__0[4];\ndouble Ridge_m1_Om_148_r__1_r__0[4];\ndouble Ridge_m1_Om_149_r__1_r__0[4];\n};extern struct Facet_m1_src__1_dest__0 Facet_m1_src__1_dest__0_Send;extern struct Facet_m1_src__1_dest__0 Facet_m1_src__1_dest__0_Recv;extern MPI_Request req_Facet_m1_src__1_dest__0;\n\nextern double Ridge_0_Om_147_r__1_r__0[4];\nextern double Ridge_0_Om_148_r__1_r__0[4];\nextern double Ridge_0_Om_149_r__1_r__0[4];\n\nstruct Formura_Navigator {\nint time_step;\nint lower_x;\nint upper_x;\nint offset_x;\nMPI_Comm mpi_comm;\nint mpi_my_rank;\nint mpi_rank__m1;\nint mpi_rank__0;\nint mpi_rank__1;\n};\nextern struct Formura_Navigator navi;\n\nint Formura_Init (struct Formura_Navigator *navi, MPI_Comm comm);\n\nvoid Formura_internal();\nvoid Formura_internal_1();\nvoid Formura_internal_2();\nvoid Formura_internal_3();\n/*INSERT SUBROUTINES HERE*/\nint Formura_Forward (struct Formura_Navigator *navi);\n#ifdef __cplusplus\n}\n#endif\n"], _sourceFileContent = Src [Raw "\n#include <mpi.h>\n#include <math.h>\n#include <stdbool.h>\n\n#include \"shocktube.h\"\n\n\n\ndouble e[310];\ndouble m[310];\ndouble r[310];\ndouble Rsc0[162];\ndouble Rsc2[162];\ndouble Rsc1[162];\nstruct Facet_1_src__0_dest__1 Facet_1_src__0_dest__1_Send;struct Facet_1_src__0_dest__1 Facet_1_src__0_dest__1_Recv;MPI_Request req_Facet_1_src__0_dest__1;\n\ndouble Ridge_0_Om_147_r__0_r__1[4];\ndouble Ridge_0_Om_148_r__0_r__1[4];\ndouble Ridge_0_Om_149_r__0_r__1[4];\nstruct Facet_m1_src__1_dest__0 Facet_m1_src__1_dest__0_Send;struct Facet_m1_src__1_dest__0 Facet_m1_src__1_dest__0_Recv;MPI_Request req_Facet_m1_src__1_dest__0;\n\ndouble Ridge_0_Om_147_r__1_r__0[4];\ndouble Ridge_0_Om_148_r__1_r__0[4];\ndouble Ridge_0_Om_149_r__1_r__0[4];\n\nstruct Formura_Navigator navi;\n\nvoid Formura_decode_mpi_rank (int r, int *ix){\nint s=r;\n*ix=s%1;\ns=s/1;\n}\nint Formura_encode_mpi_rank ( int ix){\nint s = 0;\ns *= 1;\ns += (ix%1+1)%1;\nreturn s;}\nint Formura_Init (struct Formura_Navigator *navi, MPI_Comm comm){\nint ix;\nnavi->mpi_comm = comm;\n{int r; MPI_Comm_rank(comm,&r);navi->mpi_my_rank = r;}\nFormura_decode_mpi_rank( navi->mpi_my_rank, &ix);\nnavi->mpi_rank__m1=Formura_encode_mpi_rank( ix+(",Hole (Typed {_holeType = "int", _holeExpr = "-1"}),Raw "));\nnavi->mpi_rank__0=Formura_encode_mpi_rank( ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw "));\nnavi->mpi_rank__1=Formura_encode_mpi_rank( ix+(",Hole (Typed {_holeType = "int", _holeExpr = "1"}),Raw "));\nnavi->time_step=0;\nnavi->offset_x=ix*300-4;\nnavi->lower_x=4;\nnavi->upper_x=4+300;\nreturn 0;}\n\n\nint Formura_Forward (struct Formura_Navigator *navi){\nfor(int timestep=0;timestep<1;++timestep){\nFormura_internal();\nMPI_Irecv( (void*) &Facet_1_src__0_dest__1_Recv , sizeof(struct Facet_1_src__0_dest__1) , MPI_BYTE, navi->mpi_rank__1, 0 , navi->mpi_comm, &req_Facet_1_src__0_dest__1 );\n MPI_Isend( (void*) &Facet_1_src__0_dest__1_Send , sizeof(struct Facet_1_src__0_dest__1) , MPI_BYTE, navi->mpi_rank__m1, 0 , navi->mpi_comm, &req_Facet_1_src__0_dest__1 );\n\nMPI_Wait(&req_Facet_1_src__0_dest__1,MPI_STATUS_IGNORE);\n\nFormura_internal_1();\n\n/* HALFWAYS */\nFormura_internal_2();\nMPI_Irecv( (void*) &Facet_m1_src__1_dest__0_Recv , sizeof(struct Facet_m1_src__1_dest__0) , MPI_BYTE, navi->mpi_rank__m1, 0 , navi->mpi_comm, &req_Facet_m1_src__1_dest__0 );\n MPI_Isend( (void*) &Facet_m1_src__1_dest__0_Send , sizeof(struct Facet_m1_src__1_dest__0) , MPI_BYTE, navi->mpi_rank__1, 0 , navi->mpi_comm, &req_Facet_m1_src__1_dest__0 );\n\nMPI_Wait(&req_Facet_m1_src__1_dest__0,MPI_STATUS_IGNORE);\n\nFormura_internal_3();\n\n\n}\nnavi->time_step += 4;\nreturn 0;}\n"], _auxFilesContent = fromList [("Formura_internal.c",Src [Raw "void Formura_internal(){\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nFacet_1_src__0_dest__1_Send.Ridge_1_St_e[ix]=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nFacet_1_src__0_dest__1_Send.Ridge_1_St_m[ix]=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nFacet_1_src__0_dest__1_Send.Ridge_1_St_r[ix]=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "4"}),Raw ")];}\n\n",Raw "Formura_subroutine_5(0,146,4,5,6,7,8,4,5,6,7,8,5,6,7,Rsc0,0);\n",Raw "\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRidge_0_Om_147_r__0_r__1[ix]=Rsc0[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "142"}),Raw ")];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nFacet_1_src__0_dest__1_Send.Ridge_1_Om_147_r__0_r__1[ix]=Rsc0[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")];}\n\n",Raw "Formura_subroutine_2(0,146,4,5,6,7,8,4,5,6,7,8,4,5,6,7,8,Rsc1,0);\n",Raw "\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRidge_0_Om_148_r__0_r__1[ix]=Rsc1[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "142"}),Raw ")];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nFacet_1_src__0_dest__1_Send.Ridge_1_Om_148_r__0_r__1[ix]=Rsc1[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")];}\n\n",Raw "Formura_subroutine_3(0,146,4,5,6,7,8,4,5,6,7,8,4,5,6,7,8,Rsc2,0);\n",Raw "\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRidge_0_Om_149_r__0_r__1[ix]=Rsc2[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "142"}),Raw ")];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nFacet_1_src__0_dest__1_Send.Ridge_1_Om_149_r__0_r__1[ix]=Rsc2[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")];}\n\n",Raw "Formura_subroutine_4(8,150,Rsc0,-8,Rsc0,-7,Rsc0,-6,Rsc0,-5,Rsc0,-4,Rsc1,-8,Rsc1,-7,Rsc1,-6,Rsc1,-5,Rsc1,-4,Rsc2,-7,Rsc2,-6,Rsc2,-5,-4,0);\n",Raw "\n",Raw "Formura_subroutine_0(8,150,Rsc0,-8,Rsc0,-7,Rsc0,-6,Rsc0,-5,Rsc0,-4,Rsc1,-8,Rsc1,-7,Rsc1,-6,Rsc1,-5,Rsc1,-4,Rsc2,-8,Rsc2,-7,Rsc2,-6,Rsc2,-5,Rsc2,-4,-4,0);\n",Raw "\n",Raw "Formura_subroutine_1(8,150,Rsc0,-8,Rsc0,-7,Rsc0,-6,Rsc0,-5,Rsc0,-4,Rsc1,-8,Rsc1,-7,Rsc1,-6,Rsc1,-5,Rsc1,-4,Rsc2,-8,Rsc2,-7,Rsc2,-6,Rsc2,-5,Rsc2,-4,-4,0);\n",Raw "\n}\n"]),("Formura_internal_1.c",Src [Raw "void Formura_internal_1(){\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\ne[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "304"}),Raw ")]=Facet_1_src__0_dest__1_Recv.Ridge_1_St_e[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nm[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "304"}),Raw ")]=Facet_1_src__0_dest__1_Recv.Ridge_1_St_m[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nr[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "304"}),Raw ")]=Facet_1_src__0_dest__1_Recv.Ridge_1_St_r[ix];}\n\n",Raw "Formura_subroutine_5(4,158,146,147,148,149,150,146,147,148,149,150,147,148,149,Rsc2,0);\n",Raw "\n",Raw "Formura_subroutine_2(4,158,146,147,148,149,150,146,147,148,149,150,146,147,148,149,150,Rsc1,0);\n",Raw "\n",Raw "Formura_subroutine_3(4,158,146,147,148,149,150,146,147,148,149,150,146,147,148,149,150,Rsc0,0);\n",Raw "\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRsc2[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=Ridge_0_Om_147_r__0_r__1[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRsc2[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw ")]=Facet_1_src__0_dest__1_Recv.Ridge_1_Om_147_r__0_r__1[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRsc1[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=Ridge_0_Om_148_r__0_r__1[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRsc1[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw ")]=Facet_1_src__0_dest__1_Recv.Ridge_1_Om_148_r__0_r__1[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRsc0[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=Ridge_0_Om_149_r__0_r__1[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRsc0[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw ")]=Facet_1_src__0_dest__1_Recv.Ridge_1_Om_149_r__0_r__1[ix];}\n\n",Raw "Formura_subroutine_4(150,308,Rsc2,-150,Rsc2,-149,Rsc2,-148,Rsc2,-147,Rsc2,-146,Rsc1,-150,Rsc1,-149,Rsc1,-148,Rsc1,-147,Rsc1,-146,Rsc0,-149,Rsc0,-148,Rsc0,-147,-4,0);\n",Raw "\n",Raw "Formura_subroutine_0(150,308,Rsc2,-150,Rsc2,-149,Rsc2,-148,Rsc2,-147,Rsc2,-146,Rsc1,-150,Rsc1,-149,Rsc1,-148,Rsc1,-147,Rsc1,-146,Rsc0,-150,Rsc0,-149,Rsc0,-148,Rsc0,-147,Rsc0,-146,-4,0);\n",Raw "\n",Raw "Formura_subroutine_1(150,308,Rsc2,-150,Rsc2,-149,Rsc2,-148,Rsc2,-147,Rsc2,-146,Rsc1,-150,Rsc1,-149,Rsc1,-148,Rsc1,-147,Rsc1,-146,Rsc0,-150,Rsc0,-149,Rsc0,-148,Rsc0,-147,Rsc0,-146,-4,0);\n",Raw "\n}\n"]),("Formura_internal_2.c",Src [Raw "void Formura_internal_2(){\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nFacet_m1_src__1_dest__0_Send.Ridge_m1_St_e[ix]=e[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "300"}),Raw ")];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nFacet_m1_src__1_dest__0_Send.Ridge_m1_St_m[ix]=m[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "300"}),Raw ")];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nFacet_m1_src__1_dest__0_Send.Ridge_m1_St_r[ix]=r[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "300"}),Raw ")];}\n\n",Raw "Formura_subroutine_5(0,146,154,155,156,157,158,154,155,156,157,158,155,156,157,Rsc0,0);\n",Raw "\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nFacet_m1_src__1_dest__0_Send.Ridge_m1_Om_147_r__1_r__0[ix]=Rsc0[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "142"}),Raw ")];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRidge_0_Om_147_r__1_r__0[ix]=Rsc0[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")];}\n\n",Raw "Formura_subroutine_2(0,146,154,155,156,157,158,154,155,156,157,158,154,155,156,157,158,Rsc1,0);\n",Raw "\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nFacet_m1_src__1_dest__0_Send.Ridge_m1_Om_148_r__1_r__0[ix]=Rsc1[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "142"}),Raw ")];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRidge_0_Om_148_r__1_r__0[ix]=Rsc1[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")];}\n\n",Raw "Formura_subroutine_3(0,146,154,155,156,157,158,154,155,156,157,158,154,155,156,157,158,Rsc2,0);\n",Raw "\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nFacet_m1_src__1_dest__0_Send.Ridge_m1_Om_149_r__1_r__0[ix]=Rsc2[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "142"}),Raw ")];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRidge_0_Om_149_r__1_r__0[ix]=Rsc2[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")];}\n\n",Raw "Formura_subroutine_4(158,300,Rsc0,-158,Rsc0,-157,Rsc0,-156,Rsc0,-155,Rsc0,-154,Rsc1,-158,Rsc1,-157,Rsc1,-156,Rsc1,-155,Rsc1,-154,Rsc2,-157,Rsc2,-156,Rsc2,-155,4,0);\n",Raw "\n",Raw "Formura_subroutine_0(158,300,Rsc0,-158,Rsc0,-157,Rsc0,-156,Rsc0,-155,Rsc0,-154,Rsc1,-158,Rsc1,-157,Rsc1,-156,Rsc1,-155,Rsc1,-154,Rsc2,-158,Rsc2,-157,Rsc2,-156,Rsc2,-155,Rsc2,-154,4,0);\n",Raw "\n",Raw "Formura_subroutine_1(158,300,Rsc0,-158,Rsc0,-157,Rsc0,-156,Rsc0,-155,Rsc0,-154,Rsc1,-158,Rsc1,-157,Rsc1,-156,Rsc1,-155,Rsc1,-154,Rsc2,-158,Rsc2,-157,Rsc2,-156,Rsc2,-155,Rsc2,-154,4,0);\n",Raw "\n}\n"]),("Formura_internal_3.c",Src [Raw "void Formura_internal_3(){\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\ne[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=Facet_m1_src__1_dest__0_Recv.Ridge_m1_St_e[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nm[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=Facet_m1_src__1_dest__0_Recv.Ridge_m1_St_m[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nr[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=Facet_m1_src__1_dest__0_Recv.Ridge_m1_St_r[ix];}\n\n",Raw "Formura_subroutine_5(4,158,-4,-3,-2,-1,0,-4,-3,-2,-1,0,-3,-2,-1,Rsc2,0);\n",Raw "\n",Raw "Formura_subroutine_2(4,158,-4,-3,-2,-1,0,-4,-3,-2,-1,0,-4,-3,-2,-1,0,Rsc1,0);\n",Raw "\n",Raw "Formura_subroutine_3(4,158,-4,-3,-2,-1,0,-4,-3,-2,-1,0,-4,-3,-2,-1,0,Rsc0,0);\n",Raw "\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRsc2[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=Facet_m1_src__1_dest__0_Recv.Ridge_m1_Om_147_r__1_r__0[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRsc2[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw ")]=Ridge_0_Om_147_r__1_r__0[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRsc1[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=Facet_m1_src__1_dest__0_Recv.Ridge_m1_Om_148_r__1_r__0[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRsc1[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw ")]=Ridge_0_Om_148_r__1_r__0[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRsc0[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "0"}),Raw ")]=Facet_m1_src__1_dest__0_Recv.Ridge_m1_Om_149_r__1_r__0[ix];}\n\n\nfor (int  ix = 0 ; ix < 4 ;++ ix ){\nRsc0[ix+(",Hole (Typed {_holeType = "int", _holeExpr = "158"}),Raw ")]=Ridge_0_Om_149_r__1_r__0[ix];}\n\n",Raw "Formura_subroutine_4(0,158,Rsc2,0,Rsc2,1,Rsc2,2,Rsc2,3,Rsc2,4,Rsc1,0,Rsc1,1,Rsc1,2,Rsc1,3,Rsc1,4,Rsc0,1,Rsc0,2,Rsc0,3,4,0);\n",Raw "\n",Raw "Formura_subroutine_0(0,158,Rsc2,0,Rsc2,1,Rsc2,2,Rsc2,3,Rsc2,4,Rsc1,0,Rsc1,1,Rsc1,2,Rsc1,3,Rsc1,4,Rsc0,0,Rsc0,1,Rsc0,2,Rsc0,3,Rsc0,4,4,0);\n",Raw "\n",Raw "Formura_subroutine_1(0,158,Rsc2,0,Rsc2,1,Rsc2,2,Rsc2,3,Rsc2,4,Rsc1,0,Rsc1,1,Rsc1,2,Rsc1,3,Rsc1,4,Rsc0,0,Rsc0,1,Rsc0,2,Rsc0,3,Rsc0,4,4,0);\n",Raw "\n}\n"])]}
